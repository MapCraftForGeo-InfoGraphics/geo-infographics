{"version":3,"file":"js/app.e0eb59f6.js","mappings":"8TACEA,EAAAA,EAAAA,IA8CQC,EAAAA,EAAA,MA/CVC,SAAAC,EAAAA,EAAAA,KAEI,IA4CS,EA5CTC,EAAAA,EAAAA,IA4CSC,EAAAA,EAAA,MA9CbH,SAAAC,EAAAA,EAAAA,KAGM,IA8BY,EA9BZC,EAAAA,EAAAA,IA8BYE,EAAAA,EAAA,CA9BAC,UAAW,GAAC,CAILC,WAASL,EAAAA,EAAAA,KACxB,IAuBS,EAvBTC,EAAAA,EAAAA,IAuBSK,EAAAA,EAAA,CA/BnBC,WAQ2BC,EAAAC,YAR3B,sBAAAC,EAAA,KAAAA,EAAA,GAAAC,GAQ2BH,EAAAC,YAAWE,GAAE,iB,CARxCZ,SAAAC,EAAAA,EAAAA,KASY,IAEQ,EAFRC,EAAAA,EAAAA,IAEQW,EAAAA,EAAA,CAFAC,MAAO,QAAM,CATjCd,SAAAC,EAAAA,EAAAA,KAUc,IAAyB,EAAzBC,EAAAA,EAAAA,IAAyBa,EAAAA,EAAA,MAVvCf,SAAAC,EAAAA,EAAAA,KAUsB,IAAQ,EAV9Be,EAAAA,EAAAA,IAUsB,eAVtBC,EAAA,OAAAA,EAAA,M,aAaYC,EAAAA,EAAAA,IAEQC,EAAAA,GAAA,MAfpBC,EAAAA,EAAAA,IAakCX,EAAAY,OAARC,K,WAAdxB,EAAAA,EAAAA,IAEQe,EAAAA,EAAA,CAFsBU,IAAKD,EAAOR,MAAK,OAAWQ,G,CAbtEtB,SAAAC,EAAAA,EAAAA,KAcc,IAAU,EAdxBe,EAAAA,EAAAA,KAAAQ,EAAAA,EAAAA,IAciBF,GAAI,MAdrBL,EAAA,G,yBAiB0BR,EAAAgB,KAAKC,SAAM,WAAzB5B,EAAAA,EAAAA,IAaS6B,EAAAA,EAAA,CA9BrBJ,IAAA,IAkB+BK,WAAS3B,EAAAA,EAAAA,KACxB,EAD4B4B,WAAK,EACjC3B,EAAAA,EAAAA,IAGQ4B,EAAAA,GAHRC,EAAAA,EAAAA,IAGQ,CAHDC,MAAM,yBAAyBC,OAAO,OAAOC,MAAM,cAAcC,QAAQ,IAAIC,QAAQ,SAClFP,GAAK,CApB/B7B,SAAAC,EAAAA,EAAAA,KAqBkB,IAA8B,EAA9BC,EAAAA,EAAAA,IAA8Ba,EAAAA,EAAA,MArBhDf,SAAAC,EAAAA,EAAAA,KAqB0B,IAAa,EArBvCe,EAAAA,EAAAA,IAqB0B,oBArB1BC,EAAA,OAAAA,EAAA,G,SAAAjB,SAAAC,EAAAA,EAAAA,KAyBc,IAIS,EAJTC,EAAAA,EAAAA,IAISmC,EAAAA,EAAA,CAJDL,MAAM,qBAAmB,CAzB/ChC,SAAAC,EAAAA,EAAAA,KA0B6B,IAAoB,gBAAjCiB,EAAAA,EAAAA,IAEcC,EAAAA,GAAA,MA5B9BC,EAAAA,EAAAA,IA0B4CX,EAAAgB,MAARH,K,WAApBxB,EAAAA,EAAAA,IAEcwC,EAAAA,EAAA,CAFqBf,IAAKD,EAAOiB,QAAK3B,GAAE4B,EAAAC,QAAQnB,I,CA1B9EtB,SAAAC,EAAAA,EAAAA,KA2BkB,IAAU,EA3B5Be,EAAAA,EAAAA,KAAAQ,EAAAA,EAAAA,IA2BqBF,GAAI,MA3BzBL,EAAA,G,8BAAAA,EAAA,OAAAA,EAAA,MAAAyB,EAAAA,EAAAA,IAAA,UAAAzB,EAAA,G,qBAAAjB,SAAAC,EAAAA,EAAAA,KAIQ,IAA0D,EAA1DC,EAAAA,EAAAA,IAA0DyC,EAAAA,EAAA,MAJlE3C,SAAAC,EAAAA,EAAAA,KAIyB,IAAuB,EAJhDe,EAAAA,EAAAA,IAIyB,8BAJzBC,EAAA,KAKQf,EAAAA,EAAAA,IAAmE0C,EAAAA,EAAA,CAA9CL,QAAK5B,EAAA,KAAAA,EAAA,GAAAC,GAAEiC,EAAAC,QAAUD,EAAAC,aAL9C7B,EAAA,KAmCMf,EAAAA,EAAAA,IASW6C,EAAAA,GAAA,CA5CjBvC,WAmCyBC,EAAAC,YAnCzB,sBAAAC,EAAA,KAAAA,EAAA,GAAAC,GAmCyBH,EAAAC,YAAWE,GAAEoC,MAAA,8B,CAnCtChD,SAAAC,EAAAA,EAAAA,KAoCQ,IAEgB,EAFhBC,EAAAA,EAAAA,IAEgB+C,EAAAA,EAAA,CAFAnC,MAAO,OAAQkC,MAAA,6C,CApCvChD,SAAAC,EAAAA,EAAAA,KAqCU,IAAmB,EAAnBC,EAAAA,EAAAA,IAAmBgD,MArC7BjC,EAAA,M,aAwCQC,EAAAA,EAAAA,IAGgBC,EAAAA,GAAA,MA3CxBC,EAAAA,EAAAA,IAwCsCX,EAAAY,MAAM8B,OAAO1C,EAAAgB,OAArBH,K,WAAtBxB,EAAAA,EAAAA,IAGgBmD,EAAAA,EAAA,CAHmC1B,IAAKD,EAAOR,MAAK,OAAWQ,EAC7E0B,MAAA,6C,CAzCVhD,SAAAC,EAAAA,EAAAA,KA0CU,IAAuK,EAAvKC,EAAAA,EAAAA,IAAuKkD,EAAA,CAAzJtC,MAAOQ,EAAO+B,QAAS5C,EAAA4C,QAAUC,SAAU7C,EAAA6C,SAAShC,GAAQiC,YAAmC,aAAtB9C,EAAA+C,aAAalC,GAAuBmC,SAAUhD,EAAAiD,aAAapC,I,mEA1C5JL,EAAA,G,4BAAAA,EAAA,G,qBAAAA,EAAA,OAAAA,EAAA,G,0JCGY0C,EAAAA,EAAAA,IAAa,UAAT,QAAI,K,UAQRA,EAAAA,EAAAA,IAAuC,SAApC,oCAAgC,K,0CAV3C7D,EAAAA,EAAAA,IAsDc8D,EAAAA,EAAA,MAvDlB5D,SAAAC,EAAAA,EAAAA,KAEQ,IAEQ,EAFRC,EAAAA,EAAAA,IAEQ2D,EAAAA,EAAA,MAJhB7D,SAAAC,EAAAA,EAAAA,KAGY,IAAa,CAAb6D,KAHZ7C,EAAA,KAMQf,EAAAA,EAAAA,IAEQ2D,EAAAA,EAAA,CAFDb,MAAA,uBAAyB,CANxChD,SAAAC,EAAAA,EAAAA,KAOY,IAAuB,EAAvBC,EAAAA,EAAAA,IAAuB6D,EAAAA,MAPnC9C,EAAA,KAUQf,EAAAA,EAAAA,IAEQ2D,EAAAA,EAAA,CAFDb,MAAA,uBAAyB,CAVxChD,SAAAC,EAAAA,EAAAA,KAWY,IAAuC,CAAvC+D,KAXZ/C,EAAA,KA2BQf,EAAAA,EAAAA,IAEQ2D,EAAAA,EAAA,CAFDb,MAAA,uBAAyB,CA3BxChD,SAAAC,EAAAA,EAAAA,KA4BY,IAA4G,EAA5GC,EAAAA,EAAAA,IAA4G+D,EAAAA,EAAA,CA5BxHzD,WA4BmC0D,EAAAC,MA5BnC,sBAAAxD,EAAA,KAAAA,EAAA,GAAAC,GA4BmCsD,EAAAC,MAAKvD,GAAEwD,MAAM,qBAAqBC,OAAO,QAASC,SAAQ9B,EAAA+B,Y,qCA5B7FtD,EAAA,IA+BqBiD,EAAAM,WAAQ,WAArB1E,EAAAA,EAAAA,IAGQ+D,EAAAA,EAAA,CAlChBtC,IAAA,IAAAvB,SAAAC,EAAAA,EAAAA,KAgCY,IAAoE,EAApEC,EAAAA,EAAAA,IAAoEuE,EAAAA,EAAA,MAhChFzE,SAAAC,EAAAA,EAAAA,KAgCmB,IAAS,EAhC5Be,EAAAA,EAAAA,IAgCmB,aAASQ,EAAAA,EAAAA,IAAGkD,OAAOC,KAAKT,EAAAZ,SAASsB,MAAMlD,QAAS,QAAK,MAhCxET,EAAA,KAiCYf,EAAAA,EAAAA,IAAeuE,EAAAA,MAjC3BxD,EAAA,MAAAyB,EAAAA,EAAAA,IAAA,OAoCqBwB,EAAAM,WAAQ,WAArB1E,EAAAA,EAAAA,IAQQ+D,EAAAA,EAAA,CA5ChBtC,IAAA,IAAAvB,SAAAC,EAAAA,EAAAA,KAqCY,IAA0C,EAA1CC,EAAAA,EAAAA,IAA0CuE,EAAAA,EAAA,MArCtDzE,SAAAC,EAAAA,EAAAA,KAqCmB,IAAO,EArC1Be,EAAAA,EAAAA,IAqCmB,WAAOQ,EAAAA,EAAAA,IAAG0C,EAAAZ,SAASuB,MAAO,IAAC,MArC9C5D,EAAA,KAsCYf,EAAAA,EAAAA,IAGQuE,EAAAA,EAAA,MAzCpBzE,SAAAC,EAAAA,EAAAA,KAuCgB,IACiD,EADjDC,EAAAA,EAAAA,IACiD4E,EAAAA,GAAA,CADvCV,MAAM,iBAvChC5D,WAuC0D0D,EAAAZ,SAASyB,SAvCnE,sBAAApE,EAAA,KAAAA,EAAA,GAAAC,GAuC0DsD,EAAAZ,SAASyB,SAAQnE,GACtDS,MAAO,CAAC,YAAa,Y,0BAxC1CJ,EAAA,OAAAA,EAAA,MAAAyB,EAAAA,EAAAA,IAAA,OA8CqBwB,EAAAM,WAAQ,WAArB1E,EAAAA,EAAAA,IAEQ+D,EAAAA,EAAA,CAhDhBtC,IAAA,EA8C+ByB,MAAA,0B,CA9C/BhD,SAAAC,EAAAA,EAAAA,KA+CY,IAAuB,EAAvBC,EAAAA,EAAAA,IAAuB6D,EAAAA,MA/CnC9C,EAAA,MAAAyB,EAAAA,EAAAA,IAAA,QAmDQxC,EAAAA,EAAAA,IAGQ2D,EAAAA,EAAA,MAtDhB7D,SAAAC,EAAAA,EAAAA,KAoDY,IAAmF,EAAnFC,EAAAA,EAAAA,IAAmF4B,EAAAA,EAAA,CAA5EkD,MAAM,UAAWzC,QAAOC,EAAAyC,eAAiBC,UAAWhB,EAAAM,U,CApDvExE,SAAAC,EAAAA,EAAAA,KAoDiF,IAAM,EApDvFe,EAAAA,EAAAA,IAoDiF,aApDjFC,EAAA,G,2BAqDYf,EAAAA,EAAAA,IAA8D4B,EAAAA,EAAA,CAAtDS,QAAOC,EAAA2C,MAAOnC,MAAA,wB,CArDlChD,SAAAC,EAAAA,EAAAA,KAqD6D,IAAK,EArDlEe,EAAAA,EAAAA,IAqD6D,YArD7DC,EAAA,G,kBAAAA,EAAA,OAAAA,EAAA,G,CA+EA,OACImE,KAAM,UAENR,IAAAA,GACI,MAAO,CACHT,MAAO,GACPb,SAAU,CAAC,EAEXkB,UAAU,EAElB,EACAa,QAAS,CACLF,KAAAA,GACIG,KAAKnB,MAAQ,GACbmB,KAAKhC,SAAW,CAAC,EACjBgC,KAAKC,UAAY,MACjBD,KAAKd,UAAW,CACpB,EAEAgB,QAAAA,CAASC,GACL,OAAO,IAAIC,SAAQ,CAACC,EAASC,KACzB,MAAMC,EAAS,IAAIC,WACnBD,EAAOE,OAAS,SAAUC,GACtB,MAAMC,EAAeD,EAAEE,OAAOC,OAC9BC,EAAAA,IAAQH,GACHI,MAAKzB,IACF,MAAMD,EAAOD,OAAOC,KAAKC,EAAK,IACxBW,EAAYZ,EAAK2B,MAAK/E,GAAe,YAARA,IAE7B+B,EAAWsB,EAAK2B,QAAO,CAACC,EAAKC,KAC/BD,EAAIC,EAAI,YAAcA,EAAIlB,GACnBiB,IACR,CAAC,GACEL,EAAS,CACX,KAAQV,EAAKL,KACb,KAAQG,EACR,SAAYmB,MAAMhC,OAAOiC,OAAO/B,EAAK,IAAI,IAAM,UAAY,YAC3D,KAAQtB,GAGZqC,EAAQQ,EAAO,IAElBS,OAAMC,IACHC,QAAQD,MAAMA,GACdjB,EAAOiB,EAAM,GAEzB,EACAhB,EAAOkB,cAActB,EAAK,GAElC,EAEAlB,UAAAA,GACI,GAA0B,IAAtBe,KAAKnB,MAAMzC,OAEX,YADAoF,QAAQE,IAAI,uBAIhB,MAAMvB,EAAOH,KAAKnB,MAAM,GAExBmB,KAAKE,SAASC,GACTY,MAAKF,IACFb,KAAKhC,SAAW6C,EAChBb,KAAKd,UAAW,CAAI,IAEvBoC,OAAMC,IACHvB,KAAKd,UAAW,EAChBsC,QAAQD,MAAMA,EAAM,GAEhC,EAEA5B,cAAAA,GACIK,KAAK2B,aAAa3B,KAAKhC,SAC3B,GAGJ4D,KAAAA,GACI,MAAMD,GAAeE,EAAAA,EAAAA,IAAO,gBAE5B,MAAO,CAAEF,eACb,G,UCvJJ,MAAMG,GAA2B,OAAgB,EAAQ,CAAC,CAAC,SAAS,GAAQ,CAAC,YAAY,qBAEzF,Q,oICRSpE,MAAA,6C,UAoF2BW,EAAAA,EAAAA,IAAiC,OAA5B3B,MAAM,iBAAe,W,UAa1B2B,EAAAA,EAAAA,IAAiC,OAA5B3B,MAAM,iBAAe,W,UAa1B2B,EAAAA,EAAAA,IAAiC,OAA5B3B,MAAM,iBAAe,W,UAY1B2B,EAAAA,EAAAA,IAAiC,OAA5B3B,MAAM,iBAAe,W,UAa1B2B,EAAAA,EAAAA,IAAiC,OAA5B3B,MAAM,iBAAe,W,UAkB1B2B,EAAAA,EAAAA,IAAiC,OAA5B3B,MAAM,iBAAe,W,UAU1B2B,EAAAA,EAAAA,IAAiC,OAA5B3B,MAAM,iBAAe,W,UAa1B2B,EAAAA,EAAAA,IAAiC,OAA5B3B,MAAM,iBAAe,W,WAS1B2B,EAAAA,EAAAA,IAAiC,OAA5B3B,MAAM,iBAAe,W,GA1L9D,O,2CAAAd,EAAAA,EAAAA,IAAAC,EAAAA,GAAA,OACIwC,EAAAA,EAAAA,IAsRM,MAtRNG,EAsRM,EArRF5D,EAAAA,EAAAA,IAoQSmH,EAAAA,EAAA,CApQDhH,UAAU,IAAI4B,OAAO,OAAOC,MAAM,MAAMoF,IAAI,gB,CAF5DtH,SAAAC,EAAAA,EAAAA,KAGY,IAkQc,EAlQdC,EAAAA,EAAAA,IAkQc0D,EAAAA,EAAA,CAlQDZ,MAAA,qCAA0CuE,GAAIC,EAAA1G,MAAQ,gB,CAH/Ed,SAAAC,EAAAA,EAAAA,KAIgB,IAgQqB,EAhQrBC,EAAAA,EAAAA,IAgQqBuH,EAAAA,GAAA,MApQrCzH,SAAAC,EAAAA,EAAAA,KAKoB,IA6CoB,EA7CpBC,EAAAA,EAAAA,IA6CoBwH,EAAAA,EAAA,MAlDxC1H,SAAAC,EAAAA,EAAAA,KAMwB,IAE0B,EAF1BC,EAAAA,EAAAA,IAE0ByH,EAAAA,EAAA,MARlD3H,SAAAC,EAAAA,EAAAA,KAMiD,IAEzB,EARxBe,EAAAA,EAAAA,IAMiD,kCANjDC,EAAA,KAUwBf,EAAAA,EAAAA,IAuCyB0H,EAAAA,EAAA,MAjDjD5H,SAAAC,EAAAA,EAAAA,KAW4B,IAqCc,EArCdC,EAAAA,EAAAA,IAqCc0D,EAAAA,EAAA,CArCD5B,MAAM,aAAW,CAX1DhC,SAAAC,EAAAA,EAAAA,KAYgC,IAcQ,EAdRC,EAAAA,EAAAA,IAcQ2D,EAAAA,EAAA,MA1BxC7D,SAAAC,EAAAA,EAAAA,KAaoC,IAGQ,EAHRC,EAAAA,EAAAA,IAGQuE,EAAAA,EAAA,CAHDzC,MAAM,UAAWO,QAAK5B,EAAA,KAAAA,EAAA,GAAAC,GAAE4B,EAAAqF,kBAAkBhF,EAAAiF,OAAO,oB,CAb5F9H,SAAAC,EAAAA,EAAAA,KAa+G,IAEvE,EAfxCe,EAAAA,EAAAA,IAa+G,oBAEvEd,EAAAA,EAAAA,IAA8D6H,EAAAA,EAAA,CAAtDC,IAAKC,EAAQ,MAA+BC,QAAA,I,mBAf5FjH,EAAA,KAsBoCf,EAAAA,EAAAA,IAGQuE,EAAAA,EAAA,CAHDzC,MAAM,UAAWO,QAAK5B,EAAA,KAAAA,EAAA,GAAAC,GAAE4B,EAAAqF,kBAAkBhF,EAAAiF,OAAO,sB,CAtB5F9H,SAAAC,EAAAA,EAAAA,KAsBiH,IAEzE,EAxBxCe,EAAAA,EAAAA,IAsBiH,sBAEzEd,EAAAA,EAAAA,IAAgE6H,EAAAA,EAAA,CAAxDC,IAAKC,EAAQ,MAAiCC,QAAA,I,mBAxB9FjH,EAAA,OAAAA,EAAA,KAwCgCf,EAAAA,EAAAA,IAOQ2D,EAAAA,EAAA,MA/CxC7D,SAAAC,EAAAA,EAAAA,KAyCoC,IAGQ,EAHRC,EAAAA,EAAAA,IAGQuE,EAAAA,EAAA,CAHDzC,MAAM,UAAWO,QAAK5B,EAAA,KAAAA,EAAA,GAAAC,GAAE4B,EAAAqF,kBAAkBhF,EAAAiF,OAAO,qB,CAzC5F9H,SAAAC,EAAAA,EAAAA,KAyCgH,IAExE,EA3CxCe,EAAAA,EAAAA,IAyCgH,qBAExEd,EAAAA,EAAAA,IAA+D6H,EAAAA,EAAA,CAAvDC,IAAKC,EAAQ,MAAgCC,QAAA,I,mBA3C7FjH,EAAA,KA8CoCf,EAAAA,EAAAA,IAAeuE,EAAAA,MA9CnDxD,EAAA,OAAAA,EAAA,OAAAA,EAAA,OAAAA,EAAA,KAoDoBf,EAAAA,EAAAA,IAoBoBwH,EAAAA,EAAA,MAxExC1H,SAAAC,EAAAA,EAAAA,KAqDwB,IAE0B,EAF1BC,EAAAA,EAAAA,IAE0ByH,EAAAA,EAAA,MAvDlD3H,SAAAC,EAAAA,EAAAA,KAqDiD,IAEzB,EAvDxBe,EAAAA,EAAAA,IAqDiD,wBArDjDC,EAAA,KAyDwBf,EAAAA,EAAAA,IAcyB0H,EAAAA,EAAA,MAvEjD5H,SAAAC,EAAAA,EAAAA,KA0D4B,IAYc,EAZdC,EAAAA,EAAAA,IAYc0D,EAAAA,EAAA,CAZD5B,MAAM,aAAW,CA1D1DhC,SAAAC,EAAAA,EAAAA,KA2DgC,IAUQ,EAVRC,EAAAA,EAAAA,IAUQ2D,EAAAA,EAAA,MArExC7D,SAAAC,EAAAA,EAAAA,KA4DoC,IAGQ,EAHRC,EAAAA,EAAAA,IAGQuE,EAAAA,EAAA,CAHDzC,MAAM,UAAWO,QAAK5B,EAAA,KAAAA,EAAA,GAAAC,GAAE4B,EAAA2F,cAActF,EAAAiF,OAAO,e,CA5DxF9H,SAAAC,EAAAA,EAAAA,KA4DsG,IAE9D,EA9DxCe,EAAAA,EAAAA,IA4DsG,eAE9Dd,EAAAA,EAAAA,IAA0D6H,EAAAA,EAAA,CAAlDC,IAAKC,EAAQ,MAA2BC,QAAA,I,mBA9DxFjH,EAAA,KAiEoCf,EAAAA,EAAAA,IAGQuE,EAAAA,EAAA,CAHDzC,MAAM,UAAWO,QAAK5B,EAAA,KAAAA,EAAA,GAAAC,GAAE4B,EAAA2F,cAActF,EAAAiF,OAAO,sB,CAjExF9H,SAAAC,EAAAA,EAAAA,KAiE6G,IAErE,EAnExCe,EAAAA,EAAAA,IAiE6G,sBAErEd,EAAAA,EAAAA,IAAiE6H,EAAAA,EAAA,CAAzDC,IAAKC,EAAQ,MAAkCC,QAAA,I,mBAnE/FjH,EAAA,OAAAA,EAAA,OAAAA,EAAA,OAAAA,EAAA,OAAAA,EAAA,KA0EoBf,EAAAA,EAAAA,IAuEoBwH,EAAAA,EAAA,MAjJxC1H,SAAAC,EAAAA,EAAAA,KA2EwB,IAE0B,EAF1BC,EAAAA,EAAAA,IAE0ByH,EAAAA,EAAA,MA7ElD3H,SAAAC,EAAAA,EAAAA,KA2EiD,IAEzB,EA7ExBe,EAAAA,EAAAA,IA2EiD,0BA3EjDC,EAAA,KA8EwBf,EAAAA,EAAAA,IAkEyB0H,EAAAA,EAAA,MAhJjD5H,SAAAC,EAAAA,EAAAA,KA+E4B,IAgEc,EAhEdC,EAAAA,EAAAA,IAgEc0D,EAAAA,EAAA,CAhED5B,MAAM,aAAW,CA/E1DhC,SAAAC,EAAAA,EAAAA,KAgFgC,IAEQ,EAFRC,EAAAA,EAAAA,IAEQ2D,EAAAA,EAAA,MAlFxC7D,SAAAC,EAAAA,EAAAA,KAiFoC,IAA2F,WAA3F0D,EAAAA,EAAAA,IAA2F,SAApFyE,KAAK,SAASb,GAAG,WAjF5D,sBAAA5G,EAAA,KAAAA,EAAA,GAAAC,GAiF+EiC,EAAAwF,qBAAoBzH,GAAE2B,QAAK5B,EAAA,KAAAA,EAAA,GAAAC,GAAE4B,EAAA8F,mB,iBAA7BzF,EAAAwF,2BAjF/EpH,EAAA,KAoFgCf,EAAAA,EAAAA,IAWQ2D,EAAAA,EAAA,MA/FxC7D,SAAAC,EAAAA,EAAAA,KAqFoC,IAAiC,CAAjC+D,GACA9D,EAAAA,EAAAA,IAGQuE,EAAAA,EAAA,CAHDzC,MAAM,UAAWO,QAAK5B,EAAA,KAAAA,EAAA,GAAAC,GAAE4B,EAAA+F,mBAAmB1F,EAAAiF,OAAO,wB,CAtF7F9H,SAAAC,EAAAA,EAAAA,KAsFoH,IAE5E,EAxFxCe,EAAAA,EAAAA,IAsFoH,wBAE5Ed,EAAAA,EAAAA,IAAkE6H,EAAAA,EAAA,CAA1DC,IAAKC,EAAQ,MAAmCC,QAAA,I,mBAxFhGjH,EAAA,KA2FoCf,EAAAA,EAAAA,IAGQuE,EAAAA,EAAA,CAHDzC,MAAM,UAAWO,QAAK5B,EAAA,KAAAA,EAAA,GAAAC,GAAE4B,EAAA+F,mBAAmB1F,EAAAiF,OAAO,kB,CA3F7F9H,SAAAC,EAAAA,EAAAA,KA2F8G,IAEtE,EA7FxCe,EAAAA,EAAAA,IA2F8G,kBAEtEd,EAAAA,EAAAA,IAA4D6H,EAAAA,EAAA,CAApDC,IAAKC,EAAQ,MAA6BC,QAAA,I,mBA7F1FjH,EAAA,OAAAA,EAAA,KAiGgCf,EAAAA,EAAAA,IAWQ2D,EAAAA,EAAA,MA5GxC7D,SAAAC,EAAAA,EAAAA,KAkGoC,IAAiC,CAAjCuI,GACAtI,EAAAA,EAAAA,IAGQuE,EAAAA,EAAA,CAHDzC,MAAM,UAAWO,QAAK5B,EAAA,KAAAA,EAAA,GAAAC,GAAE4B,EAAA+F,mBAAmB1F,EAAAiF,OAAO,gB,CAnG7F9H,SAAAC,EAAAA,EAAAA,KAmG4G,IAEpE,EArGxCe,EAAAA,EAAAA,IAmG4G,gBAEpEd,EAAAA,EAAAA,IAA0D6H,EAAAA,EAAA,CAAlDC,IAAKC,EAAQ,MAA2BC,QAAA,I,mBArGxFjH,EAAA,KAwGoCf,EAAAA,EAAAA,IAGQuE,EAAAA,EAAA,CAHDzC,MAAM,UAAWO,QAAK5B,EAAA,MAAAA,EAAA,IAAAC,GAAE4B,EAAA+F,mBAAmB1F,EAAAiF,OAAO,gB,CAxG7F9H,SAAAC,EAAAA,EAAAA,KAwG4G,IAEpE,EA1GxCe,EAAAA,EAAAA,IAwG4G,gBAEpEd,EAAAA,EAAAA,IAA0D6H,EAAAA,EAAA,CAAlDC,IAAKC,EAAQ,KAA2BC,QAAA,I,mBA1GxFjH,EAAA,OAAAA,EAAA,KA8GgCf,EAAAA,EAAAA,IAUQ2D,EAAAA,EAAA,MAxHxC7D,SAAAC,EAAAA,EAAAA,KA+GoC,IAAiC,CAAjCwI,GACAvI,EAAAA,EAAAA,IAGQuE,EAAAA,EAAA,CAHDzC,MAAM,UAAWO,QAAK5B,EAAA,MAAAA,EAAA,IAAAC,GAAE4B,EAAA+F,mBAAmB1F,EAAAiF,OAAO,e,CAhH7F9H,SAAAC,EAAAA,EAAAA,KAgH2G,IAEnE,EAlHxCe,EAAAA,EAAAA,IAgH2G,eAEnEd,EAAAA,EAAAA,IAA0D6H,EAAAA,EAAA,CAAlDC,IAAKC,EAAQ,MAA2BC,QAAA,I,mBAlHxFjH,EAAA,KAoHoCf,EAAAA,EAAAA,IAGQuE,EAAAA,EAAA,CAHDzC,MAAM,UAAWO,QAAK5B,EAAA,MAAAA,EAAA,IAAAC,GAAE4B,EAAA+F,mBAAmB1F,EAAAiF,OAAO,W,CApH7F9H,SAAAC,EAAAA,EAAAA,KAoHuG,IAE/D,EAtHxCe,EAAAA,EAAAA,IAoHuG,WAE/Dd,EAAAA,EAAAA,IAAsD6H,EAAAA,EAAA,CAA9CC,IAAKC,EAAQ,KAAuBC,QAAA,I,mBAtHpFjH,EAAA,OAAAA,EAAA,KA0HgCf,EAAAA,EAAAA,IAWQ2D,EAAAA,EAAA,MArIxC7D,SAAAC,EAAAA,EAAAA,KA2HoC,IAAiC,CAAjCyI,GACAxI,EAAAA,EAAAA,IAGQuE,EAAAA,EAAA,CAHDzC,MAAM,UAAWO,QAAK5B,EAAA,MAAAA,EAAA,IAAAC,GAAE4B,EAAA+F,mBAAmB1F,EAAAiF,OAAO,kB,CA5H7F9H,SAAAC,EAAAA,EAAAA,KA4H8G,IAEtE,EA9HxCe,EAAAA,EAAAA,IA4H8G,8BAEtEd,EAAAA,EAAAA,IAA4D6H,EAAAA,EAAA,CAApDC,IAAKC,EAAQ,MAA6BC,QAAA,I,mBA9H1FjH,EAAA,KAiIoCf,EAAAA,EAAAA,IAGQuE,EAAAA,EAAA,CAHDzC,MAAM,UAAWO,QAAK5B,EAAA,MAAAA,EAAA,IAAAC,GAAE4B,EAAA+F,mBAAmB1F,EAAAiF,OAAO,mB,CAjI7F9H,SAAAC,EAAAA,EAAAA,KAiI+G,IAEvE,EAnIxCe,EAAAA,EAAAA,IAiI+G,4BAEvEd,EAAAA,EAAAA,IAA6D6H,EAAAA,EAAA,CAArDC,IAAKC,EAAQ,MAA8BC,QAAA,I,mBAnI3FjH,EAAA,OAAAA,EAAA,KAuIgCf,EAAAA,EAAAA,IAMQ2D,EAAAA,EAAA,MA7IxC7D,SAAAC,EAAAA,EAAAA,KAwIoC,IAAiC,CAAjC0I,GACAzI,EAAAA,EAAAA,IAGQuE,EAAAA,EAAA,CAHDzC,MAAM,UAAWO,QAAK5B,EAAA,MAAAA,EAAA,IAAAC,GAAE4B,EAAA+F,mBAAmB1F,EAAAiF,OAAO,Y,CAzI7F9H,SAAAC,EAAAA,EAAAA,KAyIwG,IAEhE,EA3IxCe,EAAAA,EAAAA,IAyIwG,YAEhEd,EAAAA,EAAAA,IAAmE6H,EAAAA,EAAA,CAA3DC,IAAKC,EAAQ,MAAwB/F,MAAM,MAAMgG,QAAA,I,mBA3IjGjH,EAAA,OAAAA,EAAA,OAAAA,EAAA,OAAAA,EAAA,OAAAA,EAAA,KAkJoBf,EAAAA,EAAAA,IA8DoBwH,EAAAA,EAAA,MAhNxC1H,SAAAC,EAAAA,EAAAA,KAmJwB,IAE0B,EAF1BC,EAAAA,EAAAA,IAE0ByH,EAAAA,EAAA,MArJlD3H,SAAAC,EAAAA,EAAAA,KAmJiD,IAEzB,EArJxBe,EAAAA,EAAAA,IAmJiD,wBAnJjDC,EAAA,KAuJwBf,EAAAA,EAAAA,IAwDyB0H,EAAAA,EAAA,MA/MjD5H,SAAAC,EAAAA,EAAAA,KAwJ4B,IAsDc,EAtDdC,EAAAA,EAAAA,IAsDc0D,EAAAA,EAAA,CAtDD5B,MAAM,aAAW,CAxJ1DhC,SAAAC,EAAAA,EAAAA,KAyJgC,IAQQ,EARRC,EAAAA,EAAAA,IAQQ2D,EAAAA,EAAA,MAjKxC7D,SAAAC,EAAAA,EAAAA,KA0JoC,IAAiC,CAAjC2I,GACA1I,EAAAA,EAAAA,IAGQuE,EAAAA,EAAA,CAHDzC,MAAM,UAAWO,QAAK5B,EAAA,MAAAA,EAAA,IAAAC,GAAE4B,EAAAqG,iBAAiBhG,EAAAiF,OAAO,qB,CA3J3F9H,SAAAC,EAAAA,EAAAA,KA2J+G,IAEvE,EA7JxCe,EAAAA,EAAAA,IA2J+G,eAEvEd,EAAAA,EAAAA,IAA0D6H,EAAAA,EAAA,CAAlDC,IAAKC,EAAQ,MAA2BC,QAAA,I,mBA7JxFjH,EAAA,KAgKoCf,EAAAA,EAAAA,IAAeuE,EAAAA,MAhKnDxD,EAAA,KAmKgCf,EAAAA,EAAAA,IAWQ2D,EAAAA,EAAA,MA9KxC7D,SAAAC,EAAAA,EAAAA,KAoKoC,IAAiC,CAAjC6I,GACA5I,EAAAA,EAAAA,IAGQuE,EAAAA,EAAA,CAHDzC,MAAM,UAAWO,QAAK5B,EAAA,MAAAA,EAAA,IAAAC,GAAE4B,EAAAqG,iBAAiBhG,EAAAiF,OAAO,iB,CArK3F9H,SAAAC,EAAAA,EAAAA,KAqK2G,IAEnE,EAvKxCe,EAAAA,EAAAA,IAqK2G,WAEnEd,EAAAA,EAAAA,IAA6D6H,EAAAA,EAAA,CAArDC,IAAKC,EAAQ,MAA8BC,QAAA,I,mBAvK3FjH,EAAA,KA0KoCf,EAAAA,EAAAA,IAGQuE,EAAAA,EAAA,CAHDzC,MAAM,UAAWO,QAAK5B,EAAA,MAAAA,EAAA,IAAAC,GAAE4B,EAAAqG,iBAAiBhG,EAAAiF,OAAO,iB,CA1K3F9H,SAAAC,EAAAA,EAAAA,KA0K2G,IAEnE,EA5KxCe,EAAAA,EAAAA,IA0K2G,WAEnEd,EAAAA,EAAAA,IAA6D6H,EAAAA,EAAA,CAArDC,IAAKC,EAAQ,KAA8BC,QAAA,I,mBA5K3FjH,EAAA,OAAAA,EAAA,KAgLgCf,EAAAA,EAAAA,IAOQ2D,EAAAA,EAAA,MAvLxC7D,SAAAC,EAAAA,EAAAA,KAiLoC,IAAiC,CAAjC8I,GACA7I,EAAAA,EAAAA,IAGQuE,EAAAA,EAAA,CAHDzC,MAAM,UAAWO,QAAK5B,EAAA,MAAAA,EAAA,IAAAC,GAAE4B,EAAAqG,iBAAiBhG,EAAAiF,OAAO,kB,CAlL3F9H,SAAAC,EAAAA,EAAAA,KAkL4G,IAEpE,EApLxCe,EAAAA,EAAAA,IAkL4G,YAEpEd,EAAAA,EAAAA,IAA+D6H,EAAAA,EAAA,CAAvDC,IAAKC,EAAQ,MAAgCC,QAAA,I,mBApL7FjH,EAAA,KAsLoCf,EAAAA,EAAAA,IAAeuE,EAAAA,MAtLnDxD,EAAA,KAyLgCf,EAAAA,EAAAA,IAoBQ2D,EAAAA,EAAA,MA7MxC7D,SAAAC,EAAAA,EAAAA,KA0LoC,IAAiC,CAAjC+I,IACA9I,EAAAA,EAAAA,IAYQuE,EAAAA,EAAA,CAZDzB,MAAA,eAAmB,CA3L9DhD,SAAAC,EAAAA,EAAAA,KA4LwC,IAIQ,EAJRC,EAAAA,EAAAA,IAIQuE,EAAAA,EAAA,CAJDzC,MAAM,UACRO,QAAK5B,EAAA,MAAAA,EAAA,IAAAC,GAAE4B,EAAAqG,iBAAiBhG,EAAAiF,OAAO,uB,CA7L5E9H,SAAAC,EAAAA,EAAAA,KA6LkG,IAEtD,EA/L5Ce,EAAAA,EAAAA,IA6LkG,iBAEtDd,EAAAA,EAAAA,IAAkE6H,EAAAA,EAAA,CAA1DC,IAAKC,EAAQ,MAAmCC,QAAA,I,mBA/LpGjH,EAAA,KAkMwCf,EAAAA,EAAAA,IAGQuE,EAAAA,EAAA,CAHDzC,MAAM,UAAWO,QAAK5B,EAAA,MAAAA,EAAA,IAAAC,GAAE4B,EAAAqG,iBAAiBhG,EAAAiF,OAAO,oB,CAlM/F9H,SAAAC,EAAAA,EAAAA,KAkMkH,IAEtE,EApM5Ce,EAAAA,EAAAA,IAkMkH,cAEtEd,EAAAA,EAAAA,IAA+D6H,EAAAA,EAAA,CAAvDC,IAAKC,EAAQ,MAAgCC,QAAA,I,mBApMjGjH,EAAA,OAAAA,EAAA,KAyMoCf,EAAAA,EAAAA,IAGQuE,EAAAA,EAAA,CAHDzC,MAAM,UAAWO,QAAK5B,EAAA,MAAAA,EAAA,IAAAC,GAAE4B,EAAAqG,iBAAiBhG,EAAAiF,OAAO,oB,CAzM3F9H,SAAAC,EAAAA,EAAAA,KAyM8G,IAEtE,EA3MxCe,EAAAA,EAAAA,IAyM8G,cAEtEd,EAAAA,EAAAA,IAA+D6H,EAAAA,EAAA,CAAvDC,IAAKC,EAAQ,MAAgCC,QAAA,I,mBA3M7FjH,EAAA,OAAAA,EAAA,OAAAA,EAAA,OAAAA,EAAA,OAAAA,EAAA,KAiNoBf,EAAAA,EAAAA,IA2CoBwH,EAAAA,EAAA,MA5PxC1H,SAAAC,EAAAA,EAAAA,KAkNwB,IAE0B,EAF1BC,EAAAA,EAAAA,IAE0ByH,EAAAA,EAAA,MApNlD3H,SAAAC,EAAAA,EAAAA,KAkNiD,IAEzB,EApNxBe,EAAAA,EAAAA,IAkNiD,6BAlNjDC,EAAA,KAsNwBf,EAAAA,EAAAA,IAqCyB0H,EAAAA,EAAA,MA3PjD5H,SAAAC,EAAAA,EAAAA,KAuN4B,IAmCc,EAnCdC,EAAAA,EAAAA,IAmCc0D,EAAAA,EAAA,CAnCD5B,MAAM,aAAW,CAvN1DhC,SAAAC,EAAAA,EAAAA,KAwNgC,IAUQ,EAVRC,EAAAA,EAAAA,IAUQ2D,EAAAA,EAAA,MAlOxC7D,SAAAC,EAAAA,EAAAA,KAyNoC,IAGQ,EAHRC,EAAAA,EAAAA,IAGQuE,EAAAA,EAAA,CAHDzC,MAAM,UAAWO,QAAK5B,EAAA,MAAAA,EAAA,IAAAC,GAAE4B,EAAAyG,aAAapG,EAAAiF,OAAO,Y,CAzNvF9H,SAAAC,EAAAA,EAAAA,KAyNkG,IAE1D,EA3NxCe,EAAAA,EAAAA,IAyNkG,YAE1Dd,EAAAA,EAAAA,IAAgE6H,EAAAA,EAAA,CAAxDC,IAAKC,EAAQ,KAAiCC,QAAA,I,mBA3N9FjH,EAAA,KA8NoCf,EAAAA,EAAAA,IAGQuE,EAAAA,EAAA,CAHDzC,MAAM,UAAWO,QAAK5B,EAAA,MAAAA,EAAA,IAAAC,GAAE4B,EAAAyG,aAAapG,EAAAiF,OAAO,Y,CA9NvF9H,SAAAC,EAAAA,EAAAA,KA8NkG,IAE1D,EAhOxCe,EAAAA,EAAAA,IA8NkG,YAE1Dd,EAAAA,EAAAA,IAAgE6H,EAAAA,EAAA,CAAxDC,IAAKC,EAAQ,MAAiCC,QAAA,I,mBAhO9FjH,EAAA,OAAAA,EAAA,KAoOgCf,EAAAA,EAAAA,IAUQ2D,EAAAA,EAAA,MA9OxC7D,SAAAC,EAAAA,EAAAA,KAqOoC,IAGQ,EAHRC,EAAAA,EAAAA,IAGQuE,EAAAA,EAAA,CAHDzC,MAAM,UAAWO,QAAK5B,EAAA,MAAAA,EAAA,IAAAC,GAAE4B,EAAAyG,aAAapG,EAAAiF,OAAO,c,CArOvF9H,SAAAC,EAAAA,EAAAA,KAqOoG,IAE5D,EAvOxCe,EAAAA,EAAAA,IAqOoG,cAE5Dd,EAAAA,EAAAA,IAAiE6H,EAAAA,EAAA,CAAzDC,IAAKC,EAAQ,MAAkCC,QAAA,I,mBAvO/FjH,EAAA,KA0OoCf,EAAAA,EAAAA,IAGQuE,EAAAA,EAAA,CAHDzC,MAAM,UAAWO,QAAK5B,EAAA,MAAAA,EAAA,IAAAC,GAAE4B,EAAAyG,aAAapG,EAAAiF,OAAO,wB,CA1OvF9H,SAAAC,EAAAA,EAAAA,KA0O8G,IAEtE,EA5OxCe,EAAAA,EAAAA,IA0O8G,wBAEtEd,EAAAA,EAAAA,IAA6D6H,EAAAA,EAAA,CAArDC,IAAKC,EAAQ,KAA8BC,QAAA,I,mBA5O3FjH,EAAA,OAAAA,EAAA,KAgPgCf,EAAAA,EAAAA,IASQ2D,EAAAA,EAAA,MAzPxC7D,SAAAC,EAAAA,EAAAA,KAiPoC,IAGQ,EAHRC,EAAAA,EAAAA,IAGQuE,EAAAA,EAAA,CAHDzC,MAAM,UAAWO,QAAK5B,EAAA,MAAAA,EAAA,IAAAC,GAAE4B,EAAAyG,aAAapG,EAAAiF,OAAO,wB,CAjPvF9H,SAAAC,EAAAA,EAAAA,KAiP8G,IAEtE,EAnPxCe,EAAAA,EAAAA,IAiP8G,wBAEtEd,EAAAA,EAAAA,IAAkE6H,EAAAA,EAAA,CAA1DC,IAAKC,EAAQ,MAAmCC,QAAA,I,mBAnPhGjH,EAAA,KAqPoCf,EAAAA,EAAAA,IAGQuE,EAAAA,EAAA,CAHDzC,MAAM,UAAWO,QAAK5B,EAAA,MAAAA,EAAA,IAAAC,GAAE4B,EAAAyG,aAAapG,EAAAiF,OAAO,kB,CArPvF9H,SAAAC,EAAAA,EAAAA,KAqPwG,IAEhE,EAvPxCe,EAAAA,EAAAA,IAqPwG,cAEhEd,EAAAA,EAAAA,IAAuE6H,EAAAA,EAAA,CAA/DC,IAAKC,EAAQ,MAAwCC,QAAA,I,mBAvPrGjH,EAAA,OAAAA,EAAA,OAAAA,EAAA,OAAAA,EAAA,OAAAA,EAAA,OAAAA,EAAA,OAAAA,EAAA,G,aAAAA,EAAA,G,MAwQQf,EAAAA,EAAAA,IAcc0D,EAAAA,EAAA,CAdDZ,MAAA,kEAAoEsE,IAAK,W,CAxQ9FtH,SAAAC,EAAAA,EAAAA,KAyQY,IAQQ,EARRC,EAAAA,EAAAA,IAQQ2D,EAAAA,EAAA,MAjRpB7D,SAAAC,EAAAA,EAAAA,KA0QgB,IAEQ,EAFRC,EAAAA,EAAAA,IAEQuE,EAAAA,EAAA,CAFD6C,IAAI,aAAW,CA1QtCtH,SAAAC,EAAAA,EAAAA,KA2QoB,IAAyE,cAAzEiB,EAAAA,EAAAA,IAAyE,OAAnEc,OA3Q1BkH,EAAAA,EAAAA,IA2QiC1B,EAAA1G,MAAQ,WAAWkC,MAAA,8B,YA3QpD/B,EAAA,G,MA6QgBf,EAAAA,EAAAA,IAAeuE,EAAAA,IACfvE,EAAAA,EAAAA,IAAeuE,EAAAA,MA9Q/BxD,EAAA,M,WAkRYC,EAAAA,EAAAA,IAAsE,OAAhEc,OAlRlBkH,EAAAA,EAAAA,IAkRyB1B,EAAA1G,MAAQ,QAAQkC,MAAA,8B,sBAE7B9B,EAAAA,EAAAA,IAC2F,OADrFqG,GAAIC,EAAA1G,MAAQ,gBACdkC,MAAA,4E,OArRhBmG,QAAAlI,EAAA,OAyRIf,EAAAA,EAAAA,IAMWkJ,EAAAA,EAAA,CA/Rf5I,WAyRuBqC,EAAAwG,YAzRvB,sBAAA1I,EAAA,MAAAA,EAAA,IAAAC,GAyRuBiC,EAAAwG,YAAWzI,GAAEsB,MAAM,Q,CAzR1ClC,SAAAC,EAAAA,EAAAA,KA0RQ,IAIS,EAJTC,EAAAA,EAAAA,IAISmH,EAAAA,EAAA,CAJD,YAAU,MAAM,eAAa,2BAA4BiC,MAAOzG,EAAA0G,WAAaC,KAAM3G,EAAA4G,c,CACtEC,SAAOzJ,EAAAA,EAAAA,KACpB,IAAsE,EAAtEC,EAAAA,EAAAA,IAAsE4B,EAAAA,EAAA,CAA/DE,MAAM,UAAUwH,KAAK,KAAMjH,QAAK5B,EAAA,MAAAA,EAAA,IAAAC,GAAEiC,EAAAwG,aAAc,QA5RvEpI,EAAA,G,uBAAAA,EAAA,G,mCAqSA,IACImE,KAAM,cAENvD,MAAO,CACHwB,QAAS,CACL+E,KAAM1D,OACNiF,UAAU,GAGdrG,SAAU,CACN8E,KAAM1D,OACNiF,UAAU,GAGd7I,MAAO,CACHsH,KAAMwB,OACND,UAAU,GAGdlG,SAAU,CACN2E,KAAMwB,OACND,UAAU,GAGdpG,YAAa,CACT6E,KAAMyB,QACNF,UAAU,IAIlB/E,KAAMA,KAAA,CACFkF,mBAAoB,EACpBC,eAAgB,EAChBC,mBAAoB,EACpBC,qBAAsB,EACtBC,eAAgB,EAEhBC,gBAAiB,EACjBC,eAAgB,EAEhBC,IAAK,KACLC,OAAQ,KAERC,SAAU,IACVC,UAAW,IAEXC,YAAa,IAEbC,aAAc,UAEdnB,WAAY,GACZE,aAAc,GACdJ,aAAa,EAEbsB,kBAAkB,EAClBtC,qBAAsB,uBACtBuC,aAAc,EAEdC,gBAAiBA,OACjBC,eAAgBA,OAChBC,cAAeA,OAEfC,eAAgBA,OAEhBC,WAAY,GAEZnD,OAAQ,CACJ,gBAAiB,EACjB,kBAAmB,EACnB,kBAAmB,EACnB,aAAc,EACd,iBAAkB,EAGlB,SAAY,EACZ,gBAAmB,EAEnB,MAAS,EACT,MAAS,EACT,UAAW,EACX,oBAAqB,EACrB,oBAAqB,EACrB,cAAe,EAEf,iBAAkB,EAClB,aAAc,EACd,aAAc,EACd,cAAe,EACf,mBAAoB,EACpB,gBAAiB,EACjB,gBAAiB,EAEjB,oBAAqB,EACrB,cAAe,EACf,YAAa,EACb,MAAS,EACT,cAAe,EACf,eAAgB,EAChB,KAAQ,EACR,SAAY,EACZ,YAAa,KAKrBoD,OAAAA,GACIpE,QAAQE,IAAI1B,KAAKxE,MAAO,sBAAuBwE,KAAK/B,aACpDuD,QAAQE,IAAI1B,KAAKjC,SAEjB,IAAI8G,EAAkB,EAClB7E,KAAKjC,SAAWiC,KAAKjC,QAAQ8H,UAAY7F,KAAKhC,WAC9CgC,KAAKjC,QAAQ8H,SAASC,SAAQC,IAC1B,MAAMC,EAAgBhG,KAAKiG,cAAcF,GACzClB,GAAmBmB,EACnBhG,KAAK8E,eAAiB9E,KAAK8E,eAAiBkB,EAAgBA,EAAgBhG,KAAK8E,cAAc,IAGnGtD,QAAQE,IAAI1B,KAAK8E,iBAErB9E,KAAK6E,gBAAkBA,EAEvB,MAAMqB,EAASlG,KAAKmG,MAAMC,aAAaC,IACjCC,EAActG,KAAKmG,MAAMI,UAAUF,IAEzCrG,KAAKwG,WAAU,KACX,MAAM7J,EAASuJ,EAAOO,aAEhBC,EAAcC,SAASC,eAAe5G,KAAKxE,MAAQ,gBACzDkL,EAAYhJ,MAAMmJ,UAAa,IAAOlK,EAAU,KAEhDqD,KAAKmF,YAAc,IAAOmB,EAAYQ,YAEtC9G,KAAK+G,SAAS,GAEtB,EAEAhH,QAAS,CACLgH,OAAAA,GAEI/G,KAAK+E,IAAMjE,EAAAA,IAAU,IAAMd,KAAKxE,MAAQ,QACxCwE,KAAKgF,OAASlE,EAAAA,IAAU,IAAMd,KAAKxE,MAAQ,WAG3CwE,KAAKiF,SAAWjF,KAAK+E,IAAIiC,OAAOC,wBAAwBrK,MACxDoD,KAAKkF,UAAY,GAAMlF,KAAK+E,IAAIiC,OAAOC,wBAAwBtK,OAE/DqD,KAAKuF,gBAAkB,KACnBvF,KAAK+E,IAAImC,UAAU,QAAQC,KAAK,OAAQnH,KAAKoF,aAAa,EAG9DpF,KAAKwF,eAAiB,KAClBxF,KAAK+E,IAAImC,UAAU,QACd5H,KAAKU,KAAKjC,QAAQ8H,UAClBuB,QACAC,OAAO,QACPF,KAAK,IAAKnH,KAAKsH,SACfH,KAAK,SAAU,UAAU,EAIlCnH,KAAK6C,cAAc,GACnB7C,KAAKuH,SACT,EACAC,gBAAAA,CAAiBtD,EAAMuD,GACnB,IAAIC,EAAQxD,EAAKyD,MAAM,KACnBC,EAAQ,GACRC,EAAcH,EAAM,GAExB,IAAK,IAAII,EAAI,EAAGA,EAAIJ,EAAMtL,OAAQ0L,KACzBD,EAAc,IAAMH,EAAMI,IAAI1L,OAASqL,EACxCI,GAAe,IAAMH,EAAMI,IAE3BF,EAAMG,KAAKF,GACXA,EAAcH,EAAMI,IAK5B,OAFAF,EAAMG,KAAKF,GAEJD,CACX,EAGAL,OAAAA,GAEIvH,KAAK+E,IAAImC,UAAU,KAAKc,SACxBlH,EAAAA,IAAU,IAAMd,KAAKxE,MAAQ,iBAAiB0L,UAAU,KAAKc,SAE7DhI,KAAKwF,iBACLxF,KAAKuF,kBACLvF,KAAKyF,gBAELzF,KAAK2F,WAAWG,SAAQmC,IACpBA,GAAW,GAEnB,EAGAC,QAAAA,CAASC,GACL,OAAO,IAAI/H,SAAQ,CAACC,EAASC,KACzBQ,EAAAA,IAAQqH,GAAIpH,MAAKzB,IACbe,EAAQf,EAAK,IACdgC,OAAMC,IACLC,QAAQD,MAAM,8BAA+BA,GAC7CjB,EAAOiB,EAAM,GACf,GAEV,EAEA0E,aAAAA,CAAcmC,GAEV,OAAOA,GAAKA,EAAEC,YAAcD,EAAEC,WAAWC,MAAQtI,KAAKhC,SAASoK,EAAEC,WAAWC,MACtEtI,KAAKhC,SAASoK,EAAEC,WAAWC,OAAS,CAC9C,EAEAC,eAAAA,CAAgBvE,EAAOwE,GACnBxI,KAAKiE,WAAaD,EAClBhE,KAAKmE,aAAeqE,EACpBxI,KAAK+D,aAAc,CACvB,EAGAxB,iBAAAA,CAAkBO,GACdtB,QAAQE,IAAI,kBAAmBoB,GAE3BA,IAAS9C,KAAKwC,OAAO,kBACrBxC,KAAKwE,mBAAqB1B,EAC1B9C,KAAKwF,eAAiB,KAClBxF,KAAK+E,IAAImC,UAAU,QACd5H,KAAKU,KAAKjC,QAAQ8H,UAClBuB,QACAC,OAAO,QACPF,KAAK,IAAKnH,KAAKsH,SACfH,KAAK,SAAU,UAAU,GAI7BrE,IAAS9C,KAAKwC,OAAO,mBAC1BxC,KAAKwE,mBAAqB1B,EAGrBA,IAAS9C,KAAKwC,OAAO,oBAC1BxC,KAAKwE,mBAAqB1B,EAE1B9C,KAAKwF,eAAiB,KASlBxF,KAAKjC,QAAQ8H,SAASC,SAAQC,IAG1B,MAAM0C,EAAS3H,EAAAA,IAAaiF,IACrB2C,EAAMC,GAAU3I,KAAK4I,cAAcH,EAAO,KAC1CI,EAAOC,GAAO9I,KAAK4I,cAAcH,EAAO,IACzCM,EAAIF,EAAQH,EACZM,EAAIL,EAASG,EACbG,EAAOC,KAAKC,KAAKH,EAAI,IACrBI,EAAUF,KAAKC,KAAKJ,EAAI,IACxBM,EAAc,EAGdC,EAAS,GACf,IAAK,IAAIxB,EAAI,EAAGA,EAAImB,EAAMnB,IACtB,IAAK,IAAIyB,EAAI,EAAGA,EAAIH,EAASG,IAAK,CAC9B,MAAMC,EAAId,EAAOa,GAAKR,EAAIK,GACpBK,EAAIX,EAAMhB,GAAKkB,EAAIC,GACnBS,EAAQ1J,KAAK4I,cAAce,OAAO,CAACH,EAAGC,IACxC3I,EAAAA,IAAeiF,EAAS2D,IACxBJ,EAAOvB,KAAK,CAAEyB,EAAGA,EAAGC,EAAGA,EAAGpB,WAAYtC,EAAQsC,YAEtD,CAGJrI,KAAK+E,IAAIsC,OAAO,KACXF,KAAK,OAAQ,SACbA,KAAK,eAAgB,IACrBA,KAAK,SAAU,QACfA,KAAK,eAAgB,IACrBD,UAAU,UACV5H,KAAKgK,GACLM,KAAK,UACLzC,KAAK,MAAMiB,GAAKA,EAAEoB,IAClBrC,KAAK,MAAMiB,GAAKA,EAAEqB,IAClBtC,KAAK,IAAKkC,EAAY,GAC7B,GAIDvG,IAAS9C,KAAKwC,OAAO,cAC1BxC,KAAKwE,mBAAqB1B,EAErBA,IAAS9C,KAAKwC,OAAO,oBAC1BxC,KAAKwE,mBAAqB1B,EAI1B9C,KAAKwF,eAAiB,KAClBxF,KAAK+E,IAAImC,UAAU,QACd5H,KAAKU,KAAKjC,QAAQ8H,UAClBuB,QACAC,OAAO,QACPF,KAAK,IAAKnH,KAAKsH,SACfH,KAAK,SAAU,WAGpB,MAAM0C,EAAO7J,KAAK+E,IAAIsC,OAAO,QAC7BwC,EAAKxC,OAAO,YACPF,KAAK,KAAM,YACXE,OAAO,QACPyC,MAAM9J,KAAKjC,SACXoJ,KAAK,IAAKnH,KAAKsH,SAGpB,MAAMyC,EAAW,GAGXC,EAAYhK,KAAK+E,IAAIsC,OAAO,KAC7B4C,QAAQ,cAAc,GACtB9C,KAAK,YAAa,kBAGjB+C,EAAmBhB,KAAKC,KAAKnJ,KAAKiF,SAAW8E,GAC7CI,EAAqBjB,KAAKC,KAAKnJ,KAAKkF,UAAY6E,GAGtD,IAAK,IAAIjC,EAAI,EAAGA,EAAIoC,EAAkBpC,IAClCkC,EAAU3C,OAAO,QACZF,KAAK,KAAMW,EAAIiC,GACf5C,KAAK,KAAMW,EAAIiC,GACf5C,KAAK,KAAM,GACXA,KAAK,KAAMnH,KAAKkF,WAChBxH,MAAM,SAAU,SAChBA,MAAM,iBAAkB,IAIjC,IAAK,IAAIoK,EAAI,EAAGA,EAAIqC,EAAoBrC,IACpCkC,EAAU3C,OAAO,QACZF,KAAK,KAAMW,EAAIiC,GACf5C,KAAK,KAAMW,EAAIiC,GACf5C,KAAK,KAAM,GACXA,KAAK,KAAMnH,KAAKiF,UAChBvH,MAAM,SAAU,SAChBA,MAAM,iBAAkB,GACjC,GAMRsC,KAAKuH,SACT,EAGA1E,aAAAA,CAAcC,GACVtB,QAAQE,IAAI,kBAAmBoB,GAE3BA,IAAS9C,KAAKwC,OAAO,aACrBxC,KAAKyE,eAAiB3B,EAEtB9C,KAAK4I,cAAgB9H,EAAAA,MAChBsJ,QAAQ,CAACpK,KAAKiF,SAAUjF,KAAKkF,WAAYlF,KAAKjC,UAG9C+E,IAAS9C,KAAKwC,OAAO,qBAC1BxC,KAAKyE,eAAiB3B,EAEtB9C,KAAK4I,cAAgB9H,EAAAA,MAChBsJ,QAAQ,CAACpK,KAAKiF,SAAUjF,KAAKkF,WAAYlF,KAAKjC,UAGvDiC,KAAKsH,QAAUxG,EAAAA,MAAauJ,WAAWrK,KAAK4I,eAC5C5I,KAAKuH,SACT,EAGA5D,YAAAA,CAAab,GAiBT,GAhBAtB,QAAQE,IAAI,wBAAyBoB,GAWrC9C,KAAK+E,IAAImC,UAAU,QAAQoD,GAAG,QAAS,MAEvCtK,KAAK+E,IAAIuF,GAAG,QAAS,MAGjBxH,IAAS9C,KAAKwC,OAAO,SAAU,CAC/BxC,KAAK4E,cAAgB9B,EAErB,MAAMyH,EAAgBxF,IAClB,MAAMkD,EAAYA,KACdzG,QAAQE,IAAIqD,GACZjE,EAAAA,IAAUiE,GACLkF,QAAQ,eAAe,GACvB9C,KAAK,OAAQ,UAAU,EAGhCc,EAAUlD,GACV/E,KAAK2F,WAAWoC,KAAKE,EAAU,EAGnCjI,KAAK+E,IAAImC,UAAU,QACdoD,GAAG,SAAS,WAAcC,EAAavK,KAAM,GACtD,MAEK,GAAI8C,IAAS9C,KAAKwC,OAAO,SAAU,CACpCxC,KAAK4E,cAAgB9B,EAErB,MAAMyH,EAAeA,CAACC,EAAOzF,KACzB,MAAOyE,EAAGC,GAAK3I,EAAAA,IAAW0J,EAAOzF,GAE3BkD,EAAYA,KAEdnH,EAAAA,IAAUiE,GAAKsC,OAAO,SACjB4C,QAAQ,oBAAoB,GAC5B9C,KAAK,aAAcxE,EAAQ,OAC3BwE,KAAK,IAAKqC,EAAI,IACdrC,KAAK,IAAKsC,EAAI,IACdtC,KAAK,QAAS,IACdA,KAAK,SAAU,GAAG,EAG3Bc,IACAjI,KAAK2F,WAAWoC,KAAKE,EAAU,EAInCjI,KAAK+E,IAAIuF,GAAG,SAAS,SAAUE,GAC3BD,EAAaC,EAAOxK,KACxB,GACJ,MAEK,GAAI8C,IAAS9C,KAAKwC,OAAO,WAAY,CACtCxC,KAAK4E,cAAgB9B,EAErB,MAAMyH,EAAeA,CAACC,EAAOzF,KACzB,MAAOyE,EAAGC,GAAK3I,EAAAA,IAAW0J,EAAOzF,GAE3BkD,EAAYA,KAEdnH,EAAAA,IAAUiE,GAAKsC,OAAO,SACjB4C,QAAQ,oBAAoB,GAC5B9C,KAAK,aAAcxE,EAAQ,OAC3BwE,KAAK,IAAKqC,EAAI,IACdrC,KAAK,IAAKsC,EAAI,IACdtC,KAAK,QAAS,IACdA,KAAK,SAAU,GAAG,EAG3Bc,IACAjI,KAAK2F,WAAWoC,KAAKE,EAAU,EAInCjI,KAAK+E,IAAIuF,GAAG,SAAS,SAAUE,GAC3BD,EAAaC,EAAOxK,KACxB,GACJ,MACK,GAAI8C,IAAS9C,KAAKwC,OAAO,qBAAsB,CAChDxC,KAAK4E,cAAgB9B,EAErB,MAAMyH,EAAeA,CAACC,EAAOzF,KAEzB,MAAOyE,EAAGC,GAAK3I,EAAAA,IAAW0J,EAAOzF,GAC3BgB,EAAUjF,EAAAA,IAAU0J,EAAM5J,QAAQkJ,QAGlC7B,EAAYA,KAKdjI,KAAK+E,IAAIsC,OAAO,QACXyC,MAAM/D,GACNoB,KAAK,QAAS,uBACdA,KAAK,IAAKnH,KAAKsH,SACfH,KAAK,OAAQrG,EAAAA,IAAO,GAAI,GAAI,IAAK,KACjCqG,KAAK,SAAU,qBACfA,KAAK,eAAgB,GAG1B,MAAM0C,EAAO7J,KAAK+E,IAAIsC,OAAO,QAEvBoD,EAASZ,EAAKxC,OAAO,UACtBF,KAAK,KAAM,eACXA,KAAK,SAAU,QAEpBsD,EAAOpD,OAAO,kBACTF,KAAK,KAAM,eACXA,KAAK,eAAgB,GACrBA,KAAK,SAAU,QAEpBsD,EAAOpD,OAAO,YACTF,KAAK,KAAM,QACXA,KAAK,KAAM,GACXA,KAAK,KAAM,GACXA,KAAK,SAAU,cAEpB,MAAMuD,EAAUD,EAAOpD,OAAO,WAC9BqD,EAAQrD,OAAO,eACVF,KAAK,KAAM,cAChBuD,EAAQrD,OAAO,eACVF,KAAK,KAAM,gBAAgB,EAGpCc,IACAjI,KAAK2F,WAAWoC,KAAKE,EAAU,EAInCjI,KAAK+E,IAAImC,UAAU,QAAQoD,GAAG,SAAS,SAAUE,GAC7CD,EAAaC,EAAOxK,KACxB,GACJ,MACK,GAAI8C,IAAS9C,KAAKwC,OAAO,qBAC1BxC,KAAK4E,cAAgB9B,EAGrB9C,KAAK+E,IAAIuF,GAAG,QAAS,MAGrBtK,KAAK+E,IAAIuF,GAAG,SAAUE,IAElBxK,KAAK+E,IAAImC,UAAU,uBAAuBc,SAC1ChI,KAAK+E,IAAImC,UAAU,qBAAqBc,SAExC,MAAOwB,EAAGC,GAAK3I,EAAAA,IAAW0J,EAAOxK,KAAK+E,IAAIiC,QAG1ChH,KAAK+E,IAAIsC,OAAO,UACX4C,QAAQ,gBAAgB,GACxB9C,KAAK,KAAMqC,GACXrC,KAAK,KAAMsC,GACXtC,KAAK,IAAK,IACVzJ,MAAM,OAAQ,QACdA,MAAM,SAAU,WAChBA,MAAM,eAAgB,GAG3B,MAAMiN,EAAe7J,EAAAA,IAAU,IAAMd,KAAKxE,MAAQ,iBAClDmP,EAAazD,UAAU,KAAKc,SAG5B,MAAM4C,EAAkBD,EAAatD,OAAO,OACvCF,KAAK,QAAS,QACdA,KAAK,SAAU,QACfA,KAAK,UAAY,GAAEqC,EAAI,MAAMC,EAAI,YAGhCI,EAAOe,EAAgBvD,OAAO,QAC9BwD,EAAWhB,EAAKxC,OAAO,YACxBF,KAAK,KAAM,eAChB0D,EAASxD,OAAO,UACXF,KAAK,KAAMqC,GACXrC,KAAK,KAAMsC,GACXtC,KAAK,IAAK,IAGfyD,EAAgBvD,OAAO,KAClBF,KAAK,YAAa,qBAClB2D,KAAK9K,KAAK+E,IAAI+F,QAGnBF,EAAgB1D,UAAU,WACrBC,KAAK,IAAK,MACVA,KAAK,IAAK,MACVzJ,MAAM,YAAa,aAGxB,MAAMqN,EAAK/K,KAAKiF,SAAS,GAAI+F,EAAK,IAAKC,EAAK,IAAKC,EAAI,GAC/C9C,EAAIc,KAAKiC,MAAMJ,EAAGvB,IAAIuB,EAAGvB,IAAIwB,EAAGvB,IAAIuB,EAAGvB,IACvC2B,EAAK5B,EAAI0B,EAAEhC,KAAKmC,IAAInC,KAAKoC,MAAMN,EAAGvB,IAAIsB,EAAGvB,IAAIN,KAAKqC,MAAML,EAAED,GAAI7C,IAC9DoD,EAAK/B,EAAIyB,EAAEhC,KAAKuC,IAAIvC,KAAKoC,MAAMN,EAAGvB,IAAIsB,EAAGvB,IAAIN,KAAKqC,MAAML,EAAED,GAAI7C,IAC9DsD,EAAKX,EAAKE,EAAG/B,KAAKmC,IAAInC,KAAKoC,MAAMN,EAAGvB,IAAIsB,EAAGvB,IAAIN,KAAKqC,MAAML,EAAED,GAAI7C,IAChEuD,EAAKX,EAAKC,EAAG/B,KAAKuC,IAAIvC,KAAKoC,MAAMN,EAAGvB,IAAIsB,EAAGvB,IAAIN,KAAKqC,MAAML,EAAED,GAAI7C,IAChEwD,EAAKpC,EAAI0B,EAAEhC,KAAKmC,IAAInC,KAAKoC,MAAMN,EAAGvB,IAAIsB,EAAGvB,IAAIN,KAAKqC,MAAML,EAAED,GAAI7C,IAC9DyD,EAAKpC,EAAIyB,EAAEhC,KAAKuC,IAAIvC,KAAKoC,MAAMN,EAAGvB,IAAIsB,EAAGvB,IAAIN,KAAKqC,MAAML,EAAED,GAAI7C,IAC9D0D,EAAKf,EAAKE,EAAG/B,KAAKmC,IAAInC,KAAKoC,MAAMN,EAAGvB,IAAIsB,EAAGvB,IAAIN,KAAKqC,MAAML,EAAED,GAAI7C,IAChE2D,EAAKf,EAAKC,EAAG/B,KAAKuC,IAAIvC,KAAKoC,MAAMN,EAAGvB,IAAIsB,EAAGvB,IAAIN,KAAKqC,MAAML,EAAED,GAAI7C,IACtEpI,KAAK+E,IAAIsC,OAAO,QACX4C,QAAQ,gBAAgB,GACxB9C,KAAK,KAAMiE,GACXjE,KAAK,KAAMqE,GACXrE,KAAK,KAAMuE,GACXvE,KAAK,KAAMwE,GACXxE,KAAK,SAAU,QACfA,KAAK,eAAgB,GAC1BnH,KAAK+E,IAAIsC,OAAO,QACX4C,QAAQ,gBAAgB,GACxB9C,KAAK,KAAMyE,GACXzE,KAAK,KAAM0E,GACX1E,KAAK,KAAM2E,GACX3E,KAAK,KAAM4E,GACX5E,KAAK,SAAU,QACfA,KAAK,eAAgB,EAAE,SAG/B,GAAIrE,IAAS9C,KAAKwC,OAAO,eAAgB,CAC1CxC,KAAK4E,cAAgB9B,EAErB,MAAMyH,EAAgBC,IAClB,MAAMzE,EAAUjF,EAAAA,IAAU0J,EAAM5J,QAAQkJ,QAGlC7B,EAAYA,KACdjI,KAAK+E,IAAIsC,OAAO,QACXyC,MAAM/D,GACNoB,KAAK,QAAS,yBACdA,KAAK,IAAKnH,KAAKsH,SACfH,KAAK,eAAgB,GACrBA,KAAK,SAAU,WACfzJ,MAAM,OAAQ,OAAO,EAG9BuK,IACAjI,KAAK2F,WAAWoC,KAAKE,EAAU,EAInCjI,KAAK+E,IAAImC,UAAU,QAAQoD,GAAG,SAAS,SAAUE,GAC7CD,EAAaC,EAAOxK,KACxB,GACJ,CAIJ,EAEAuD,gBAAAA,CAAiBT,GACbtB,QAAQE,IAAI,kBAAmBoB,GAE/B9C,KAAK+E,IAAImC,UAAU,sGAAsGc,SACzHhI,KAAK+E,IAAImC,UAAU,kBACdxJ,MAAM,OAAQ,MACduM,QAAQ,iBAAiB,GAE9B,MAAM+B,EAAW,IACXC,EAAY,GACZC,EAAa,GACfpJ,IAAS9C,KAAKwC,OAAO,mBACrBxC,KAAK0E,kBAAoB5B,EAEzB9C,KAAKyF,cAAgB,KACjBzF,KAAKjC,QAAQ8H,SAASC,SAAQC,IAC9B,MAAMoG,EAASnM,KAAKsH,QAAQ8E,SAASrG,GAC/BsG,EAAatG,EAAQsC,WAAWgE,WAEtC,GAAIA,IAA6B,GAAfA,EAAkB,CAChC,IAAIC,EAAY,CACX,YAAWvG,EAAQsC,WAAWC,OAC9B,SAAQ+D,EAAWE,QAIpBF,EAAWG,iBAAmBH,EAAWG,gBAAgBpQ,OAAS,GAClEkQ,EAAUvE,KAAM,WAAUsE,EAAWG,mBAErCH,EAAWI,iBAAmBJ,EAAWI,gBAAgBrQ,OAAS,GAClEkQ,EAAUvE,KAAM,WAAUsE,EAAWI,mBAEzC,MAAMhF,EAAe,GAGrB,IAAIiF,EAAiB,EAGrBJ,EAAUxG,SAAS6G,IACf,IAAIC,EAAW5M,KAAKwH,iBAAiBmF,EAAMlF,GAC3CmF,EAAS9G,SAAS+G,IACd7M,KAAK+E,IAAIsC,OAAO,QACXF,KAAK,QAAS,iBACdA,KAAK,IAAKgF,EAAO,IACjBhF,KAAK,IAAKgF,EAAO,GAAKO,GACtBvF,KAAK,cAAe,UACpBA,KAAK,OAAQ,SACbzJ,MAAM,YAAa,OACnBwG,KAAK2I,GAGVH,GAAkB,EAAE,GACtB,GAIV,IACE,GAOD5J,IAAS9C,KAAKwC,OAAO,eAC1BxC,KAAK0E,kBAAoB5B,EAEzB9C,KAAKyF,cAAgB,KAEjBzF,KAAKjC,QAAQ8H,SAASC,SAAQC,IAC1B,IAAsC,GAAlCA,EAAQsC,WAAWgE,WAAkB,CACrC,MAAMF,EAASnM,KAAKsH,QAAQ8E,SAASrG,GACrC/F,KAAK+E,IAAIsC,OAAO,QACXF,KAAK,QAAS,iBACdA,KAAK,IAAKgF,EAAO,IACjBhF,KAAK,IAAKgF,EAAO,IACjBhF,KAAK,cAAe,UACpBA,KAAK,OAAQ,SACbzJ,MAAM,YAAa,QACnBwG,KAAK6B,EAAQsC,WAAWC,KACjC,KAIJ,MAAMwE,EAAoB9M,KAAKjC,QAAQ8H,SAAS4E,QAAO1E,GAAWA,EAAQsC,WAAWgE,aAAgD,GAAlCtG,EAAQsC,WAAWgE,aAGtHS,EAAkBhH,SAAQ,CAACC,EAASgH,KAChC,MAAMV,EAAatG,EAAQsC,WAAWgE,WAQhCW,EAAwBF,EAAkB1Q,QAAU4P,EAAWE,GAAcA,EAC7Ee,GAAUjN,KAAKiF,SAAW+H,GAAyB,EAGnDE,EAAcD,EAASF,GAASf,EAAWE,GAC3CiB,EAAcnN,KAAKkF,UAAY,GAIrClF,KAAK+E,IAAIsC,OAAO,QACXF,KAAK,QAAS,kBACdA,KAAK,IAAK+F,GACV/F,KAAK,IAAKgG,GACVhG,KAAK,QAAS6E,GACd7E,KAAK,SAAU8E,GACf9E,KAAK,OAAQ,QACbA,KAAK,SAAU,SAGpB,IAAImF,EAAY,CACX,YAAWvG,EAAQsC,WAAWC,OAC9B,SAAQ+D,EAAWE,QAIpBF,EAAWG,iBAAmBH,EAAWG,gBAAgBpQ,OAAS,GAClEkQ,EAAUvE,KAAM,WAAUsE,EAAWG,mBAErCH,EAAWI,iBAAmBJ,EAAWI,gBAAgBrQ,OAAS,GAClEkQ,EAAUvE,KAAM,WAAUsE,EAAWI,mBAGzCH,EAAUxG,SAAQ,CAAC6G,EAAMS,KACrBpN,KAAK+E,IAAIsC,OAAO,QACXF,KAAK,QAAS,mBACdA,KAAK,IAAK+F,EAAc,GACxB/F,KAAK,IAAKgG,EAAc,GAAkB,GAAZC,GAC9BjG,KAAK,OAAQ,SACbzJ,MAAM,YAAa,QACnBwG,KAAKyI,EAAK,GACjB,GACJ,GAKD7J,IAAS9C,KAAKwC,OAAO,eAC1BxC,KAAK0E,kBAAoB5B,EAEzB9C,KAAKyF,cAAgB,KAEjB,MAAMqH,EAAoB9M,KAAKjC,QAAQ8H,SAAS4E,QAAO1E,GAAWA,EAAQsC,WAAWgE,aAAgD,GAAlCtG,EAAQsC,WAAWgE,aAItHS,EAAkBhH,SAAQ,CAACC,EAASgH,KAChC,MAAMV,EAAatG,EAAQsC,WAAWgE,WAEhCW,EAAwBF,EAAkB1Q,QAAU4P,EAAWE,GAAcA,EAC7Ee,GAAUjN,KAAKiF,SAAW+H,GAAyB,EAGnDE,EAAcD,EAASF,GAASf,EAAWE,GAC3CiB,EAAcnN,KAAKkF,UAAY,GACrC,GAAImH,GAAcA,EAAWgB,YAAa,CACtC,MAAMlB,EAASnM,KAAKsH,QAAQ8E,SAASrG,GAErC/F,KAAK+E,IAAIsC,OAAO,SACXF,KAAK,aAAckF,EAAWgB,aAC9BlG,KAAK,IAAKgF,EAAO,GAAK,IACtBhF,KAAK,IAAKgF,EAAO,GAAK,IACtBhF,KAAK,QAAS,IACdA,KAAK,SAAU,IACfA,KAAK,QAAS,gBAInBnH,KAAK+E,IAAIsC,OAAO,QACXF,KAAK,QAAS,kBACdA,KAAK,IAAK+F,GACV/F,KAAK,IAAKgG,GACVhG,KAAK,QAAS6E,GACd7E,KAAK,SAAU8E,GACf9E,KAAK,OAAQ,mBAAqB4F,EAAQ,KAC1C5F,KAAK,SAAU,SAEpB,IAAImF,EAAY,CACX,YAAWvG,EAAQsC,WAAWC,OAC9B,SAAQ+D,EAAWE,QAIpBF,EAAWG,iBAAmBH,EAAWG,gBAAgBpQ,OAAS,GAClEkQ,EAAUvE,KAAM,WAAUsE,EAAWG,mBAErCH,EAAWI,iBAAmBJ,EAAWI,gBAAgBrQ,OAAS,GAClEkQ,EAAUvE,KAAM,WAAUsE,EAAWI,mBAGzCH,EAAUxG,SAAQ,CAAC6G,EAAMS,KACrBpN,KAAK+E,IAAIsC,OAAO,QACXF,KAAK,QAAS,mBACdA,KAAK,IAAK+F,EAAc,GACxB/F,KAAK,IAAKgG,EAAc,GAAkB,GAAZC,GAC9BjG,KAAK,OAAQ,SACbzJ,MAAM,YAAa,QACnBwG,KAAKyI,EAAK,IAInB3M,KAAK+E,IAAIsC,OAAO,WACXF,KAAK,KAAM,cAAgB4F,GAC3B5F,KAAK,eAAgB,qBACrBA,KAAK,QAAS,QACdA,KAAK,SAAU,QACfE,OAAO,SACPF,KAAK,aAAckF,EAAWgB,aAC9BlG,KAAK,QAAS6E,GACd7E,KAAK,SAAU8E,GACf9E,KAAK,sBAAuB,iBACrC,IACF,GAIDrE,IAAS9C,KAAKwC,OAAO,gBAC1BxC,KAAK0E,kBAAoB5B,EAEzB9C,KAAKyF,cAAgB,KAEjB,MAAM6H,EAAgB,CAAC,UAAW,UAAW,UAAW,UAAW,UAAW,UAAW,UAAW,UAAW,WACzGC,EAAmBR,GAAUO,EAAcP,EAAQO,EAAclR,QAGjE0Q,EAAoB9M,KAAKjC,QAAQ8H,SAAS4E,QAAO1E,GAAWA,EAAQsC,WAAWgE,aAAgD,GAAlCtG,EAAQsC,WAAWgE,aAGtHS,EAAkBhH,SAAQ,CAACC,EAASgH,KAEhC,MAAMC,EAAwBF,EAAkB1Q,QAAU4P,EAAWE,GAAcA,EAC7Ee,GAAUjN,KAAKiF,SAAW+H,GAAyB,EAGnDE,EAAcD,EAASF,GAASf,EAAWE,GAC3CiB,EAAcnN,KAAKkF,UAAY,GAC/BsI,EAAYD,EAAgBR,GAGlC/M,KAAK+E,IAAImC,UAAU,QACduD,QAAOrC,GAAKA,IAAMrC,IAClBrI,MAAM,OAAQ8P,GACdvD,QAAQ,iBAAiB,GAG9BjK,KAAK+E,IAAIsC,OAAO,QACXF,KAAK,QAAS,kBACdA,KAAK,IAAK+F,GACV/F,KAAK,IAAKgG,GACVhG,KAAK,QAAS6E,GACd7E,KAAK,SAAU8E,GACf9E,KAAK,OAAQqG,GACbrG,KAAK,SAAU,SAGpB,MAAMkF,EAAatG,EAAQsC,WAAWgE,WACtC,IAAIC,EAAY,CACX,YAAWvG,EAAQsC,WAAWC,OAC9B,SAAQ+D,EAAWE,QAIpBF,EAAWG,iBAAmBH,EAAWG,gBAAgBpQ,OAAS,GAClEkQ,EAAUvE,KAAM,WAAUsE,EAAWG,mBAErCH,EAAWI,iBAAmBJ,EAAWI,gBAAgBrQ,OAAS,GAClEkQ,EAAUvE,KAAM,WAAUsE,EAAWI,mBAGzCH,EAAUxG,SAAQ,CAAC6G,EAAMS,KACrBpN,KAAK+E,IAAIsC,OAAO,QACXF,KAAK,QAAS,mBACdA,KAAK,IAAK+F,EAAc,GACxB/F,KAAK,IAAKgG,EAAc,GAAkB,GAAZC,GAC9BjG,KAAK,OAAQ,SACbzJ,MAAM,YAAa,QACnBwG,KAAKyI,EAAK,GACjB,GACJ,GAMD7J,IAAS9C,KAAKwC,OAAO,qBAC1BxC,KAAK0E,kBAAoB5B,EACzB9C,KAAKyF,cAAgB,KACjB,MAAMqH,EAAoB9M,KAAKjC,QAAQ8H,SAAS4E,QAAO1E,GAAWA,EAAQsC,WAAWgE,aAAgD,GAAlCtG,EAAQsC,WAAWgE,aAChHoB,EAAmBX,EAAkB1Q,OAGrCsR,EAAqBxE,KAAKC,KAAKsE,EAAmB,GAExD,IAA8BE,EAAyB,EAAGC,EAAwB,EAElFd,EAAkBhH,SAASC,IACvB,MAAM8H,EAAgB7N,KAAKsH,QAAQ8E,SAASrG,GACtCsG,EAAatG,EAAQsC,WAAWgE,WAGhCyB,EAAyC,YAA5B/H,EAAQsC,WAAWC,KAAqB,IAAM,IAG3DyF,EAAiBF,EAAc,GAC/BG,EAAmBhO,KAAKkF,UAAY2I,EAAc,GAClDI,EAAkBjO,KAAKiF,SAAW4I,EAAc,GAGtD,IAAIK,EAAO,OACPC,EAAcJ,EAEdC,EAAmBG,GAAeR,EAAyBD,IAC3DS,EAAcH,EACdE,EAAO,UAEPD,EAAkBE,GAAeP,EAAwBF,IACzDQ,EAAO,SAIE,SAATA,EAAiBE,EACH,WAATF,EAAmBP,IACvBC,IAGL,IAAIS,EAAWR,EAAc,GAAIS,EAAWT,EAAc,GACtDU,EAAcV,EAAc,GAAIW,EAAcX,EAAc,GAEhE,OAAQK,GACJ,IAAK,OACDG,GAAYP,EACZS,EAAcF,EAAWrC,EAAW,EACpCwC,EAAcX,EAAc,GAAK5B,EAAY,EAC7C,MACJ,IAAK,SACDqC,GAAYR,EACZS,EAAcV,EAAc,GAAK7B,EAAW,EAC5CwC,EAAcF,EAAW,EACzB,MACJ,IAAK,QACDD,GAAYP,EACZS,EAAcF,EAAW,EACzBG,EAAcX,EAAc,GAAK5B,EAAY,EAC7C,MAGRjM,KAAK+E,IAAIsC,OAAO,QACXF,KAAK,KAAM0G,EAAc,IACzB1G,KAAK,KAAM0G,EAAc,IACzB1G,KAAK,KAAMkH,GACXlH,KAAK,KAAMmH,GACXnH,KAAK,SAAU,SACfA,KAAK,eAAgB,GACrBA,KAAK,QAAS,mBAGnBnH,KAAK+E,IAAIsC,OAAO,QACXF,KAAK,IAAKoH,GACVpH,KAAK,IAAKqH,GACVrH,KAAK,QAAS6E,GACd7E,KAAK,SAAU8E,GACf9E,KAAK,OAAQ,SACbA,KAAK,SAAU,SACfA,KAAK,QAAS,kBAEnB,IAAImF,EAAY,CACX,YAAWvG,EAAQsC,WAAWC,OAC9B,SAAQ+D,EAAWE,QAIpBF,EAAWG,iBAAmBH,EAAWG,gBAAgBpQ,OAAS,GAClEkQ,EAAUvE,KAAM,WAAUsE,EAAWG,mBAErCH,EAAWI,iBAAmBJ,EAAWI,gBAAgBrQ,OAAS,GAClEkQ,EAAUvE,KAAM,WAAUsE,EAAWI,mBAIzCH,EAAUxG,SAAQ,CAAC6G,EAAM7E,KACrB9H,KAAK+E,IAAIsC,OAAO,QACXF,KAAK,IAAKoH,EAAc,GACxBpH,KAAK,IAAKqH,EAAc,GAAS,GAAJ1G,GAC7BX,KAAK,OAAQ,SACbzJ,MAAM,YAAa,QACnBwG,KAAKyI,GACLxF,KAAK,QAAS,kBAAkB,GACvC,GACJ,GAMDrE,IAAS9C,KAAKwC,OAAO,kBAC1BxC,KAAK0E,kBAAoB5B,EAEzB9C,KAAKyF,cAAgB,KACjB,MAAMgJ,EAAiBzO,KAAKjC,QAAQ8H,SAC/B4E,QAAO1E,GAAWA,EAAQsC,WAAWgE,aAAgD,GAAlCtG,EAAQsC,WAAWgE,aACtEqC,MAAK,CAACC,EAAGC,KACN,MAAMC,EAAU7O,KAAKsH,QAAQ8E,SAASuC,GAChCG,EAAU9O,KAAKsH,QAAQ8E,SAASwC,GACtC,OAAOC,EAAQ,GAAKC,EAAQ,EAAE,IAIhC9B,EAAwByB,EAAerS,QAAU4P,EAAWE,GAAcA,EAC1Ee,GAAUjN,KAAKiF,SAAW+H,GAAyB,EAEzDyB,EAAe3I,SAAQ,CAACC,EAASgH,KAC7B,MAAMV,EAAatG,EAAQsC,WAAWgE,WAChCwB,EAAgB7N,KAAKsH,QAAQ8E,SAASrG,GACtCmH,EAAcD,EAASF,GAASf,EAAWE,GAC3CiB,EAAcnN,KAAKkF,UAAY,GAGrClF,KAAK+E,IAAIsC,OAAO,QACXF,KAAK,QAAS,kBACdA,KAAK,IAAK+F,GACV/F,KAAK,IAAKgG,GACVhG,KAAK,QAAS6E,GACd7E,KAAK,SAAU8E,GACf9E,KAAK,OAAQ,QACbA,KAAK,SAAU,SAGpB,IAAImF,EAAY,CACX,YAAWvG,EAAQsC,WAAWC,OAC9B,SAAQ+D,EAAWE,QAIpBF,EAAWG,iBAAmBH,EAAWG,gBAAgBpQ,OAAS,GAClEkQ,EAAUvE,KAAM,WAAUsE,EAAWG,mBAErCH,EAAWI,iBAAmBJ,EAAWI,gBAAgBrQ,OAAS,GAClEkQ,EAAUvE,KAAM,WAAUsE,EAAWI,mBAIzCH,EAAUxG,SAAQ,CAAC6G,EAAMS,KACrBpN,KAAK+E,IAAIsC,OAAO,QACXF,KAAK,QAAS,mBACdA,KAAK,IAAK+F,EAAc,GACxB/F,KAAK,IAAKgG,EAAc,GAAkB,GAAZC,GAC9BjG,KAAK,OAAQ,SACbzJ,MAAM,YAAa,QACnBwG,KAAKyI,EAAK,IAInB3M,KAAK+E,IAAIsC,OAAO,QACXF,KAAK,IAAM,IAAG0G,EAAc,MAAMA,EAAc,OAAOX,EAAclB,EAAW,KAAK6B,EAAc,OAAOX,EAAclB,EAAW,KAAKmB,KACxIhG,KAAK,SAAU,SACfA,KAAK,OAAQ,QACbA,KAAK,QAAS,kBAAkB,GACvC,GAODrE,IAAS9C,KAAKwC,OAAO,mBAC1BxC,KAAK0E,kBAAoB5B,EAEzB9C,KAAKyF,cAAgB,KACjB,MAAMqH,EAAoB9M,KAAKjC,QAAQ8H,SAAS4E,QAAO1E,GAAWA,EAAQsC,WAAWgE,aAAgD,GAAlCtG,EAAQsC,WAAWgE,aAChH0C,EAAgB,IAChBC,EAAgBhP,KAAKkF,UAAY,IACjC+J,EAAS/F,KAAKgG,IAAIlP,KAAKiF,SAAUjF,KAAKkF,WAAa,EACnDiK,EAAkB,EAAIjG,KAAKkG,GAAMtC,EAAkB1Q,OAEzD0Q,EAAkBhH,SAAQ,CAACC,EAASgH,KAChC,MAAMsC,EAAQF,EAAiBpC,EACzBG,EAAc6B,EAAgBE,EAAS/F,KAAKmC,IAAIgE,GAChDlC,EAAc6B,EAAgBC,EAAS/F,KAAKuC,IAAI4D,GAChDxB,EAAgB7N,KAAKsH,QAAQ8E,SAASrG,GAEtCsI,EAAWnB,EACXoB,EAAWT,EAAc,GAAKV,EAAcA,EAAclB,EAAY,EAAIkB,EAAclB,EAAY,EAE1GjM,KAAK+E,IAAIsC,OAAO,QACXF,KAAK,IAAM,IAAG0G,EAAc,MAAMA,EAAc,OAAOQ,KAAYR,EAAc,OAAOQ,KAAYC,KACpGnH,KAAK,SAAU,SACfA,KAAK,OAAQ,QACbA,KAAK,QAAS,mBAGnB,IAAImF,EAAY,CACX,YAAWvG,EAAQsC,WAAWC,OAC9B,SAAQvC,EAAQsC,WAAWgE,WAAWE,QAGvCxG,EAAQsC,WAAWgE,WAAWG,iBAAmBzG,EAAQsC,WAAWgE,WAAWG,gBAAgBpQ,OAAS,GACxGkQ,EAAUvE,KAAM,WAAUhC,EAAQsC,WAAWgE,WAAWG,mBAExDzG,EAAQsC,WAAWgE,WAAWI,iBAAmB1G,EAAQsC,WAAWgE,WAAWI,gBAAgBrQ,OAAS,GACxGkQ,EAAUvE,KAAM,WAAUhC,EAAQsC,WAAWgE,WAAWI,mBAI5DzM,KAAK+E,IAAIsC,OAAO,QACXF,KAAK,QAAS,kBACdA,KAAK,IAAK+F,EAAclB,EAAW,GACnC7E,KAAK,IAAKgG,EAAclB,EAAY,GACpC9E,KAAK,QAAS6E,GACd7E,KAAK,SAAU8E,GACf9E,KAAK,OAAQ,QACbA,KAAK,SAAU,SAGpBmF,EAAUxG,SAAQ,CAAC6G,EAAMS,KACrBpN,KAAK+E,IAAIsC,OAAO,QACXF,KAAK,QAAS,mBACdA,KAAK,IAAK+F,GACV/F,KAAK,IAAKgG,EAAclB,EAAY,EAAI,GAAiB,GAAZmB,GAC7CjG,KAAK,cAAe,UACpBA,KAAK,OAAQ,SACbzJ,MAAM,YAAa,QACnBwG,KAAKyI,EAAK,GACjB,GAGJ,GAIV3M,KAAKuH,SAET,EAEAtE,kBAAAA,CAAmBH,GAGf,GAFAtB,QAAQE,IAAI,oBAAqBoB,GAE7B9C,KAAK/B,YAEL,GAAI6E,IAAS9C,KAAKwC,OAAO,qBAAsB,CAC3CxC,KAAK2E,oBAAsB7B,EAC3B,MAAMwM,EAAiBC,IACnB,MAAMC,EAAqBC,GAAUvG,KAAKwG,IAAID,EAAO,KAG/CE,EAAa7O,EAAAA,IAAmBA,EAAAA,IAAkBA,EAAAA,IAAO,IAAK,IAAK,KAAMA,EAAAA,IAAO,IAAK,IAAK,OAC/F8O,OAAO,CAACJ,EAAkBxP,KAAK8E,gBAAiB,IACjD,OAAiB,GAAVyK,EAAcvP,KAAKoF,aAAeuK,EAAWH,EAAkBD,GAAO,EAEjFvP,KAAK0F,eAAiB4J,EAEO,GAAzBtP,KAAKqF,kBACLvE,EAAAA,IAAU,IAAMd,KAAKxE,MAAQ,WAAW0L,UAAU,KAAKc,SACvDhI,KAAKuF,gBAAkB,KAEnBvF,KAAK+E,IAAImC,UAAU,QACdC,KAAK,QAAQiB,GAAKkH,EAActP,KAAKiG,cAAcmC,MAExDpI,KAAK+E,IAAImC,UAAU,UACdC,KAAK,QAAQiB,GAAKkH,EAActP,KAAKiG,cAAcmC,KAAI,IAKhEtH,EAAAA,IAAU,IAAMd,KAAKxE,MAAQ,WAAW0L,UAAU,KAAKc,SACvDhI,KAAKsF,YAAcxC,EACnB9C,KAAK+E,IAAImC,UAAU,QAClBC,KAAK,OAAS,GAAEnH,KAAKoF,gBACtBpF,KAAK+E,IAAImC,UAAU,UAClBC,KAAK,OAAS,GAAEnH,KAAKoF,iBAE1BpF,KAAK6P,0BACT,MAGK,GAAI/M,IAAS9C,KAAKwC,OAAO,eAAgB,CAC1CxC,KAAK2E,oBAAsB7B,EAC3B,MAAMwM,EAAiBQ,GACfA,EAAa,EACN9P,KAAKoF,aAEP0K,GAAc,GAAKA,EAAa,IAC9B,qBACAA,GAAc,KAAWA,EAAa,IACtC,qBACAA,GAAc,KAAYA,EAAa,IACvC,qBACAA,GAAc,KAAYA,EAAa,IACvC,qBAEA,qBAIc,GAAzB9P,KAAKqF,kBACLvE,EAAAA,IAAU,IAAMd,KAAKxE,MAAQ,WAAW0L,UAAU,KAAKc,SACvDhI,KAAKuF,gBAAkB,KAEnBvF,KAAK+E,IAAImC,UAAU,QACdC,KAAK,QAAQiB,GAAKkH,EAActP,KAAKiG,cAAcmC,MAExDpI,KAAK+E,IAAImC,UAAU,UACdC,KAAK,QAAQiB,GAAKkH,EAActP,KAAKiG,cAAcmC,KAAI,IAGhEtH,EAAAA,IAAU,IAAMd,KAAKxE,MAAQ,WAAW0L,UAAU,KAAKc,SACvDhI,KAAKsF,YAAcxC,EACnB9C,KAAK0F,eAAiB4J,EACtBtP,KAAK+E,IAAImC,UAAU,QAClBC,KAAK,OAAQnH,KAAKoF,cACnBpF,KAAK+E,IAAImC,UAAU,UAClBC,KAAK,OAAQnH,KAAKoF,eAEvBpF,KAAK+P,oBACT,MAISjN,IAAS9C,KAAKwC,OAAO,cAC1BxC,KAAK2E,oBAAsB7B,EAE3B9C,KAAKuF,gBAAkB,KACnBvF,KAAK+E,IAAImC,UAAU,QAAQC,KAAK,OAAQnH,KAAKoF,cAG7C,MAAM4K,EAAa,EACbC,EAAsB,IACtBC,EAAc,GACdC,EAAe,GACfC,EAAc,GAEpBpQ,KAAKjC,QAAQ8H,SAASC,SAAQC,IAC1B,MAAMoG,EAASnM,KAAKsH,QAAQ8E,SAASrG,GAC/B+J,EAAa9P,KAAKiG,cAAcF,GACtC,GAAI+J,GAAc,IAAS,CACvB,MAAMnT,EAASqT,EAAcF,EAAaG,EAEb,GAAzBjQ,KAAKqF,kBACLvE,EAAAA,IAAU,IAAMd,KAAKxE,MAAQ,WAAW0L,UAAU,KAAKc,SAEvDhI,KAAK+E,IAAIsC,OAAO,QACXF,KAAK,IAAKgF,EAAO,GAAK+D,EAAc,GACpC/I,KAAK,IAAKgF,EAAO,GAAKxP,GACtBwK,KAAK,QAAS+I,GACd/I,KAAK,SAAUxK,GACfwK,KAAK,OAAQ,4BAGlBnH,KAAK+E,IAAIsC,OAAO,WACXF,KAAK,SAAW,GAAEgF,EAAO,GAAK+D,EAAc,KAAK/D,EAAO,GAAKxP,KAAUwP,EAAO,GAAK+D,EAAc,KAAK/D,EAAO,GAAKxP,KAAUwP,EAAO,GAAK+D,EAAc,EAAIC,EAAe,KAAKhE,EAAO,GAAKxP,EAASwT,EAAe,KAAKhE,EAAO,GAAK+D,EAAc,EAAIC,EAAe,KAAKhE,EAAO,GAAKxP,EAASwT,EAAe,KAC7ShJ,KAAK,OAAQ,4BAGlBnH,KAAK+E,IAAIsC,OAAO,WACXF,KAAK,SAAW,GAAEgF,EAAO,GAAK+D,EAAc,KAAK/D,EAAO,MAAMA,EAAO,GAAK+D,EAAc,KAAK/D,EAAO,GAAKxP,KAAUwP,EAAO,GAAK+D,EAAc,EAAIC,EAAe,KAAKhE,EAAO,GAAKxP,EAASwT,EAAe,KAAKhE,EAAO,GAAK+D,EAAc,EAAIC,EAAe,KAAKhE,EAAO,GAAKgE,EAAe,KAC3RhJ,KAAK,OAAS,qBAAoBiJ,QAGvCpQ,KAAK+E,IAAIsC,OAAO,QACXF,KAAK,IAAKgF,EAAO,GAAK+D,EAAc,GACpC/I,KAAK,IAAKgF,EAAO,GAAKxP,GACtBwK,KAAK,QAAS+I,GACd/I,KAAK,SAAUxK,GACfwK,KAAK,OAAQnH,KAAK0F,eAAeoK,IACjC3I,KAAK,UAAW,OAGrBnH,KAAK+E,IAAIsC,OAAO,WACXF,KAAK,SAAW,GAAEgF,EAAO,GAAK+D,EAAc,KAAK/D,EAAO,GAAKxP,KAAUwP,EAAO,GAAK+D,EAAc,KAAK/D,EAAO,GAAKxP,KAAUwP,EAAO,GAAK+D,EAAc,EAAIC,EAAe,KAAKhE,EAAO,GAAKxP,EAASwT,EAAe,KAAKhE,EAAO,GAAK+D,EAAc,EAAIC,EAAe,KAAKhE,EAAO,GAAKxP,EAASwT,EAAe,KAC7ShJ,KAAK,OAAQnH,KAAK0F,eAAeoK,IACjC3I,KAAK,UAAW,OAGrBnH,KAAK+E,IAAIsC,OAAO,WACXF,KAAK,SAAW,GAAEgF,EAAO,GAAK+D,EAAc,KAAK/D,EAAO,MAAMA,EAAO,GAAK+D,EAAc,KAAK/D,EAAO,GAAKxP,KAAUwP,EAAO,GAAK+D,EAAc,EAAIC,EAAe,KAAKhE,EAAO,GAAKxP,EAASwT,EAAe,KAAKhE,EAAO,GAAK+D,EAAc,EAAIC,EAAe,KAAKhE,EAAO,GAAKgE,EAAe,KAC3RhJ,KAAK,OAAQnH,KAAK0F,eAAeoK,IACjC3I,KAAK,UAAW,OAE7B,KAIJ,IAAK,IAAIW,EAAI,EAAGuI,EAAQ,GAAIC,EAAK,GAAIxI,EAAI,EAAGA,IAAK,CAC7C,IAAIyI,EAAI,IAAQrH,KAAKwG,IAAI,EAAG5H,GAAI0B,EAAI8G,EAChCE,EAAID,EAAI,IACR9G,EAAI,IAAI+G,EACZxQ,KAAK+E,IAAIsC,OAAO,QACXF,KAAK,IAAKmJ,GACVnJ,KAAK,IAAK,IAAIqJ,GACdrJ,KAAK,QAAS,IACdA,KAAK,SAAUqJ,GACfrJ,KAAK,OAAQ,4BAClBnH,KAAK+E,IAAIsC,OAAO,WACXF,KAAK,SAAW,GAAEqC,KAAKC,KAAKD,EAAE,KAAKC,EAAE,KAAKD,EAAE,KAAKC,EAAE+G,EAAE,KAAKhH,KAAKC,EAAE+G,KACjErJ,KAAK,OAAQ,0BAClBnH,KAAK+E,IAAIsC,OAAO,WACXF,KAAK,SAAW,GAAEqC,KAAKC,KAAKD,EAAE,KAAKC,EAAE,KAAKD,EAAE,MAAMC,EAAE,KAAKD,EAAE,MAAMC,KACjEtC,KAAK,OAAQ,4BAElB,MAAMrI,EAAQyR,EAAI,IAAOrH,KAAKuH,MAAMF,GAChCA,EAAI,IAAUrH,KAAKuH,MAAMF,EAAI,KAAQ,IACrCrH,KAAKuH,MAAMF,EAAI,KAAW,IAC9BvQ,KAAK+E,IAAIsC,OAAO,QACXF,KAAK,IAAKmJ,EAAG,GACbnJ,KAAK,IAAK,IAAIqJ,GACdtM,KAAKpF,GACVwR,GAAM,EAAID,CACd,IAICvN,IAAS9C,KAAKwC,OAAO,cAC1BxC,KAAK2E,oBAAsB7B,EAE3B9C,KAAKuF,gBAAkB,KACnBvF,KAAK+E,IAAImC,UAAU,QAAQC,KAAK,OAAQnH,KAAKoF,cAG7C,MAAM4K,EAAa,EACbC,EAAsB,IACtBC,EAAc,GAEpBlQ,KAAKjC,QAAQ8H,SAASC,SAAQC,IAC1B,MAAMoG,EAASnM,KAAKsH,QAAQ8E,SAASrG,GAC/B+J,EAAa9P,KAAKiG,cAAcF,GACtC,GAAI+J,GAAc,IAAS,CACvB,MAAMnT,EAASqT,EAAcF,EAAaG,EAEb,GAAzBjQ,KAAKqF,kBACLvE,EAAAA,IAAU,IAAMd,KAAKxE,MAAQ,WAAW0L,UAAU,KAAKc,SACvDhI,KAAK+E,IAAIsC,OAAO,QACfF,KAAK,IAAKgF,EAAO,GAAK+D,EAAc,GACpC/I,KAAK,IAAKgF,EAAO,GAAKxP,GACtBwK,KAAK,QAAS+I,GACd/I,KAAK,SAAUxK,GACfwK,KAAK,OAAQ,6BAEdnH,KAAK+E,IAAIsC,OAAO,QACfF,KAAK,IAAKgF,EAAO,GAAK+D,EAAc,GACpC/I,KAAK,IAAKgF,EAAO,GAAKxP,GACtBwK,KAAK,QAAS+I,GACd/I,KAAK,SAAUxK,GACfwK,KAAK,OAAQnH,KAAK0F,eAAeoK,IACjC3I,KAAK,UAAW,MAGzB,KAIJ,IAAK,IAAIW,EAAI,EAAGuI,EAAQ,GAAIC,EAAK,GAAIxI,EAAI,EAAGA,IAAK,CAC7C,IAAIyI,EAAI,IAAQrH,KAAKwG,IAAI,EAAG5H,GACxB0I,EAAID,EAAI,IACZvQ,KAAK+E,IAAIsC,OAAO,QACXF,KAAK,IAAKmJ,GACVnJ,KAAK,IAAK,IAAIqJ,GACdrJ,KAAK,QAAS,IACdA,KAAK,SAAUqJ,GACfrJ,KAAK,OAAQ,4BACd,MAAMrI,EAAQyR,EAAI,IAAOrH,KAAKuH,MAAMF,GACpCA,EAAI,IAAUrH,KAAKuH,MAAMF,EAAI,KAAQ,IACrCrH,KAAKuH,MAAMF,EAAI,KAAW,IAC1BvQ,KAAK+E,IAAIsC,OAAO,QACfF,KAAK,IAAKmJ,GACVnJ,KAAK,IAAK,IAAIqJ,GACdtM,KAAKpF,GACVwR,GAAM,EAAID,CACd,IAMCvN,IAAS9C,KAAKwC,OAAO,SAC1BxC,KAAK2E,oBAAsB7B,EAE3B9C,KAAKuF,gBAAkB,KACnBvF,KAAK+E,IAAImC,UAAU,QAAQC,KAAK,OAAQnH,KAAKoF,cAI7C,MAAMsL,EAAmB5P,EAAAA,IAAUd,KAAKjC,QAAQ8H,UAAUuC,GAAKpI,KAAKiG,cAAcmC,KAC5EuI,EAAY7P,EAAAA,MACb8O,OAAOc,GACPE,MAAM,CAAC,EAAG,KAGf5Q,KAAKjC,QAAQ8H,SAASC,SAAQC,IAC1B,MAAOyD,EAAGC,GAAKzJ,KAAKsH,QAAQ8E,SAASrG,GAC/B+J,EAAa9P,KAAKiG,cAAcF,GAClC+J,GAAc,MACe,GAAzB9P,KAAKqF,kBACLvE,EAAAA,IAAU,IAAMd,KAAKxE,MAAQ,WAAW0L,UAAU,KAAKc,SACvDhI,KAAK+E,IAAIsC,OAAO,QACfF,KAAK,IAAKqC,EAAImH,EAAUb,GAAc,GACtC3I,KAAK,IAAKsC,EAAIkH,EAAUb,GAAc,GACtC3I,KAAK,QAASwJ,EAAUb,IACxB3I,KAAK,SAAUwJ,EAAUb,IACzB3I,KAAK,OAAQ,6BAEdnH,KAAK+E,IAAIsC,OAAO,QACfF,KAAK,IAAKqC,EAAImH,EAAUb,GAAc,GACtC3I,KAAK,IAAKsC,EAAIkH,EAAUb,GAAc,GACtC3I,KAAK,QAASwJ,EAAUb,IACxB3I,KAAK,SAAUwJ,EAAUb,IACzB3I,KAAK,OAAQnH,KAAK0F,eAAeoK,IACjC3I,KAAK,UAAW,OAGzB,IAIJ,IAAK,IAAIW,EAAI,EAAGuI,EAAQ,GAAIQ,EAAK,IAAK/I,EAAI,EAAGA,IAAK,CAC9C,IAAIyI,EAAI,IAAQrH,KAAKwG,IAAI,EAAG5H,GACxB0I,EAAIG,EAAUJ,GAClBvQ,KAAK+E,IAAIsC,OAAO,QACXF,KAAK,IAAK,IACVA,KAAK,IAAK0J,GACV1J,KAAK,QAASqJ,GACdrJ,KAAK,SAAUqJ,GACfrJ,KAAK,OAAQ,4BAElB,MAAMrI,EAAQyR,EAAI,IAAOrH,KAAKuH,MAAMF,GAChCA,EAAI,IAAUrH,KAAKuH,MAAMF,EAAI,KAAQ,IACrCrH,KAAKuH,MAAMF,EAAI,KAAW,IAC9BvQ,KAAK+E,IAAIsC,OAAO,QACXF,KAAK,IAAK,GAAGqJ,GACbrJ,KAAK,IAAK0J,EAAKL,GACftM,KAAKpF,GAEV+R,GAAML,EAAIH,CAGd,IAKCvN,IAAS9C,KAAKwC,OAAO,aAC1BxC,KAAK2E,oBAAsB7B,EAE3B9C,KAAKuF,gBAAkB,KACnBvF,KAAK+E,IAAImC,UAAU,QAAQC,KAAK,OAAQnH,KAAKoF,cAG7C,MAAM0L,EAAY,GACZC,EAAa,GACbC,EAAU,EACVC,EAAS,IACTC,EAAS,IAGflR,KAAKjC,QAAQ8H,SAASC,SAAQC,IAC1B,MAAMoG,EAASnM,KAAKsH,QAAQ8E,SAASrG,GAC/B+J,EAAa9P,KAAKiG,cAAcF,GAGtC,GAAI+J,GAAc,IAAS,CACvB,MAAMqB,EAAajI,KAAKC,KAAK2G,EAAa,KAE1C,IAAK,IAAIhI,EAAI,EAAGA,EAAIqJ,EAAYrJ,IAAK,CAGjC,MAAM0B,EAAI2C,EAAO,GAA8B,GAAvB2E,EAAYE,GAAe,EAAOlJ,EAAI,GAAMgJ,EAAYE,GAC1EvH,EAAI0C,EAAO,GAAMjD,KAAKuH,MAAM3I,EAAI,IAAMiJ,EAAaC,GAEzD,GAA6B,GAAzBhR,KAAKqF,iBAA2B,CAChCvE,EAAAA,IAAU,IAAMd,KAAKxE,MAAQ,WAAW0L,UAAU,KAAKc,SAQvD,IAAIoJ,EAAIpR,KAAK+E,IAAIsC,OAAO,KACxB+J,EAAE/J,OAAO,QACJF,KAAK,IAAK,iUACVA,KAAK,IAAK,0JACVA,KAAK,IAAK,iUACVA,KAAK,IAAK,0JACVA,KAAK,IAAK,o+BACVA,KAAK,IAAK,kvCACVA,KAAK,IAAK,8tCACVA,KAAK,YAAa,SAAW8J,EAAS,IAAMC,EAAS,KACrD/J,KAAK,OAAQ,4BACbA,KAAK,SAAU,QACfA,KAAK,eAAgB,GAC1BiK,EAAEjK,KAAK,YAAa,aAAaqC,EAAE,IAAIC,EAAE,IAC7C,KAAO,CACH,IAAI4H,EAAKrR,KAAK+E,IAAIsC,OAAO,KACzBgK,EAAGhK,OAAO,QACLF,KAAK,IAAK,8nCACVA,KAAK,YAAa,SAAW8J,EAAS,IAAMC,EAAS,KACrD/J,KAAK,OAAQnH,KAAK0F,eAAeoK,IACjC3I,KAAK,SAAU,SACfA,KAAK,eAAgB,GAC1BkK,EAAGlK,KAAK,YAAa,aAAeqC,EAAI,IAAMC,EAAI,IACtD,CACJ,CACJ,KAGJzJ,KAAK+E,IAAIsC,OAAO,SACXF,KAAK,aAAcxE,EAAQ,OAC3BwE,KAAK,IAAK,IACVA,KAAK,IAAK,KACVA,KAAK,QAAmB,EAAV2J,GACd3J,KAAK,SAAqB,EAAX4J,GACpB/Q,KAAK+E,IAAIsC,OAAO,QACXF,KAAK,IAAK,IACVA,KAAK,IAAK,KACVjD,KAAK,QAAQ,GA2BtBlE,KAAKuI,gBAAgB,+BAAgC,2EAKzD,GADAzH,EAAAA,IAAU,IAAMd,KAAKxE,MAAQ,WAAW0L,UAAU,KAAKc,SACnDlF,IAAS9C,KAAKwC,OAAO,SACrBxC,KAAK2E,oBAAsB7B,EAC3B9C,KAAKuF,gBAAkB,KACnBvF,KAAK+E,IAAImC,UAAU,QAAQC,KAAK,OAAQnH,KAAKoF,cAE7CpF,KAAKjC,QAAQ8H,SAASC,SAAQC,IAC1B,MAAMuL,EAAatR,KAAKiG,cAAcF,GAGtC,IAAoB,IAAhBuL,EAAmB,CACnB,MAAMnF,EAASnM,KAAKsH,QAAQ8E,SAASrG,GAGR,GAAzB/F,KAAKqF,iBACLrF,KAAK+E,IAAIsC,OAAO,SACfF,KAAK,aAAcmK,GACnBnK,KAAK,IAAKgF,EAAO,GAAK,IACtBhF,KAAK,IAAKgF,EAAO,GAAK,IACtBhF,KAAK,QAAS,IACdA,KAAK,SAAU,IAEhBnH,KAAK+E,IAAIsC,OAAO,SACfF,KAAK,aAAcmK,GACnBnK,KAAK,IAAKgF,EAAO,GAAK,IACtBhF,KAAK,IAAKgF,EAAO,GAAK,IACtBhF,KAAK,QAAS,IACdA,KAAK,SAAU,IACfA,KAAK,OAAQnH,KAAK0F,iBAG3B,IACF,OAGL,GAAI5C,IAAS9C,KAAKwC,OAAO,eAAgB,CAC1CxC,KAAK2E,oBAAsB7B,EAG3B,MAAMyO,EAAYvR,KAAKjC,QAAQ8H,SAAS2L,KAAIpJ,GAAKA,EAAEC,WAAWC,OAGxDmJ,EAAe,CACjB,UAAW,UAAW,UAAW,UAAW,UAAW,UAAW,UAAW,UAC7E,UAAW,UAAW,UAAW,UAAW,UAAW,UAAW,UAAW,UAC7E,UAAW,UAAW,UAAW,UAAW,UAAW,UAEvD,UAAW,UAAW,UAAW,UAAW,UAAW,UAAW,UAAW,UAC7E,UAAW,UAAW,UAAW,UAAW,UAAW,UAAW,UAAW,UAC7E,UAAW,UAAW,UAAW,UAAW,UAAW,UAAW,UAAW,UAC7E,UAAW,UAAW,UAAW,UAAW,UAAW,WAIrD9B,EAAcvH,GACZA,GAAKA,EAAEC,YAAcD,EAAEC,WAAWC,KAC3BxH,EAAAA,IAAgByQ,EAAWE,EAA3B3Q,CAAyCsH,EAAEC,WAAWC,MAEtDtI,KAAKoF,aAIpBpF,KAAKuF,gBAAkB,KAEnBvF,KAAK+E,IAAImC,UAAU,QACdC,KAAK,QAAQiB,GAAKuH,EAAWvH,KAC7BjB,KAAK,SAAU,WAEpBnH,KAAK+E,IAAImC,UAAU,UACdC,KAAK,QAAQiB,GAAKuH,EAAWvH,KAC7BjB,KAAK,SAAU,UAAU,CAEtC,MAsBInH,KAAKuI,gBAAgB,+BAAgC,sEAO7DvI,KAAKuH,SACT,EAEAsI,wBAAAA,GACI,MAAM1K,EAAcnF,KAAKmF,YACnBuM,EAAe,GACfC,EAAc,EAEdC,EAAezM,EAAcwM,EAC7BE,EAAkB3I,KAAKwG,IAAI1P,KAAK8E,eAAgB,KAAQ6M,EAExDG,EAAiB9R,KAAKgF,OAAOqC,OAAO,OACrCF,KAAK,QAAShC,GACdgC,KAAK,SAAUuK,GAEpB1R,KAAKgF,OAAOqC,OAAO,QACdF,KAAK,IAAK,GACVA,KAAK,IAAKuK,EAAe,IAEzBxN,KAAK,KACLxG,MAAM,YAAa,QAGxB,IAAK,IAAIoK,EAAI,EAAGA,EAAI6J,EAAa7J,IAAK,CAClC,MAAMiK,EAAejK,EAAI8J,EACnBI,GAAclK,EAAI,GAAK8J,EAEvBK,EAAkB/I,KAAKwG,IAAI5H,EAAI+J,EAAiB,GAChDK,EAAgBhJ,KAAKwG,KAAK5H,EAAI,GAAK+J,EAAiB,GAGpDM,EAAWL,EAAezK,OAAO,QAClCA,OAAO,kBACPF,KAAK,KAAO,iBAAgBW,KAC5BX,KAAK,KAAM,MACXA,KAAK,KAAM,MACXA,KAAK,KAAM,QACXA,KAAK,KAAM,MAEhBgL,EAAS9K,OAAO,QACXF,KAAK,SAAU,MACfA,KAAK,aAAcnH,KAAK0F,eAAeuM,IAE5CE,EAAS9K,OAAO,QACXF,KAAK,SAAU,QACfA,KAAK,aAAcnH,KAAK0F,eAAewM,IAG5CJ,EAAezK,OAAO,QACjBF,KAAK,IAAK4K,GACV5K,KAAK,IAAK,GACVA,KAAK,QAASyK,GACdzK,KAAK,SAAUuK,GACfhU,MAAM,OAAS,sBAAqBoK,MAGrCA,EAAI6J,EAAc,GAClBG,EAAezK,OAAO,QACjBF,KAAK,KAAM6K,GACX7K,KAAK,KAAM,GACXA,KAAK,KAAM6K,GACX7K,KAAK,KAAMuK,GACXhU,MAAM,SAAU,WAChBA,MAAM,eAAgB,GAI/B,MAAMoB,EAAQoT,EAAgB,IAAOhJ,KAAKuH,MAAMyB,GAC5CA,EAAgB,IAAUhJ,KAAKuH,MAAMyB,EAAgB,KAAQ,IACzDhJ,KAAKuH,MAAMyB,EAAgB,KAAW,IAC9ClS,KAAKgF,OAAOqC,OAAO,QACdF,KAAK,IAAK6K,GACV7K,KAAK,IAAKuK,EAAe,IACzBvK,KAAK,cAAe,UACpBjD,KAAKpF,GACLpB,MAAM,YAAa,OAC5B,CACJ,EACAqS,kBAAAA,GACI,MAAMqC,EAAa,CACf,CAAE1S,MAAO,qBAAsBwE,KAAM,OAAQmO,cAAe,EAAGC,cAAe,KAC9E,CAAE5S,MAAO,qBAAsBwE,KAAM,SAAUmO,cAAe,IAASC,cAAe,KACtF,CAAE5S,MAAO,qBAAsBwE,KAAM,UAAWmO,cAAe,IAAUC,cAAe,KACxF,CAAE5S,MAAO,qBAAsBwE,KAAM,WAAYmO,cAAe,IAAUC,cAAe,KACzF,CAAE5S,MAAO,qBAAsBwE,KAAM,QAASmO,cAAe,IAAWC,cAAeC,MAGrFpN,EAAc,GACduM,EAAe,GACfc,EAAgB,GAChBC,EAAU,GACVC,EAAU,GAOhB1S,KAAKgF,OAAOqC,OAAO,KACdF,KAAK,QAAS,UACdA,KAAK,YAAc,aAAYsL,KAAWC,MAG/C1S,KAAKgF,OAAOkC,UAAU,QACjB5H,KAAK8S,GACLhL,QAAQC,OAAO,QACfF,KAAK,KAAK,CAACiB,EAAGN,IAAMA,GAAK4J,EAAec,GAAiB,IACzDrL,KAAK,IAAK,GACVA,KAAK,QAAShC,GACdgC,KAAK,SAAUuK,GACfhU,MAAM,QAAQ0K,GAAKA,EAAE1I,QAG1BM,KAAKgF,OAAOkC,UAAU,QACjB5H,KAAK8S,GACLhL,QAAQC,OAAO,QACfF,KAAK,KAAK,CAACiB,EAAGN,IAAMA,GAAK4J,EAAec,GAAiB,IACzDrL,KAAK,IAAKhC,EAAc,GACxBgC,KAAK,KAAM,SACXzJ,MAAM,YAAa,QACnBwG,MAAKkE,GAAKA,EAAElE,MACrB,EAEAlB,cAAAA,GACIhD,KAAKqF,kBAAoBrF,KAAKqF,iBAC9BrF,KAAK+C,qBAAuB/C,KAAKqF,iBAAmB,sBAAwB,uBACxErF,KAAKqF,kBACLsN,MAAM,4FACd,ICtjER,MAAM,IAA2B,OAAgB,GAAQ,CAAC,CAAC,SAAS,IAAQ,CAAC,YAAY,qBAEzF,UJgDA,IACE7S,KAAM,MAEN8S,WAAY,CACVC,QAAO,EACPC,YAAWA,IAGbxT,KAAMA,KAAA,CACJ9B,QAAQ,IAGVoE,KAAAA,GACE,MAAM7F,GAAQiG,EAAAA,EAAAA,IAAI,IACZ7F,GAAO6F,EAAAA,EAAAA,IAAI,IAEXjE,GAAUiE,EAAAA,EAAAA,IAAI,CAAC,GACfhE,GAAWgE,EAAAA,EAAAA,IAAI,CAAC,GAChB9D,GAAe8D,EAAAA,EAAAA,IAAI,CAAC,GACpB5D,GAAe4D,EAAAA,EAAAA,IAAI,CAAC,GAEpB5G,GAAc4G,EAAAA,EAAAA,IAAI,QAElBkG,EAAYC,GACT,IAAI/H,SAAQ,CAACC,EAASC,KAC3BQ,EAAAA,IAAQqH,GAAIpH,MAAKzB,IACfe,EAAQf,EAAK,IACZgC,OAAMC,IACPC,QAAQD,MAAM,8BAA+BA,GAC7CjB,EAAOiB,EAAM,GACb,IAIAwR,EAAaA,CAACC,EAAYlT,KAC9B,IAAImT,EAAUnT,EAAKoT,QAAQ,QAAS,IAChCC,EAAQ,EAGZ,MAAOH,EAAWI,SAASH,GACzBA,EAAW,GAAEnT,EAAKoT,QAAQ,QAAS,OAAOC,IAC1CA,IAGF,OAAOF,CAAO,EAGhB7S,QAAQiT,IAAI,CACJnL,EAAS,kBACTA,EAAS,wBAEdnH,MAAK,EAAEzB,EAAMgU,MACZvV,EAAQvC,MAAQ8D,EAEZvB,EAAQvC,OAASuC,EAAQvC,MAAMqK,UAAYyN,GAC7CvV,EAAQvC,MAAMqK,SAASC,SAAQC,IAC7B,MAAMwN,EAAiBD,EAAetS,MAAKhF,GAAQA,EAAKwX,UAAYzN,EAAQsC,WAAWC,OACjF+D,EAAakH,EAAiBA,EAAelH,YAAc,EACjEtG,EAAQsC,WAAWgE,WAAaA,CAAU,GAE9C,IAGJ,MAAM1K,EAAgBrC,IACpB,MAAM9D,EAAQuX,EAAWhX,EAAMP,MAAO8D,EAAKQ,MAC3C9B,EAASxC,MAAMA,GAAS8D,EAAKA,KAC7BpB,EAAa1C,MAAMA,GAAS8D,EAAKG,SACjCrB,EAAa5C,MAAMA,GAAS8D,EAAKC,KACjCxD,EAAMP,MAAMiY,QAAQjY,GAEpBJ,EAAYI,MAAQ,OAASA,CAAK,EAIpC,OADAkY,EAAAA,EAAAA,IAAQ,eAAgB/R,GACjB,CAAE5F,QAAOI,OAAM4B,UAASC,WAAUE,eAAcE,eAAchD,cAAa8M,WAAU6K,aAC9F,EAEAhT,QAAS,CACP5C,OAAAA,CAAQnB,GACN,MAAM2X,EAAU3T,KAAKjE,MAAM6X,QAAQ,EAAG,GACtC5T,KAAKjE,MAAM0X,WACNzT,KAAK7D,KAAKyX,OAAO5T,KAAK7D,KAAK0X,QAAQ7X,GAAO,IAE/CgE,KAAK7D,KAAKsX,WAAWE,GACrB3T,KAAKwG,WAAU,KAAQxG,KAAK5E,YAAc,OAASY,CAAG,GACxD,IKzIJ,MAAM,IAA2B,OAAgB,GAAQ,CAAC,CAAC,SAAS8X,KAEpE,U,qBCAA,IAAeC,EAAAA,GAAAA,MCDRC,eAAeC,KACpB,MAAMC,QAAsB,kCAE5BA,EAAcC,KAAK,CACjBC,OAAQ,CACNC,SAAU,CAAC,iDAGjB,CCTAJ,MAEAK,EAAAA,EAAAA,IAAUC,IACPC,IAAIC,IACJC,MAAM,O,2+DCRLC,EAA2B,CAAC,EAGhC,SAASC,EAAoBC,GAE5B,IAAIC,EAAeH,EAAyBE,GAC5C,QAAqBE,IAAjBD,EACH,OAAOA,EAAaE,QAGrB,IAAIC,EAASN,EAAyBE,GAAY,CAGjDG,QAAS,CAAC,GAOX,OAHAE,EAAoBL,GAAUM,KAAKF,EAAOD,QAASC,EAAQA,EAAOD,QAASJ,GAGpEK,EAAOD,OACf,CAGAJ,EAAoBQ,EAAIF,E,WCzBxB,IAAIG,EAAW,GACfT,EAAoBU,EAAI,SAASzU,EAAQ0U,EAAUC,EAAIC,GACtD,IAAGF,EAAH,CAMA,IAAIG,EAAenD,IACnB,IAASzK,EAAI,EAAGA,EAAIuN,EAASjZ,OAAQ0L,IAAK,CACrCyN,EAAWF,EAASvN,GAAG,GACvB0N,EAAKH,EAASvN,GAAG,GACjB2N,EAAWJ,EAASvN,GAAG,GAE3B,IAJA,IAGI6N,GAAY,EACPpM,EAAI,EAAGA,EAAIgM,EAASnZ,OAAQmN,MACpB,EAAXkM,GAAsBC,GAAgBD,IAAarW,OAAOC,KAAKuV,EAAoBU,GAAGM,OAAM,SAAS3Z,GAAO,OAAO2Y,EAAoBU,EAAErZ,GAAKsZ,EAAShM,GAAK,IAChKgM,EAAS3B,OAAOrK,IAAK,IAErBoM,GAAY,EACTF,EAAWC,IAAcA,EAAeD,IAG7C,GAAGE,EAAW,CACbN,EAASzB,OAAO9L,IAAK,GACrB,IAAIoD,EAAIsK,SACET,IAAN7J,IAAiBrK,EAASqK,EAC/B,CACD,CACA,OAAOrK,CArBP,CAJC4U,EAAWA,GAAY,EACvB,IAAI,IAAI3N,EAAIuN,EAASjZ,OAAQ0L,EAAI,GAAKuN,EAASvN,EAAI,GAAG,GAAK2N,EAAU3N,IAAKuN,EAASvN,GAAKuN,EAASvN,EAAI,GACrGuN,EAASvN,GAAK,CAACyN,EAAUC,EAAIC,EAwB/B,C,eC7BA,IACII,EADAC,EAAW1W,OAAO2W,eAAiB,SAASC,GAAO,OAAO5W,OAAO2W,eAAeC,EAAM,EAAI,SAASA,GAAO,OAAOA,EAAIC,SAAW,EAQpIrB,EAAoBrE,EAAI,SAAS/U,EAAO0a,GAEvC,GADU,EAAPA,IAAU1a,EAAQwE,KAAKxE,IAChB,EAAP0a,EAAU,OAAO1a,EACpB,GAAoB,kBAAVA,GAAsBA,EAAO,CACtC,GAAW,EAAP0a,GAAa1a,EAAM2a,WAAY,OAAO3a,EAC1C,GAAW,GAAP0a,GAAoC,oBAAf1a,EAAMuF,KAAqB,OAAOvF,CAC5D,CACA,IAAI4a,EAAKhX,OAAOiX,OAAO,MACvBzB,EAAoB1J,EAAEkL,GACtB,IAAIE,EAAM,CAAC,EACXT,EAAiBA,GAAkB,CAAC,KAAMC,EAAS,CAAC,GAAIA,EAAS,IAAKA,EAASA,IAC/E,IAAI,IAAIS,EAAiB,EAAPL,GAAY1a,EAAyB,iBAAX+a,KAAyBV,EAAehC,QAAQ0C,GAAUA,EAAUT,EAASS,GACxHnX,OAAOoX,oBAAoBD,GAASzQ,SAAQ,SAAS7J,GAAOqa,EAAIra,GAAO,WAAa,OAAOT,EAAMS,EAAM,CAAG,IAI3G,OAFAqa,EAAI,WAAa,WAAa,OAAO9a,CAAO,EAC5CoZ,EAAoBxM,EAAEgO,EAAIE,GACnBF,CACR,C,eCxBAxB,EAAoBxM,EAAI,SAAS4M,EAASyB,GACzC,IAAI,IAAIxa,KAAOwa,EACX7B,EAAoB8B,EAAED,EAAYxa,KAAS2Y,EAAoB8B,EAAE1B,EAAS/Y,IAC5EmD,OAAOuX,eAAe3B,EAAS/Y,EAAK,CAAE2a,YAAY,EAAMC,IAAKJ,EAAWxa,IAG3E,C,eCPA2Y,EAAoBkC,EAAI,CAAC,EAGzBlC,EAAoBlU,EAAI,SAASqW,GAChC,OAAO3W,QAAQiT,IAAIjU,OAAOC,KAAKuV,EAAoBkC,GAAG7V,QAAO,SAAS+V,EAAU/a,GAE/E,OADA2Y,EAAoBkC,EAAE7a,GAAK8a,EAASC,GAC7BA,CACR,GAAG,IACJ,C,eCPApC,EAAoBqC,EAAI,SAASF,GAEhC,MAAO,8BACR,C,eCHAnC,EAAoBsC,SAAW,SAASH,GAGxC,C,eCJAnC,EAAoBxD,EAAI,WACvB,GAA0B,kBAAf+F,WAAyB,OAAOA,WAC3C,IACC,OAAOnX,MAAQ,IAAIoX,SAAS,cAAb,EAChB,CAAE,MAAO1W,GACR,GAAsB,kBAAX2W,OAAqB,OAAOA,MACxC,CACA,CAPuB,E,eCAxBzC,EAAoB8B,EAAI,SAASV,EAAKzW,GAAQ,OAAOH,OAAOkY,UAAUC,eAAepC,KAAKa,EAAKzW,EAAO,C,eCAtG,IAAIiY,EAAa,CAAC,EACdC,EAAoB,wBAExB7C,EAAoB8C,EAAI,SAASC,EAAKC,EAAM3b,EAAK8a,GAChD,GAAGS,EAAWG,GAAQH,EAAWG,GAAK5P,KAAK6P,OAA3C,CACA,IAAIC,EAAQC,EACZ,QAAW/C,IAAR9Y,EAEF,IADA,IAAI8b,EAAUpR,SAASqR,qBAAqB,UACpClQ,EAAI,EAAGA,EAAIiQ,EAAQ3b,OAAQ0L,IAAK,CACvC,IAAImQ,EAAIF,EAAQjQ,GAChB,GAAGmQ,EAAEC,aAAa,QAAUP,GAAOM,EAAEC,aAAa,iBAAmBT,EAAoBxb,EAAK,CAAE4b,EAASI,EAAG,KAAO,CACpH,CAEGJ,IACHC,GAAa,EACbD,EAASlR,SAASwR,cAAc,UAEhCN,EAAOO,QAAU,QACjBP,EAAOQ,QAAU,IACbzD,EAAoB0D,IACvBT,EAAOU,aAAa,QAAS3D,EAAoB0D,IAElDT,EAAOU,aAAa,eAAgBd,EAAoBxb,GAExD4b,EAAOnV,IAAMiV,GAEdH,EAAWG,GAAO,CAACC,GACnB,IAAIY,EAAmB,SAASC,EAAMjO,GAErCqN,EAAOa,QAAUb,EAAOpX,OAAS,KACjCkY,aAAaN,GACb,IAAIO,EAAUpB,EAAWG,GAIzB,UAHOH,EAAWG,GAClBE,EAAOgB,YAAchB,EAAOgB,WAAWC,YAAYjB,GACnDe,GAAWA,EAAQ9S,SAAQ,SAAS0P,GAAM,OAAOA,EAAGhL,EAAQ,IACzDiO,EAAM,OAAOA,EAAKjO,EACtB,EACI6N,EAAUU,WAAWP,EAAiBQ,KAAK,UAAMjE,EAAW,CAAEjS,KAAM,UAAWlC,OAAQiX,IAAW,MACtGA,EAAOa,QAAUF,EAAiBQ,KAAK,KAAMnB,EAAOa,SACpDb,EAAOpX,OAAS+X,EAAiBQ,KAAK,KAAMnB,EAAOpX,QACnDqX,GAAcnR,SAASsS,KAAKC,YAAYrB,EApCkB,CAqC3D,C,eCxCAjD,EAAoB1J,EAAI,SAAS8J,GACX,qBAAXmE,QAA0BA,OAAOC,aAC1Cha,OAAOuX,eAAe3B,EAASmE,OAAOC,YAAa,CAAE5d,MAAO,WAE7D4D,OAAOuX,eAAe3B,EAAS,aAAc,CAAExZ,OAAO,GACvD,C,eCNAoZ,EAAoByE,EAAI,G,eCKxB,IAAIC,EAAkB,CACrB,IAAK,GAGN1E,EAAoBkC,EAAEvN,EAAI,SAASwN,EAASC,GAE1C,IAAIuC,EAAqB3E,EAAoB8B,EAAE4C,EAAiBvC,GAAWuC,EAAgBvC,QAAWhC,EACtG,GAA0B,IAAvBwE,EAGF,GAAGA,EACFvC,EAASjP,KAAKwR,EAAmB,QAC3B,CAGL,IAAIC,EAAU,IAAIpZ,SAAQ,SAASC,EAASC,GAAUiZ,EAAqBD,EAAgBvC,GAAW,CAAC1W,EAASC,EAAS,IACzH0W,EAASjP,KAAKwR,EAAmB,GAAKC,GAGtC,IAAI7B,EAAM/C,EAAoByE,EAAIzE,EAAoBqC,EAAEF,GAEpDxV,EAAQ,IAAIkY,MACZC,EAAe,SAASlP,GAC3B,GAAGoK,EAAoB8B,EAAE4C,EAAiBvC,KACzCwC,EAAqBD,EAAgBvC,GACX,IAAvBwC,IAA0BD,EAAgBvC,QAAWhC,GACrDwE,GAAoB,CACtB,IAAII,EAAYnP,IAAyB,SAAfA,EAAM1H,KAAkB,UAAY0H,EAAM1H,MAChE8W,EAAUpP,GAASA,EAAM5J,QAAU4J,EAAM5J,OAAO8B,IACpDnB,EAAMsY,QAAU,iBAAmB9C,EAAU,cAAgB4C,EAAY,KAAOC,EAAU,IAC1FrY,EAAMzB,KAAO,iBACbyB,EAAMuB,KAAO6W,EACbpY,EAAMuY,QAAUF,EAChBL,EAAmB,GAAGhY,EACvB,CAEF,EACAqT,EAAoB8C,EAAEC,EAAK+B,EAAc,SAAW3C,EAASA,EAE/D,CAEH,EAUAnC,EAAoBU,EAAE/L,EAAI,SAASwN,GAAW,OAAoC,IAA7BuC,EAAgBvC,EAAgB,EAGrF,IAAIgD,EAAuB,SAASC,EAA4B1a,GAC/D,IAKIuV,EAAUkC,EALVxB,EAAWjW,EAAK,GAChB2a,EAAc3a,EAAK,GACnB4a,EAAU5a,EAAK,GAGIwI,EAAI,EAC3B,GAAGyN,EAAS4E,MAAK,SAASlY,GAAM,OAA+B,IAAxBqX,EAAgBrX,EAAW,IAAI,CACrE,IAAI4S,KAAYoF,EACZrF,EAAoB8B,EAAEuD,EAAapF,KACrCD,EAAoBQ,EAAEP,GAAYoF,EAAYpF,IAGhD,GAAGqF,EAAS,IAAIrZ,EAASqZ,EAAQtF,EAClC,CAEA,IADGoF,GAA4BA,EAA2B1a,GACrDwI,EAAIyN,EAASnZ,OAAQ0L,IACzBiP,EAAUxB,EAASzN,GAChB8M,EAAoB8B,EAAE4C,EAAiBvC,IAAYuC,EAAgBvC,IACrEuC,EAAgBvC,GAAS,KAE1BuC,EAAgBvC,GAAW,EAE5B,OAAOnC,EAAoBU,EAAEzU,EAC9B,EAEIuZ,EAAqBC,KAAK,oCAAsCA,KAAK,qCAAuC,GAChHD,EAAmBtU,QAAQiU,EAAqBf,KAAK,KAAM,IAC3DoB,EAAmBrS,KAAOgS,EAAqBf,KAAK,KAAMoB,EAAmBrS,KAAKiR,KAAKoB,G,ICpFvF,IAAIE,EAAsB1F,EAAoBU,OAAEP,EAAW,CAAC,MAAM,WAAa,OAAOH,EAAoB,KAAO,IACjH0F,EAAsB1F,EAAoBU,EAAEgF,E","sources":["webpack://geo-info-graphics-v1/./src/App.vue","webpack://geo-info-graphics-v1/./src/components/home.vue","webpack://geo-info-graphics-v1/./src/components/home.vue?2f3e","webpack://geo-info-graphics-v1/./src/components/instance.vue","webpack://geo-info-graphics-v1/./src/components/instance.vue?e797","webpack://geo-info-graphics-v1/./src/App.vue?7ccd","webpack://geo-info-graphics-v1/./src/plugins/vuetify.js","webpack://geo-info-graphics-v1/./src/plugins/webfontloader.js","webpack://geo-info-graphics-v1/./src/main.js","webpack://geo-info-graphics-v1/webpack/bootstrap","webpack://geo-info-graphics-v1/webpack/runtime/chunk loaded","webpack://geo-info-graphics-v1/webpack/runtime/create fake namespace object","webpack://geo-info-graphics-v1/webpack/runtime/define property getters","webpack://geo-info-graphics-v1/webpack/runtime/ensure chunk","webpack://geo-info-graphics-v1/webpack/runtime/get javascript chunk filename","webpack://geo-info-graphics-v1/webpack/runtime/get mini-css chunk filename","webpack://geo-info-graphics-v1/webpack/runtime/global","webpack://geo-info-graphics-v1/webpack/runtime/hasOwnProperty shorthand","webpack://geo-info-graphics-v1/webpack/runtime/load script","webpack://geo-info-graphics-v1/webpack/runtime/make namespace object","webpack://geo-info-graphics-v1/webpack/runtime/publicPath","webpack://geo-info-graphics-v1/webpack/runtime/jsonp chunk loading","webpack://geo-info-graphics-v1/webpack/startup"],"sourcesContent":["<template>\r\n  <v-app>\r\n    <v-main>\r\n      <v-app-bar :elevation=\"2\">\r\n        <v-app-bar-title>Geo-Info Graphics WebUI</v-app-bar-title>\r\n        <v-app-bar-nav-icon @click=\"drawer = !drawer\"></v-app-bar-nav-icon>\r\n\r\n        <template v-slot:extension>\r\n          <v-tabs v-model=\"currentItem\" fixed-tabs>\r\n            <v-tab :value=\"'home'\">\r\n              <v-icon>mdi-home</v-icon>\r\n            </v-tab>\r\n\r\n            <v-tab v-for=\"item in items\" :key=\"item\" :value=\"'tab-' + item\">\r\n              {{ item }}\r\n            </v-tab>\r\n\r\n            <v-menu v-if=\"more.length\">\r\n              <template v-slot:activator=\"{ props }\">\r\n                <v-btn class=\"align-self-center me-4\" height=\"100%\" width=\"fit-content\" rounded=\"0\" variant=\"plain\"\r\n                  v-bind=\"props\">\r\n                  <v-icon>mdi-menu-down</v-icon>\r\n                </v-btn>\r\n              </template>\r\n\r\n              <v-list class=\"bg-grey-lighten-3\">\r\n                <v-list-item v-for=\"item in more\" :key=\"item\" @click=\"addItem(item)\">\r\n                  {{ item }}\r\n                </v-list-item>\r\n              </v-list>\r\n            </v-menu>\r\n          </v-tabs>\r\n        </template>\r\n      </v-app-bar>\r\n\r\n      <v-window v-model=\"currentItem\" style=\"height: 100%; width: 100%;\">\r\n        <v-window-item :value=\"'home'\" style=\"display: flex; height: 100%; width: 100%;\">\r\n          <homeTab></homeTab>\r\n        </v-window-item>\r\n\r\n        <v-window-item v-for=\"item in items.concat(more)\" :key=\"item\" :value=\"'tab-' + item\"\r\n          style=\"display: flex; height: 100%; width: 100%;\">\r\n          <instanceTab :value=\"item\" :geoData=\"geoData\" :infoData=\"infoData[item]\" :isNumerical=\"infoDataType[item] == 'numerical'\" :propName=\"infoDataName[item]\"></instanceTab>\r\n        </v-window-item>\r\n      </v-window>\r\n\r\n    </v-main>\r\n  </v-app>\r\n</template>\r\n\r\n<script>\r\nimport * as d3 from 'd3';\r\nimport { ref, provide } from 'vue';\r\n\r\nimport homeTab from './components/home.vue'\r\nimport instanceTab from './components/instance.vue'\r\n\r\nexport default {\r\n  name: 'App',\r\n\r\n  components: {\r\n    homeTab,\r\n    instanceTab\r\n  },\r\n\r\n  data: () => ({\r\n    drawer: true,\r\n  }),\r\n\r\n  setup() {\r\n    const items = ref([]);\r\n    const more = ref([]);\r\n\r\n    const geoData = ref({});\r\n    const infoData = ref({});\r\n    const infoDataType = ref({});\r\n    const infoDataName = ref({})\r\n\r\n    const currentItem = ref('home');\r\n\r\n    const loadJson = (na) => {\r\n      return new Promise((resolve, reject) => {\r\n        d3.json(na).then(data => {\r\n          resolve(data);\r\n        }).catch(error => {\r\n          console.error('Error loading GeoJSON data:', error);\r\n          reject(error);\r\n        });\r\n      });\r\n    };\r\n\r\n    const uniqueName = (namesArray, name) => {\r\n      let newName = name.replace(/\\..+$/, '');\r\n      let count = 1;\r\n\r\n      // 检查数组中是否包含该名字，如果包含，则在名字后添加后缀\r\n      while (namesArray.includes(newName)) {\r\n        newName = `${name.replace(/\\..+$/, '')}-${count}`;\r\n        count++;\r\n      }\r\n\r\n      return newName;\r\n    }\r\n\r\n    Promise.all([\r\n            loadJson('europe.geojson'),\r\n            loadJson('olympics_data.json')\r\n        ])\r\n      .then(([data, annotationData]) => {\r\n        geoData.value = data;\r\n\r\n        if (geoData.value && geoData.value.features && annotationData) {\r\n          geoData.value.features.forEach(feature => {\r\n            const annotationInfo = annotationData.find(item => item.country === feature.properties.NAME);\r\n            const annotation = annotationInfo ? annotationInfo.annotation : -1;\r\n            feature.properties.annotation = annotation;\r\n          });\r\n        }\r\n      });\r\n\r\n    const loadInfoData = (data) => {\r\n      const value = uniqueName(items.value, data.name)\r\n      infoData.value[value] = data.data;\r\n      infoDataType.value[value] = data.datatype;\r\n      infoDataName.value[value] = data.prop;\r\n      items.value.unshift(value);\r\n\r\n      currentItem.value = 'tab-' + value;\r\n    };\r\n\r\n    provide('loadInfoData', loadInfoData);\r\n    return { items, more, geoData, infoData, infoDataType, infoDataName, currentItem, loadJson, uniqueName };\r\n  },\r\n\r\n  methods: {\r\n    addItem(item) {\r\n      const removed = this.items.splice(-1, 1)\r\n      this.items.unshift(\r\n        ...this.more.splice(this.more.indexOf(item), 1),\r\n      )\r\n      this.more.unshift(...removed)\r\n      this.$nextTick(() => { this.currentItem = 'tab-' + item })\r\n    },\r\n  },\r\n}\r\n</script>\r\n","<template>\r\n    <v-container>\r\n        <v-row>\r\n            <h1>Home</h1>\r\n        </v-row>\r\n\r\n        <v-row style=\"margin-top: 34px;\">\r\n            <v-divider></v-divider>\r\n        </v-row>\r\n\r\n        <v-row style=\"margin-top: 30px;\">\r\n            <p>Start a new project form a JSON:</p>\r\n        </v-row>\r\n\r\n        <!-- <v-row style=\"margin-top: 15px;\">\r\n            <u @click=\"openDialog()\">Upload a JSON</u>\r\n        </v-row>\r\n\r\n        <v-row style=\"margin-top: 30px;\">\r\n            <v-divider></v-divider>\r\n        </v-row>\r\n\r\n        <v-row style=\"margin-top: 30px;\">\r\n            <p>Recent project:</p>\r\n        </v-row>\r\n\r\n        <v-row></v-row> -->\r\n        <v-row style=\"margin-top: 30px;\">\r\n            <v-file-input v-model=\"files\" label=\"Choose a JSON file\" accept=\".json\" @change=\"uploadFile\"></v-file-input>\r\n        </v-row>\r\n\r\n        <v-row v-if=\"uploaded\">\r\n            <v-col>Country: {{ Object.keys(infoData.data).length }} rows</v-col>\r\n            <v-col></v-col>\r\n        </v-row>\r\n\r\n        <v-row v-if=\"uploaded\">\r\n            <v-col>Prop: '{{ infoData.prop }}'</v-col>\r\n            <v-col>\r\n                <v-select label=\"prop data type\" v-model=\"infoData.datatype\"\r\n                    :items=\"['numerical', 'nominal']\"></v-select>\r\n            </v-col>\r\n\r\n\r\n        </v-row>\r\n\r\n        <v-row v-if=\"uploaded\" style=\"margin-bottom: 12px;\">\r\n            <v-divider></v-divider>\r\n        </v-row>\r\n\r\n\r\n        <v-row>\r\n            <v-btn color=\"primary\" @click=\"createInstance\" :disabled=\"!uploaded\">Create</v-btn>\r\n            <v-btn @click=\"clear\" style=\"margin-left: 16px;\">CLEAR</v-btn>\r\n        </v-row>\r\n    </v-container>\r\n\r\n    <!-- <v-dialog v-model=\"dialog\" max-width=\"500px\">\r\n        <template>\r\n            <u @click=\"openDialog\" style=\"cursor: pointer;\">Upload a JSON</u>\r\n        </template>\r\n<v-card>\r\n    <v-card-title>Upload JSON Files</v-card-title>\r\n    <v-card-text>\r\n        <v-file-input v-model=\"files\" label=\"Choose a JSON file\" accept=\".json\" @change=\"uploadFile\"></v-file-input>\r\n\r\n    </v-card-text>\r\n    <v-card-actions>\r\n        <v-btn color=\"primary\" @click=\"createInstance\" :disabled=\"!uploaded\">Create</v-btn>\r\n        <v-btn @click=\"dialog = false\">Close</v-btn>\r\n    </v-card-actions>\r\n</v-card>\r\n</v-dialog> -->\r\n</template>\r\n\r\n<script>\r\nimport * as d3 from 'd3';\r\nimport { inject } from 'vue';\r\n\r\nexport default {\r\n    name: 'homeTab',\r\n\r\n    data() {\r\n        return {\r\n            files: [],\r\n            infoData: {},\r\n\r\n            uploaded: false,\r\n        };\r\n    },\r\n    methods: {\r\n        clear() {\r\n            this.files = [];\r\n            this.infoData = {};\r\n            this.targetKey = 'NaN'\r\n            this.uploaded = false;\r\n        },\r\n\r\n        readFile(file) {\r\n            return new Promise((resolve, reject) => {\r\n                const reader = new FileReader();\r\n                reader.onload = function (e) {\r\n                    const fileContents = e.target.result;\r\n                    d3.json(fileContents)\r\n                        .then(data => {\r\n                            const keys = Object.keys(data[0]);\r\n                            const targetKey = keys.find(key => key !== 'country');\r\n\r\n                            const infoData = data.reduce((acc, cur) => {\r\n                                acc[cur['country']] = cur[targetKey];\r\n                                return acc;\r\n                            }, {});\r\n                            const result = {\r\n                                \"name\": file.name,\r\n                                \"prop\": targetKey,\r\n                                \"datatype\": isNaN(Object.values(data[0])[1]) ? 'nominal' : 'numerical',\r\n                                \"data\": infoData\r\n                            };\r\n\r\n                            resolve(result);\r\n                        })\r\n                        .catch(error => {\r\n                            console.error(error);\r\n                            reject(error);\r\n                        });\r\n                };\r\n                reader.readAsDataURL(file);\r\n            });\r\n        },\r\n\r\n        uploadFile() {\r\n            if (this.files.length === 0) {\r\n                console.log(\"No files to upload.\");\r\n                return;\r\n            }\r\n\r\n            const file = this.files[0]; // 获取第一个文件\r\n\r\n            this.readFile(file)\r\n                .then(result => {\r\n                    this.infoData = result;\r\n                    this.uploaded = true;\r\n                })\r\n                .catch(error => {\r\n                    this.uploaded = false;\r\n                    console.error(error);\r\n                });\r\n        },\r\n\r\n        createInstance() {\r\n            this.loadInfoData(this.infoData);\r\n        }\r\n    },\r\n\r\n    setup() {\r\n        const loadInfoData = inject('loadInfoData');\r\n\r\n        return { loadInfoData };\r\n    }\r\n}\r\n</script>\r\n\r\n<style scoped>\r\nh1 {\r\n    font-size: 56px;\r\n}\r\n</style>","import { render } from \"./home.vue?vue&type=template&id=43a3dd6b&scoped=true\"\nimport script from \"./home.vue?vue&type=script&lang=js\"\nexport * from \"./home.vue?vue&type=script&lang=js\"\n\nimport \"./home.vue?vue&type=style&index=0&id=43a3dd6b&scoped=true&lang=css\"\n\nimport exportComponent from \"../../node_modules/vue-loader/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render],['__scopeId',\"data-v-43a3dd6b\"]])\n\nexport default __exports__","<template>\r\n    <div style=\"display: flex; height: 100%; width: 100%;\">\r\n        <v-card elevation=\"2\" height=\"100%\" width=\"35%\" ref=\"selectorCard\">\r\n            <v-container style=\"display: flex; overflow-y: auto;\" :id=\"value + '-seContainer'\">\r\n                <v-expansion-panels>\r\n                    <v-expansion-panel>\r\n                        <v-expansion-panel-title>\r\n                            Basic Map Representations\r\n                        </v-expansion-panel-title>\r\n\r\n                        <v-expansion-panel-text>\r\n                            <v-container class=\"container\">\r\n                                <v-row>\r\n                                    <v-col class=\"element\" @click=\"setRepresentation(myType['Political Map'])\">\r\n                                        Political Map\r\n                                        <v-img :src=\"require('../assets/PoliticalMap.svg')\" contain />\r\n                                    </v-col>\r\n\r\n                                    <!-- <v-col class=\"element\" @click=\"setRepresentation(myType['Topographic Map'])\">\r\n                                        Topographic Map\r\n                                        <v-img :src=\"require('../assets/TopographicMap.svg')\" contain />\r\n                                    </v-col> -->\r\n                                    <v-col class=\"element\" @click=\"setRepresentation(myType['Shape-based Map'])\">\r\n                                        Shape-based Map\r\n                                        <v-img :src=\"require('../assets/Shape-basedMap.svg')\" contain />\r\n                                    </v-col>\r\n                                </v-row>\r\n\r\n                                <!-- <v-row>\r\n                                    <v-col class=\"element\" @click=\"setRepresentation(myType['Shape-based Map'])\">\r\n                                        Shape-based Map\r\n                                        <v-img :src=\"require('../assets/Shape-basedMap.svg')\" contain />\r\n                                    </v-col>\r\n\r\n                                    <v-col class=\"element\" @click=\"setRepresentation(myType['Street Map'])\">\r\n                                        Street Map\r\n                                        <v-img :src=\"require('../assets/StreetMap.svg')\" contain />\r\n                                    </v-col>\r\n                                </v-row> -->\r\n\r\n                                <v-row>\r\n                                    <v-col class=\"element\" @click=\"setRepresentation(myType['Grid Cartogram'])\">\r\n                                        Grid Cartogram\r\n                                        <v-img :src=\"require('../assets/GridCartogram.svg')\" contain />\r\n                                    </v-col>\r\n\r\n                                    <v-col></v-col>\r\n                                </v-row>\r\n                            </v-container>\r\n                        </v-expansion-panel-text>\r\n                    </v-expansion-panel>\r\n\r\n                    <v-expansion-panel>\r\n                        <v-expansion-panel-title>\r\n                            Map Projections\r\n                        </v-expansion-panel-title>\r\n\r\n                        <v-expansion-panel-text>\r\n                            <v-container class=\"container\">\r\n                                <v-row>\r\n                                    <v-col class=\"element\" @click=\"setProjection(myType['Mercator'])\">\r\n                                        Mercator\r\n                                        <v-img :src=\"require('../assets/mercator.svg')\" contain />\r\n                                    </v-col>\r\n\r\n                                    <v-col class=\"element\" @click=\"setProjection(myType['Equirectangular'])\">\r\n                                        Equirectangular\r\n                                        <v-img :src=\"require('../assets/equirectangular.svg')\" contain />\r\n                                    </v-col>\r\n                                </v-row>\r\n                            </v-container>\r\n                        </v-expansion-panel-text>\r\n                    </v-expansion-panel>\r\n\r\n                    <v-expansion-panel>\r\n                        <v-expansion-panel-title>\r\n                            Encoding Channels\r\n                        </v-expansion-panel-title>\r\n                        <v-expansion-panel-text>\r\n                            <v-container class=\"container\">\r\n                                <v-row>\r\n                                    <input type=\"button\" id=\"myButton\" v-model=ifDoubleEncodingText @click=\"doubleEncoding()\"/>\r\n                                </v-row>\r\n\r\n                                <v-row>\r\n                                    <div class=\"row-with-line\"></div>\r\n                                    <v-col class=\"element\" @click=\"setEncodingChannel(myType['Color (Luminance)'])\">\r\n                                        Color (Intensity)\r\n                                        <v-img :src=\"require('../assets/Color(Luminance).svg')\" contain />\r\n                                    </v-col>\r\n\r\n                                    <v-col class=\"element\" @click=\"setEncodingChannel(myType['Color (Hue)'])\">\r\n                                        Color (Hue)\r\n                                        <v-img :src=\"require('../assets/Color(Hue).svg')\" contain />\r\n                                    </v-col>\r\n                                </v-row>\r\n                                \r\n                                <v-row>\r\n                                    <div class=\"row-with-line\"></div>\r\n                                    <v-col class=\"element\" @click=\"setEncodingChannel(myType['3D Length'])\">\r\n                                        3D Length\r\n                                        <v-img :src=\"require('../assets/3DLength.svg')\" contain />\r\n                                    </v-col>\r\n\r\n                                    <v-col class=\"element\" @click=\"setEncodingChannel(myType['2D Length'])\">\r\n                                        2D Length\r\n                                        <v-img :src=\"require('../assets/BarChart.svg')\" contain />\r\n                                    </v-col>\r\n                                </v-row>\r\n\r\n                                <v-row>\r\n                                    <div class=\"row-with-line\"></div>\r\n                                    <v-col class=\"element\" @click=\"setEncodingChannel(myType['Quantity'])\">\r\n                                        Quantity\r\n                                        <v-img :src=\"require('../assets/Quantity.svg')\" contain />\r\n                                    </v-col>\r\n                                    <v-col class=\"element\" @click=\"setEncodingChannel(myType['Size'])\">\r\n                                        Size\r\n                                        <v-img :src=\"require('../assets/Size.svg')\" contain />\r\n                                    </v-col>\r\n                                </v-row>\r\n\r\n                                <v-row>\r\n                                    <div class=\"row-with-line\"></div>\r\n                                    <v-col class=\"element\" @click=\"setEncodingChannel(myType['Link (Line)'])\">\r\n                                        Tilt/Angle (Undirected)\r\n                                        <v-img :src=\"require('../assets/Link(Line).svg')\" contain />\r\n                                    </v-col>\r\n\r\n                                    <v-col class=\"element\" @click=\"setEncodingChannel(myType['Link (Arrow)'])\">\r\n                                        Tilt/Angle (Directed)\r\n                                        <v-img :src=\"require('../assets/Link(Arrow).svg')\" contain />\r\n                                    </v-col>\r\n                                </v-row>\r\n                                \r\n                                <v-row>\r\n                                    <div class=\"row-with-line\"></div>\r\n                                    <v-col class=\"element\" @click=\"setEncodingChannel(myType['Glyph'])\">\r\n                                        Glyph\r\n                                        <v-img :src=\"require('../assets/Glyph.svg')\" width=\"50%\" contain />\r\n                                    </v-col>\r\n                                </v-row>\r\n                                \r\n                            </v-container>\r\n                        </v-expansion-panel-text>\r\n                    </v-expansion-panel>\r\n                    <v-expansion-panel>\r\n                        <v-expansion-panel-title>\r\n                            Label Positions\r\n                        </v-expansion-panel-title>\r\n\r\n                        <v-expansion-panel-text>\r\n                            <v-container class=\"container\">\r\n                                <v-row>\r\n                                    <div class=\"row-with-line\"></div>\r\n                                    <v-col class=\"element\" @click=\"setLabelPosition(myType['Label Situated'])\">\r\n                                        Situated\r\n                                        <v-img :src=\"require('../assets/Situated.svg')\" contain />\r\n                                    </v-col>\r\n\r\n                                    <v-col></v-col>\r\n                                </v-row>\r\n\r\n                                <v-row>\r\n                                    <div class=\"row-with-line\"></div>\r\n                                    <v-col class=\"element\" @click=\"setLabelPosition(myType['Label Text'])\">\r\n                                        Text\r\n                                        <v-img :src=\"require('../assets/MatchedText.svg')\" contain />\r\n                                    </v-col>\r\n\r\n                                    <v-col class=\"element\" @click=\"setLabelPosition(myType['Label Icon'])\">\r\n                                        Icon\r\n                                        <v-img :src=\"require('../assets/MatchedIcon.svg')\" contain />\r\n                                    </v-col>\r\n                                </v-row>\r\n\r\n                                <v-row>\r\n                                    <div class=\"row-with-line\"></div>\r\n                                    <v-col class=\"element\" @click=\"setLabelPosition(myType['Label Color'])\">\r\n                                        Color\r\n                                        <v-img :src=\"require('../assets/MathchedColor.svg')\" contain />\r\n                                    </v-col>\r\n                                    <v-col></v-col>\r\n                                </v-row>\r\n\r\n                                <v-row>\r\n                                    <div class=\"row-with-line\"></div>\r\n                                    <v-col style=\"padding: 0;\">\r\n                                        <v-col class=\"element\"\r\n                                            @click=\"setLabelPosition(myType['Label Convenient'])\">\r\n                                            Convenient\r\n                                            <v-img :src=\"require('../assets/LinkedConvenient.svg')\" contain />\r\n                                        </v-col>\r\n\r\n                                        <v-col class=\"element\" @click=\"setLabelPosition(myType['Label Aligned'])\">\r\n                                            Aligned\r\n                                            <v-img :src=\"require('../assets/LinkedAligned.svg')\" contain />\r\n                                        </v-col>\r\n\r\n                                    </v-col>\r\n\r\n                                    <v-col class=\"element\" @click=\"setLabelPosition(myType['Label Ordered'])\">\r\n                                        Ordered\r\n                                        <v-img :src=\"require('../assets/LinkedOrdered.svg')\" contain />\r\n                                    </v-col>\r\n                                </v-row>\r\n                            </v-container>\r\n                        </v-expansion-panel-text>\r\n                    </v-expansion-panel>\r\n                    <v-expansion-panel>\r\n                        <v-expansion-panel-title>\r\n                            Highlight Techniques\r\n                        </v-expansion-panel-title>\r\n\r\n                        <v-expansion-panel-text>\r\n                            <v-container class=\"container\">\r\n                                <v-row>\r\n                                    <v-col class=\"element\" @click=\"setHighlight(myType['Light'])\">\r\n                                        Light\r\n                                        <v-img :src=\"require('../assets/HighlightLight.svg')\" contain />\r\n                                    </v-col>\r\n\r\n                                    <v-col class=\"element\" @click=\"setHighlight(myType['Color'])\">\r\n                                        Color\r\n                                        <v-img :src=\"require('../assets/HighlightColor.svg')\" contain />\r\n                                    </v-col>\r\n                                </v-row>\r\n\r\n                                <v-row>\r\n                                    <v-col class=\"element\" @click=\"setHighlight(myType['Map Pin'])\">\r\n                                        Map Pin\r\n                                        <v-img :src=\"require('../assets/HighlightMappin.svg')\" contain />\r\n                                    </v-col>\r\n\r\n                                    <v-col class=\"element\" @click=\"setHighlight(myType['3D Transformation'])\">\r\n                                        3D Transformation\r\n                                        <v-img :src=\"require('../assets/Highlight3d.svg')\" contain />\r\n                                    </v-col>\r\n                                </v-row>\r\n\r\n                                <v-row>\r\n                                    <v-col class=\"element\" @click=\"setHighlight(myType['Enlarged Portions'])\">\r\n                                        Enlarged Portions\r\n                                        <v-img :src=\"require('../assets/HighlightEnlarge.svg')\" contain />\r\n                                    </v-col>\r\n                                    <v-col class=\"element\" @click=\"setHighlight(myType['Edge Stroke'])\">\r\n                                        Contour\r\n                                        <v-img :src=\"require('../assets/HighlightEdgeStroking.svg')\" contain />\r\n                                    </v-col>\r\n                                </v-row>\r\n                            </v-container>\r\n                        </v-expansion-panel-text>\r\n                    </v-expansion-panel>\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n                </v-expansion-panels>\r\n            </v-container>\r\n        </v-card>\r\n\r\n        <v-container style=\"width: 100%; height: 100%; margin-left: 0; margin-right: 0\" :ref=\"'d3Panel'\">\r\n            <v-row>\r\n                <v-col ref=\"legendCol\">\r\n                    <svg :class=\"value + '-legend'\" style=\"height: 40px; width: 100%;\"></svg>\r\n                </v-col>\r\n                <v-col></v-col>\r\n                <v-col></v-col>\r\n                \r\n                \r\n            </v-row>\r\n            <svg :class=\"value + '-svg'\" style=\"width: 100%; height: 100%;\"></svg>\r\n            <!-- <svg :class=\"value + '-legend'\" style=\"position: absolute; top: 30px; right: 20px; width: 200px; height: 40px; z-index: 2;\"></svg> -->\r\n            <svg :id=\"value + '-enlargedView'\"\r\n                style=\"width: 200px; height: 400px; position: absolute; top: 10px; right: 10px;\"></svg>\r\n        </v-container>\r\n    </div>\r\n\r\n    <v-dialog v-model=\"errorDialog\" width=\"auto\">\r\n        <v-card max-width=\"400\" prepend-icon=\"mdi-alert-circle-outline\" :title=\"errorTitle\" :text=\"errorMessage\">\r\n            <template v-slot:actions>\r\n                <v-btn class=\"ms-auto\" text=\"Ok\" @click=\"errorDialog = false\"></v-btn>\r\n            </template>\r\n        </v-card>\r\n    </v-dialog>\r\n</template>\r\n\r\n<script>\r\nimport * as d3 from 'd3';\r\n\r\nexport default {\r\n    name: 'instanceTab',\r\n\r\n    props: {\r\n        geoData: {\r\n            type: Object,\r\n            required: true\r\n        },\r\n\r\n        infoData: {\r\n            type: Object,\r\n            required: true\r\n        },\r\n\r\n        value: {\r\n            type: String,\r\n            required: true\r\n        },\r\n\r\n        propName: {\r\n            type: String,\r\n            required: false\r\n        },\r\n\r\n        isNumerical: {\r\n            type: Boolean,\r\n            required: true\r\n        }\r\n    },\r\n\r\n    data: () => ({\r\n        representationType: 0,\r\n        projectionType: 0,\r\n        labelPositionType: -1,\r\n        encodingChannelType: -1,\r\n        highLightType: -1,\r\n\r\n        worldPopulation: 0,\r\n        mostPopulation: 0,\r\n\r\n        svg: null,\r\n        legend: null,\r\n\r\n        mapWidth: 1000,\r\n        mapHeight: 800,\r\n\r\n        legendWidth: 200,\r\n\r\n        defaultColor: '#cccccc',\r\n\r\n        errorTitle: '',\r\n        errorMessage: '',\r\n        errorDialog: false,\r\n\r\n        ifDoubleEncoding: false,\r\n        ifDoubleEncodingText: 'Double Encoding: OFF',\r\n        preEncoding: -1,\r\n\r\n        encodingChannel: () => { },\r\n        representation: () => { },\r\n        LabelPosition: () => { },\r\n\r\n        colorFunctionL: () => { },\r\n\r\n        highLights: [],\r\n\r\n        myType: {\r\n            \"Political Map\": 0,\r\n            \"Topographic Map\": 1,\r\n            \"Shape-based Map\": 2,\r\n            \"Street Map\": 3,\r\n            \"Grid Cartogram\": 4,\r\n\r\n\r\n            \"Mercator\": 0,\r\n            \"Equirectangular\": 1,\r\n\r\n            \"Light\": 0,\r\n            \"Color\": 1,\r\n            \"Map Pin\": 2,\r\n            \"3D Transformation\": 3,\r\n            \"Enlarged Portions\": 4,\r\n            \"Edge stroke\": 5,\r\n\r\n            \"Label Situated\": 0,\r\n            \"Label Text\": 1,\r\n            \"Label Icon\": 2,\r\n            \"Label Color\": 3,\r\n            \"Label Convenient\": 4,\r\n            \"Label Aligned\": 5,\r\n            \"Label Ordered\": 6,\r\n\r\n            \"Color (Luminance)\": 0,\r\n            \"Color (Hue)\": 1,\r\n            \"3D Length\": 2,\r\n            \"Glyph\": 3,\r\n            \"Link (Line)\": 4,\r\n            \"Link (Arrow)\": 5,\r\n            \"Size\": 6,\r\n            \"Quantity\": 7,\r\n            \"2D Length\": 8,\r\n\r\n        },\r\n    }),\r\n\r\n    mounted() {\r\n        console.log(this.value, \"created, numerical:\", this.isNumerical);\r\n        console.log(this.geoData);\r\n\r\n        let worldPopulation = 0;\r\n        if (this.geoData && this.geoData.features && this.infoData) {\r\n            this.geoData.features.forEach(feature => {\r\n                const curPopulation = this.getPopulation(feature)\r\n                worldPopulation += curPopulation;\r\n                this.mostPopulation = this.mostPopulation < curPopulation ? curPopulation : this.mostPopulation;\r\n            });\r\n\r\n            console.log(this.mostPopulation);\r\n        }\r\n        this.worldPopulation = worldPopulation;\r\n\r\n        const cardEl = this.$refs.selectorCard.$el;\r\n        const legendColEl = this.$refs.legendCol.$el;\r\n\r\n        this.$nextTick(() => {\r\n            const height = cardEl.clientHeight;\r\n\r\n            const seContainer = document.getElementById(this.value + '-seContainer');\r\n            seContainer.style.maxHeight = (0.99 * height) + \"px\";\r\n\r\n            this.legendWidth = 0.87 * legendColEl.clientWidth;\r\n\r\n            this.initMap();\r\n        });\r\n    },\r\n\r\n    methods: {\r\n        initMap() {\r\n            // 获得html中的地图（svg）标签\r\n            this.svg = d3.select(\".\" + this.value + \"-svg\");\r\n            this.legend = d3.select(\".\" + this.value + \"-legend\");\r\n\r\n            //根据窗口大小设置地图的大小\r\n            this.mapWidth = this.svg.node().getBoundingClientRect().width;\r\n            this.mapHeight = 0.8 * this.svg.node().getBoundingClientRect().height;\r\n\r\n            this.encodingChannel = () => {\r\n                this.svg.selectAll('path').attr(\"fill\", this.defaultColor);\r\n            };\r\n\r\n            this.representation = () => {\r\n                this.svg.selectAll('path')\r\n                    .data(this.geoData.features)\r\n                    .enter()\r\n                    .append('path')\r\n                    .attr('d', this.geoPath)\r\n                    .attr('stroke', '#ffffff');\r\n            };\r\n\r\n            // console.log(this.mapWidth, this.mapHeight);\r\n            this.setProjection(1);\r\n            this.drawSvg();\r\n        },\r\n        splitTextToLines(text, maxLineWidth) {\r\n            let words = text.split(' ');\r\n            let lines = [];\r\n            let currentLine = words[0];\r\n\r\n            for (let i = 1; i < words.length; i++) {\r\n                if ((currentLine + ' ' + words[i]).length < maxLineWidth) {\r\n                    currentLine += ' ' + words[i];\r\n                } else {\r\n                    lines.push(currentLine);\r\n                    currentLine = words[i];\r\n                }\r\n            }\r\n            lines.push(currentLine); // Add the last line\r\n\r\n            return lines;\r\n        },\r\n\r\n        //重新绘制svg\r\n        drawSvg() {\r\n            // 移除现有的 SVG\r\n            this.svg.selectAll('*').remove();\r\n            d3.select('#' + this.value + '-enlargedView').selectAll('*').remove();\r\n\r\n            this.representation();\r\n            this.encodingChannel();\r\n            this.LabelPosition();\r\n\r\n            this.highLights.forEach(highLight => {\r\n                highLight();\r\n            });\r\n        },\r\n\r\n\r\n        loadJson(na) {\r\n            return new Promise((resolve, reject) => {\r\n                d3.json(na).then(data => {\r\n                    resolve(data);\r\n                }).catch(error => {\r\n                    console.error('Error loading GeoJSON data:', error);\r\n                    reject(error);\r\n                });\r\n            });\r\n        },\r\n\r\n        getPopulation(d) {\r\n            // console.log(name, this.infoData[name]);\r\n            return d && d.properties && d.properties.NAME && this.infoData[d.properties.NAME]\r\n                ? this.infoData[d.properties.NAME] : -1\r\n        },\r\n\r\n        showErrorDialog(title, msg) {\r\n            this.errorTitle = title;\r\n            this.errorMessage = msg;\r\n            this.errorDialog = true;\r\n        },\r\n\r\n        // 设置 Map Representation\r\n        setRepresentation(type) {\r\n            console.log(\"Representation:\", type)\r\n\r\n            if (type === this.myType['Political Map']) {\r\n                this.representationType = type;\r\n                this.representation = () => {\r\n                    this.svg.selectAll('path')\r\n                        .data(this.geoData.features)\r\n                        .enter()\r\n                        .append('path')\r\n                        .attr('d', this.geoPath)\r\n                        .attr('stroke', '#ffffff');\r\n                };\r\n            }\r\n\r\n            else if (type === this.myType['Topographic Map']) {\r\n                this.representationType = type;\r\n            }\r\n\r\n            else if (type === this.myType['Shape-based Map']) {\r\n                this.representationType = type;\r\n\r\n                this.representation = () => {\r\n                    // this.svg.selectAll('path')\r\n                    //     .data(this.geoData.features)\r\n                    //     .enter()\r\n                    //     .append('path')\r\n                    //     .attr('d', this.geoPath)\r\n                    //     .attr('stroke', '#ffffff');\r\n\r\n                    // 为地图上的每个国家绘制点阵图\r\n                    this.geoData.features.forEach(feature => {\r\n                        // 绘制点\r\n                        // 计算每个国家边界框内网格的行数和列数\r\n                        const bounds = d3.geoBounds(feature);\r\n                        const [left, bottom] = this.geoProjection(bounds[0]);\r\n                        const [right, top] = this.geoProjection(bounds[1]);\r\n                        const w = right - left;\r\n                        const h = bottom - top;\r\n                        const rows = Math.ceil(h / 15); // 假设每20像素一个点的行距\r\n                        const columns = Math.ceil(w / 15); // 假设每20像素一个点的列距\r\n                        const pointRadius = 3; // 点的半径大小\r\n\r\n                        // 生成特定国家边界框内的点\r\n                        const points = [];\r\n                        for (let i = 0; i < rows; i++) {\r\n                            for (let j = 0; j < columns; j++) {\r\n                                const x = left + j * (w / columns);\r\n                                const y = top + i * (h / rows);\r\n                                const point = this.geoProjection.invert([x, y]);\r\n                                if (d3.geoContains(feature, point)) {\r\n                                    points.push({ x: x, y: y, properties: feature.properties });\r\n                                }\r\n                            }\r\n                        }\r\n\r\n                        this.svg.append('g')\r\n                            .attr(\"fill\", \"black\")\r\n                            .attr(\"fill-opacity\", 0.6)\r\n                            .attr(\"stroke\", \"#fff\")\r\n                            .attr(\"stroke-width\", 0.5)\r\n                            .selectAll(\"circle\")\r\n                            .data(points)\r\n                            .join(\"circle\")\r\n                            .attr(\"cx\", d => d.x)\r\n                            .attr(\"cy\", d => d.y)\r\n                            .attr(\"r\", pointRadius);\r\n                    })\r\n                };\r\n            }\r\n\r\n            else if (type === this.myType['Street Map']) {\r\n                this.representationType = type;\r\n            }\r\n            else if (type === this.myType['Grid Cartogram']) {\r\n                this.representationType = type;\r\n                // this.svg.select('.grid-layer').remove();\r\n                // this.svg.select('defs').selectAll('clipPath').remove(); // 假设没有其他clipPath在使用\r\n\r\n                this.representation = () => {\r\n                    this.svg.selectAll('path')\r\n                        .data(this.geoData.features)\r\n                        .enter()\r\n                        .append('path')\r\n                        .attr('d', this.geoPath)\r\n                        .attr('stroke', '#ffffff');\r\n\r\n                    // 创建一个新的clipPath用于地图的轮廓\r\n                    const defs = this.svg.append('defs');\r\n                    defs.append('clipPath')\r\n                        .attr('id', 'clip-map')\r\n                        .append('path')\r\n                        .datum(this.geoData)\r\n                        .attr('d', this.geoPath);\r\n\r\n                    // 设置网格大小\r\n                    const gridSize = 30;\r\n\r\n                    // 创建网格层并应用clipPath\r\n                    const gridLayer = this.svg.append('g')\r\n                        .classed('grid-layer', true)\r\n                        .attr('clip-path', 'url(#clip-map)');\r\n\r\n                    // 计算网格线数量\r\n                    const numVerticalGrids = Math.ceil(this.mapWidth / gridSize);\r\n                    const numHorizontalGrids = Math.ceil(this.mapHeight / gridSize);\r\n\r\n                    // 绘制垂直网格线\r\n                    for (let i = 0; i < numVerticalGrids; i++) {\r\n                        gridLayer.append('line')\r\n                            .attr('x1', i * gridSize)\r\n                            .attr('x2', i * gridSize)\r\n                            .attr('y1', 0)\r\n                            .attr('y2', this.mapHeight)\r\n                            .style('stroke', 'black')\r\n                            .style('stroke-opacity', 0.3);\r\n                    }\r\n\r\n                    // 绘制水平网格线\r\n                    for (let i = 0; i < numHorizontalGrids; i++) {\r\n                        gridLayer.append('line')\r\n                            .attr('y1', i * gridSize)\r\n                            .attr('y2', i * gridSize)\r\n                            .attr('x1', 0)\r\n                            .attr('x2', this.mapWidth)\r\n                            .style('stroke', 'black')\r\n                            .style('stroke-opacity', 0.3);\r\n                    }\r\n                }\r\n\r\n\r\n            }\r\n\r\n            this.drawSvg();\r\n        },\r\n\r\n        // 设置 Map Projection\r\n        setProjection(type) {\r\n            console.log(\"Map Projection:\", type);\r\n\r\n            if (type === this.myType['Mercator']) {\r\n                this.projectionType = type;\r\n\r\n                this.geoProjection = d3.geoMercator()\r\n                    .fitSize([this.mapWidth, this.mapHeight], this.geoData);\r\n            }\r\n\r\n            else if (type === this.myType['Equirectangular']) {\r\n                this.projectionType = type;\r\n\r\n                this.geoProjection = d3.geoEquirectangular()\r\n                    .fitSize([this.mapWidth, this.mapHeight], this.geoData);\r\n            }\r\n\r\n            this.geoPath = d3.geoPath().projection(this.geoProjection);\r\n            this.drawSvg();\r\n        },\r\n\r\n\r\n        setHighlight(type) {\r\n            console.log(\"Highlight Techniques:\", type);\r\n\r\n            // 重置所有路径的填充颜色到默认颜色\r\n            // this.svg.selectAll('path')\r\n            //   .attr('fill', d => this.fillColorFunction(d.properties.populationd))\r\n            //   .classed('highlighted', false); // 假设你使用了highlighted类来表示高亮\r\n\r\n            // // 移除所有之前添加的特定高亮元素\r\n            // this.svg.selectAll('.highlight-marker').remove();\r\n\r\n            // 取消之前的所有点击事件监听器\r\n            this.svg.selectAll('path').on('click', null);\r\n            // 重要：移除绑定到SVG本身的点击事件监听器\r\n            this.svg.on('click', null);\r\n            // d3.select('#' + this.value + '-enlargedView').selectAll(\"*\").remove(); \r\n            // 根据类型应用新的高亮方式\r\n            if (type === this.myType['Color']) {\r\n                this.highLightType = type;\r\n\r\n                const addHighLight = (svg) => {\r\n                    const highLight = () => {\r\n                        console.log(svg);\r\n                        d3.select(svg)\r\n                            .classed('highlighted', true) // 使用类来标记高亮\r\n                            .attr('fill', '#5959E9');\r\n                    };\r\n\r\n                    highLight(svg);\r\n                    this.highLights.push(highLight);\r\n                };\r\n\r\n                this.svg.selectAll('path')\r\n                    .on('click', function () { addHighLight(this) });\r\n            }\r\n\r\n            else if (type === this.myType['Light']) {\r\n                this.highLightType = type;\r\n\r\n                const addHighLight = (event, svg) => {\r\n                    const [x, y] = d3.pointer(event, svg);\r\n\r\n                    const highLight = () => {\r\n                        // 添加一个SVG图标作为光圈效果\r\n                        d3.select(svg).append('image')\r\n                            .classed('highlight-marker', true) // 使用类来标记这是一个高亮标记\r\n                            .attr('xlink:href', require('../assets/lightIcon.svg'))// 设置图像的路径\r\n                            .attr('x', x - 40) // 调整图像位置，使其中心对准点击位置\r\n                            .attr('y', y - 40) // 同上，这里的15是假设图像大小为30x30像素，需要根据实际大小调整\r\n                            .attr('width', 80) // 设置图像的宽度\r\n                            .attr('height', 80); // 设置图像的高度\r\n                    };\r\n\r\n                    highLight();\r\n                    this.highLights.push(highLight);\r\n                };\r\n\r\n                // 绑定一个新的点击事件监听器到SVG本身\r\n                this.svg.on('click', function (event) {\r\n                    addHighLight(event, this)\r\n                });\r\n            }\r\n\r\n            else if (type === this.myType['Map Pin']) {\r\n                this.highLightType = type;\r\n\r\n                const addHighLight = (event, svg) => {\r\n                    const [x, y] = d3.pointer(event, svg);\r\n\r\n                    const highLight = () => {\r\n                        // 添加一个SVG图标作为光圈效果\r\n                        d3.select(svg).append('image')\r\n                            .classed('highlight-marker', true) // 使用类来标记这是一个高亮标记\r\n                            .attr('xlink:href', require('../assets/locationIcon.svg'))// 设置图像的路径\r\n                            .attr('x', x - 20) // 调整图像位置，使其中心对准点击位置\r\n                            .attr('y', y - 48) // 同上，根据实际大小调整\r\n                            .attr('width', 40) // 设置图像的宽度\r\n                            .attr('height', 48); // 设置图像的高度\r\n                    };\r\n\r\n                    highLight();\r\n                    this.highLights.push(highLight);\r\n                };\r\n\r\n                // 绑定一个新的点击事件监听器到SVG本身\r\n                this.svg.on('click', function (event) {\r\n                    addHighLight(event, this);\r\n                });\r\n            }\r\n            else if (type === this.myType['3D Transformation']) {\r\n                this.highLightType = type;\r\n\r\n                const addHighLight = (event, svg) => {\r\n                    // eslint-disable-next-line no-unused-vars\r\n                    const [x, y] = d3.pointer(event, svg);\r\n                    const feature = d3.select(event.target).datum(); // 获取被点击的地图区域的数据\r\n\r\n                    // 高亮函数\r\n                    const highLight = () => {\r\n                        // 首先移除之前的高亮效果\r\n                        //this.svg.selectAll('.highlight-3d-effect').remove();\r\n\r\n                        // 然后添加一个新的具有3D效果的path\r\n                        this.svg.append('path')\r\n                            .datum(feature) // 使用同一区域的数据\r\n                            .attr('class', 'highlight-3d-effect') // 为了方便之后可能的移除\r\n                            .attr('d', this.geoPath) // 使用geoPath来保持地理形状的一致性\r\n                            .attr('fill', d3.rgb(89, 89, 233, 0.5)) // 为了简化，这里使用纯色填充表示阴影\r\n                            .attr('filter', 'url(#drop-shadow)')\r\n                            .attr('stroke-width', 2); // 应用下面定义的SVG滤镜实现阴影效果\r\n\r\n                        // 添加或确保SVG滤镜的存在\r\n                        const defs = this.svg.append('defs');\r\n\r\n                        const filter = defs.append('filter')\r\n                            .attr('id', 'drop-shadow')\r\n                            .attr('height', '130%');\r\n\r\n                        filter.append('feGaussianBlur')\r\n                            .attr('in', 'SourceAlpha')\r\n                            .attr('stdDeviation', 3)\r\n                            .attr('result', 'blur');\r\n\r\n                        filter.append('feOffset')\r\n                            .attr('in', 'blur')\r\n                            .attr('dx', 5)\r\n                            .attr('dy', 5)\r\n                            .attr('result', 'offsetBlur');\r\n\r\n                        const feMerge = filter.append('feMerge');\r\n                        feMerge.append('feMergeNode')\r\n                            .attr('in', 'offsetBlur');\r\n                        feMerge.append('feMergeNode')\r\n                            .attr('in', 'SourceGraphic');\r\n                    };\r\n\r\n                    highLight();\r\n                    this.highLights.push(highLight);\r\n                };\r\n\r\n                // 绑定点击事件到所有的path上\r\n                this.svg.selectAll('path').on('click', function (event) {\r\n                    addHighLight(event, this);\r\n                });\r\n            }\r\n            else if (type === this.myType['Enlarged Portions']) {\r\n                this.highLightType = type;\r\n\r\n                // 移除之前可能绑定的点击事件以避免重复\r\n                this.svg.on('click', null);\r\n\r\n                // 直接在点击事件中实现放大效果的逻辑\r\n                this.svg.on('click', (event) => {\r\n                    // 移除上一次点击留下的圆圈\r\n                    this.svg.selectAll('circle.click-circle').remove();\r\n                    this.svg.selectAll('line.click-circle').remove();\r\n\r\n                    const [x, y] = d3.pointer(event, this.svg.node());\r\n\r\n                    // 在点击位置绘制一个圆圈作为反馈\r\n                    this.svg.append('circle')\r\n                        .classed('click-circle', true) // 添加一个类以便后续可以选择并移除\r\n                        .attr('cx', x)\r\n                        .attr('cy', y)\r\n                        .attr('r', 30) // 圆的半径\r\n                        .style('fill', 'none')\r\n                        .style('stroke', '#5959E9')\r\n                        .style('stroke-width', 3);\r\n\r\n                    // 清除#enlargedView中的内容\r\n                    const enlargedView = d3.select('#' + this.value + '-enlargedView');\r\n                    enlargedView.selectAll('*').remove();\r\n\r\n                    // 在#enlargedView中创建一个新的svg元素\r\n                    const enlargedViewSvg = enlargedView.append('svg')\r\n                        .attr('width', '100%')\r\n                        .attr('height', '100%')\r\n                        .attr('viewBox', `${x - 30} ${y - 30} 60 60`);\r\n\r\n                    // 创建圆形裁剪路径\r\n                    const defs = enlargedViewSvg.append('defs');\r\n                    const clipPath = defs.append('clipPath')\r\n                        .attr('id', 'circle-clip');\r\n                    clipPath.append('circle')\r\n                        .attr('cx', x)\r\n                        .attr('cy', y)\r\n                        .attr('r', 30);\r\n\r\n                    // 复制原SVG内容到新的SVG元素中，并应用圆形裁剪路径\r\n                    enlargedViewSvg.append('g')\r\n                        .attr('clip-path', 'url(#circle-clip)')\r\n                        .html(this.svg.html());\r\n\r\n                    // 由于SVG元素被复制，我们需要重新计算transform属性以确保放大的区域正确对齐\r\n                    enlargedViewSvg.selectAll('g > svg')\r\n                        .attr('x', null)\r\n                        .attr('y', null)\r\n                        .style('transform', ` scale(2)`);\r\n\r\n                    // draw traction line\r\n                    const x1 = this.mapWidth-94, y1 = 147, r1 = 100, r = 30; // approximate centre of enlarged circle\r\n                    const d = Math.sqrt((x1-x)*(x1-x)+(y1-y)*(y1-y));\r\n                    const xa = x + r*Math.cos(Math.atan((y1-y)/(x1-x))+Math.acos((r-r1)/d));\r\n                    const ya = y + r*Math.sin(Math.atan((y1-y)/(x1-x))+Math.acos((r-r1)/d));\r\n                    const xb = x1 + r1*Math.cos(Math.atan((y1-y)/(x1-x))+Math.acos((r-r1)/d));\r\n                    const yb = y1 + r1*Math.sin(Math.atan((y1-y)/(x1-x))+Math.acos((r-r1)/d));\r\n                    const xc = x + r*Math.cos(Math.atan((y1-y)/(x1-x))-Math.acos((r-r1)/d));\r\n                    const yc = y + r*Math.sin(Math.atan((y1-y)/(x1-x))-Math.acos((r-r1)/d));\r\n                    const xd = x1 + r1*Math.cos(Math.atan((y1-y)/(x1-x))-Math.acos((r-r1)/d));\r\n                    const yd = y1 + r1*Math.sin(Math.atan((y1-y)/(x1-x))-Math.acos((r-r1)/d));\r\n                    this.svg.append('line')\r\n                        .classed('click-circle', true)\r\n                        .attr('x1', xa)\r\n                        .attr('y1', ya)\r\n                        .attr('x2', xb)\r\n                        .attr('y2', yb)\r\n                        .attr('stroke', 'grey')\r\n                        .attr('stroke-width', 1);\r\n                    this.svg.append('line')\r\n                        .classed('click-circle', true)\r\n                        .attr('x1', xc)\r\n                        .attr('y1', yc)\r\n                        .attr('x2', xd)\r\n                        .attr('y2', yd)\r\n                        .attr('stroke', 'grey')\r\n                        .attr('stroke-width', 1);\r\n                });\r\n            }\r\n            else if (type === this.myType['Edge Stroke']) {\r\n                this.highLightType = type;\r\n\r\n                const addHighLight = (event) => {\r\n                    const feature = d3.select(event.target).datum(); // 获取被点击的地图区域的数据\r\n\r\n                    // 高亮函数\r\n                    const highLight = () => {\r\n                        this.svg.append('path')\r\n                            .datum(feature) // 使用同一区域的数据\r\n                            .attr('class', 'highlight-edge-stroke') // 为了方便之后可能的移除\r\n                            .attr('d', this.geoPath) // 使用geoPath来保持地理形状的一致性\r\n                            .attr('stroke-width', 2)\r\n                            .attr('stroke', '#5959E9')\r\n                            .style('fill', 'none');\r\n                    };\r\n\r\n                    highLight();\r\n                    this.highLights.push(highLight);\r\n                };\r\n\r\n                // 绑定点击事件到所有的path上\r\n                this.svg.selectAll('path').on('click', function (event) {\r\n                    addHighLight(event, this);\r\n                });\r\n            }\r\n\r\n\r\n\r\n        },\r\n\r\n        setLabelPosition(type) {\r\n            console.log(\"Label Position:\", type);\r\n            // 移除之前添加的所有标签\r\n            this.svg.selectAll(\".country-label, .annotation-box, .annotation-text, .olympic-label, .country-flag, .annotation-line\").remove();\r\n            this.svg.selectAll(\".country-color\")\r\n                .style('fill', null) // 或设置为你的默认颜色\r\n                .classed(\"country-color\", false); // 移除类，以避免对后续操作的影响\r\n            // 定义注解框的宽度、高度和间距\r\n            const boxWidth = 200; // 固定宽度\r\n            const boxHeight = 60; // 固定高度\r\n            const boxSpacing = 20; // 注解框之间的间距\r\n            if (type === this.myType['Label Situated']) {\r\n                this.labelPositionType = type;\r\n\r\n                this.LabelPosition = () => {\r\n                    this.geoData.features.forEach(feature => {\r\n                    const center = this.geoPath.centroid(feature);\r\n                    const annotation = feature.properties.annotation;\r\n\r\n                    if (annotation && annotation != -1) {\r\n                        let textLines = [\r\n                            `Country: ${feature.properties.NAME}`,\r\n                            `City: ${annotation.city}`\r\n                        ];\r\n\r\n                        // 根据条件动态添加Summer和Winter的行\r\n                        if (annotation.summer_olympics && annotation.summer_olympics.length > 0) {\r\n                            textLines.push(`Summer: ${annotation.summer_olympics}`);\r\n                        }\r\n                        if (annotation.winter_olympics && annotation.winter_olympics.length > 0) {\r\n                            textLines.push(`Winter: ${annotation.winter_olympics}`);\r\n                        }\r\n                        const maxLineWidth = 30;\r\n\r\n                        // 用于跟踪当前垂直位置的变量\r\n                        let currentYOffset = 0;\r\n\r\n                        // 应用拆分函数并添加文本\r\n                        textLines.forEach((line) => {\r\n                            let subLines = this.splitTextToLines(line, maxLineWidth); // 使用拆分函数\r\n                            subLines.forEach((subLine) => {\r\n                                this.svg.append('text')\r\n                                    .attr('class', 'olympic-label')\r\n                                    .attr('x', center[0])\r\n                                    .attr('y', center[1] + currentYOffset) // 使用currentYOffset确定垂直位置\r\n                                    .attr('text-anchor', 'middle')\r\n                                    .attr('fill', 'black')\r\n                                    .style('font-size', '8px')\r\n                                    .text(subLine);\r\n\r\n                                // 每添加一行，更新currentYOffset以便下一行下移\r\n                                currentYOffset += 10; // 假设每行文本的高度加间距为15px\r\n                            });\r\n\r\n                            // 注意：这里不再需要调整index\r\n                        });\r\n                    }\r\n                    });\r\n                }\r\n\r\n                \r\n            }\r\n\r\n\r\n            else if (type === this.myType['Label Text']) {\r\n                this.labelPositionType = type;\r\n\r\n                this.LabelPosition = () => {\r\n                        // 仅为olympics_data.json中存在的国家显示国家名字\r\n                    this.geoData.features.forEach(feature => {\r\n                        if (feature.properties.annotation != -1) {\r\n                            const center = this.geoPath.centroid(feature);\r\n                            this.svg.append('text')\r\n                                .attr('class', 'country-label')\r\n                                .attr('x', center[0])\r\n                                .attr('y', center[1])\r\n                                .attr('text-anchor', 'middle')\r\n                                .attr('fill', 'black')\r\n                                .style('font-size', '15px')\r\n                                .text(feature.properties.NAME);\r\n                        }\r\n                    });\r\n\r\n                    // 过滤掉不需要展示注解的数据\r\n                    const annotatedFeatures = this.geoData.features.filter(feature => feature.properties.annotation && feature.properties.annotation != -1);\r\n\r\n                    // 用于注解的特征进行循环，而不是所有特征\r\n                    annotatedFeatures.forEach((feature, index) => {\r\n                        const annotation = feature.properties.annotation;\r\n\r\n\r\n\r\n                        // // 动态计算x坐标，考虑间距，以保证注解框在水平方向上均匀对齐\r\n                        // const x = col * (boxWidth + boxSpacing);\r\n\r\n                        // 计算每个注解的起始x坐标\r\n                        const totalAnnotationsWidth = annotatedFeatures.length * (boxWidth + boxSpacing) - boxSpacing; // 总宽度减去最后一个间距\r\n                        const startX = (this.mapWidth - totalAnnotationsWidth) / 2; // 为了居中对齐\r\n                        // // 调整y坐标，为每个注解框下方留出一定的间距\r\n                        // const y = this.mapHeight + row * (boxHeight + 20 + boxSpacing); // 调整了间距的计算\r\n                        const annotationX = startX + index * (boxWidth + boxSpacing);\r\n                        const annotationY = this.mapHeight + 50; // 地图下方50px\r\n\r\n\r\n                        // 绘制注解框\r\n                        this.svg.append('rect')\r\n                            .attr('class', 'annotation-box')\r\n                            .attr('x', annotationX)\r\n                            .attr('y', annotationY)\r\n                            .attr('width', boxWidth)\r\n                            .attr('height', boxHeight)\r\n                            .attr('fill', 'none')\r\n                            .attr('stroke', 'black');\r\n\r\n                        // 在注解框内添加文本\r\n                        let textLines = [\r\n                            `Country: ${feature.properties.NAME}`,\r\n                            `City: ${annotation.city}`\r\n                        ];\r\n\r\n                        // 根据条件动态添加Summer和Winter的行\r\n                        if (annotation.summer_olympics && annotation.summer_olympics.length > 0) {\r\n                            textLines.push(`Summer: ${annotation.summer_olympics}`);\r\n                        }\r\n                        if (annotation.winter_olympics && annotation.winter_olympics.length > 0) {\r\n                            textLines.push(`Winter: ${annotation.winter_olympics}`);\r\n                        }\r\n\r\n                        textLines.forEach((line, lineIndex) => {\r\n                            this.svg.append('text')\r\n                                .attr('class', 'annotation-text')\r\n                                .attr('x', annotationX + 5) // 略微缩进\r\n                                .attr('y', annotationY + 15 + (lineIndex * 12)) // 根据行数调整位置\r\n                                .attr('fill', 'black')\r\n                                .style('font-size', '10px')\r\n                                .text(line);\r\n                        });\r\n                    });\r\n                }\r\n                \r\n            }\r\n\r\n            else if (type === this.myType['Label Icon']) {\r\n                this.labelPositionType = type;\r\n\r\n                this.LabelPosition = () => {\r\n                        // 过滤掉不需要展示注解的数据\r\n                    const annotatedFeatures = this.geoData.features.filter(feature => feature.properties.annotation && feature.properties.annotation != -1);\r\n\r\n\r\n                    // 用于注解的特征进行循环\r\n                    annotatedFeatures.forEach((feature, index) => {\r\n                        const annotation = feature.properties.annotation;\r\n                        // 计算每个注解的起始x坐标\r\n                        const totalAnnotationsWidth = annotatedFeatures.length * (boxWidth + boxSpacing) - boxSpacing; // 总宽度减去最后一个间距\r\n                        const startX = (this.mapWidth - totalAnnotationsWidth) / 2; // 为了居中对齐\r\n                        // // 调整y坐标，为每个注解框下方留出一定的间距\r\n                        // const y = this.mapHeight + row * (boxHeight + 20 + boxSpacing); // 调整了间距的计算\r\n                        const annotationX = startX + index * (boxWidth + boxSpacing);\r\n                        const annotationY = this.mapHeight + 50; // 地图下方50px\r\n                        if (annotation && annotation.flag_base64) {\r\n                            const center = this.geoPath.centroid(feature);\r\n                            // 在地图的国家中心点上添加国旗图像\r\n                            this.svg.append('image')\r\n                                .attr('xlink:href', annotation.flag_base64)\r\n                                .attr('x', center[0] - 15) // 调整这个值以适合国旗图像的大小和位置\r\n                                .attr('y', center[1] - 10)\r\n                                .attr('width', 30) // 根据需要调整国旗的尺寸\r\n                                .attr('height', 20)\r\n                                .attr('class', 'country-flag');\r\n\r\n\r\n                            // 先绘制注解框作为背景\r\n                            this.svg.append('rect')\r\n                                .attr('class', 'annotation-box')\r\n                                .attr('x', annotationX)\r\n                                .attr('y', annotationY)\r\n                                .attr('width', boxWidth)\r\n                                .attr('height', boxHeight)\r\n                                .attr('fill', 'url(#flagPattern' + index + ')') // 使用图案填充\r\n                                .attr('stroke', 'black');\r\n\r\n                            let textLines = [\r\n                                `Country: ${feature.properties.NAME}`,\r\n                                `City: ${annotation.city}`\r\n                            ];\r\n\r\n                            // 根据条件动态添加Summer和Winter的行\r\n                            if (annotation.summer_olympics && annotation.summer_olympics.length > 0) {\r\n                                textLines.push(`Summer: ${annotation.summer_olympics}`);\r\n                            }\r\n                            if (annotation.winter_olympics && annotation.winter_olympics.length > 0) {\r\n                                textLines.push(`Winter: ${annotation.winter_olympics}`);\r\n                            }\r\n\r\n                            textLines.forEach((line, lineIndex) => {\r\n                                this.svg.append('text')\r\n                                    .attr('class', 'annotation-text')\r\n                                    .attr('x', annotationX + 5) // 略微缩进\r\n                                    .attr('y', annotationY + 15 + (lineIndex * 12)) // 根据行数调整位置\r\n                                    .attr('fill', 'black')\r\n                                    .style('font-size', '10px')\r\n                                    .text(line);\r\n                            });\r\n\r\n                            // 创建用于国旗背景的图案\r\n                            this.svg.append('pattern')\r\n                                .attr('id', 'flagPattern' + index)\r\n                                .attr('patternUnits', 'objectBoundingBox')\r\n                                .attr('width', '100%')\r\n                                .attr('height', '100%')\r\n                                .append('image')\r\n                                .attr('xlink:href', annotation.flag_base64)\r\n                                .attr('width', boxWidth)\r\n                                .attr('height', boxHeight)\r\n                                .attr('preserveAspectRatio', 'xMidYMid slice');\r\n                        }\r\n                    });\r\n                }\r\n                \r\n            }\r\n            else if (type === this.myType['Label Color']) {\r\n                this.labelPositionType = type;\r\n\r\n                this.LabelPosition = () => {\r\n                    // 颜色数组\r\n                    const countryColors = [\"#8ECFC9\", \"#FFBE7A\", \"#FA7F6F\", \"#82B0D2\", \"#BEB8DC\", \"#F6CAE5\", \"#F1D77E\", \"#2878b5\", \"#779043\"];\r\n                    const getCountryColor = (index) => countryColors[index % countryColors.length];\r\n\r\n                    // 过滤出需要注解的国家特征\r\n                    const annotatedFeatures = this.geoData.features.filter(feature => feature.properties.annotation && feature.properties.annotation != -1);\r\n\r\n                    // 为有注解的国家设置颜色\r\n                    annotatedFeatures.forEach((feature, index) => {\r\n                        // 计算每个注解的起始x坐标\r\n                        const totalAnnotationsWidth = annotatedFeatures.length * (boxWidth + boxSpacing) - boxSpacing; // 总宽度减去最后一个间距\r\n                        const startX = (this.mapWidth - totalAnnotationsWidth) / 2; // 为了居中对齐\r\n                        // // 调整y坐标，为每个注解框下方留出一定的间距\r\n                        // const y = this.mapHeight + row * (boxHeight + 20 + boxSpacing); // 调整了间距的计算\r\n                        const annotationX = startX + index * (boxWidth + boxSpacing);\r\n                        const annotationY = this.mapHeight + 50; // 地图下方50px\r\n                        const fillColor = getCountryColor(index); // 获取颜色\r\n\r\n                        // 设置国家颜色\r\n                        this.svg.selectAll('path')\r\n                            .filter(d => d === feature)\r\n                            .style('fill', fillColor)\r\n                            .classed(\"country-color\", true);\r\n\r\n                        // 创建注解框\r\n                        this.svg.append('rect')\r\n                            .attr('class', 'annotation-box')\r\n                            .attr('x', annotationX)\r\n                            .attr('y', annotationY)\r\n                            .attr('width', boxWidth)\r\n                            .attr('height', boxHeight)\r\n                            .attr('fill', fillColor) // 确保注解框颜色与国家颜色相同\r\n                            .attr('stroke', 'black');\r\n\r\n                        // 添加注解文本\r\n                        const annotation = feature.properties.annotation;\r\n                        let textLines = [\r\n                            `Country: ${feature.properties.NAME}`,\r\n                            `City: ${annotation.city}`\r\n                        ];\r\n\r\n                        // 根据条件动态添加Summer和Winter的行\r\n                        if (annotation.summer_olympics && annotation.summer_olympics.length > 0) {\r\n                            textLines.push(`Summer: ${annotation.summer_olympics}`);\r\n                        }\r\n                        if (annotation.winter_olympics && annotation.winter_olympics.length > 0) {\r\n                            textLines.push(`Winter: ${annotation.winter_olympics}`);\r\n                        }\r\n\r\n                        textLines.forEach((line, lineIndex) => {\r\n                            this.svg.append('text')\r\n                                .attr('class', 'annotation-text')\r\n                                .attr('x', annotationX + 5) // 略微缩进\r\n                                .attr('y', annotationY + 15 + (lineIndex * 12)) // 根据行数调整位置\r\n                                .attr('fill', 'black')\r\n                                .style('font-size', '10px')\r\n                                .text(line);\r\n                        });\r\n                    });\r\n                }\r\n                \r\n\r\n            }\r\n\r\n            else if (type === this.myType['Label Convenient']) {\r\n                this.labelPositionType = type;\r\n                this.LabelPosition = () => {\r\n                    const annotatedFeatures = this.geoData.features.filter(feature => feature.properties.annotation && feature.properties.annotation != -1);\r\n                    const totalAnnotations = annotatedFeatures.length;\r\n\r\n                    // 假设每边分配的注解数量大致相等\r\n                    const annotationsPerSide = Math.ceil(totalAnnotations / 3);\r\n                    // eslint-disable-next-line\r\n                    let leftAnnotationsCount = 0, bottomAnnotationsCount = 0, rightAnnotationsCount = 0;\r\n\r\n                    annotatedFeatures.forEach((feature) => {\r\n                        const countryCenter = this.geoPath.centroid(feature);\r\n                        const annotation = feature.properties.annotation;\r\n\r\n                        // 特定国家（如\"Austria\"）的连线长度\r\n                        const lineLength = feature.properties.NAME === \"Austria\" ? 400 : 300;\r\n\r\n                        // 计算到三边的距离\r\n                        const distanceToLeft = countryCenter[0];\r\n                        const distanceToBottom = this.mapHeight - countryCenter[1];\r\n                        const distanceToRight = this.mapWidth - countryCenter[0];\r\n\r\n                        // 确定注解应放置在哪个边缘\r\n                        let edge = 'left'; // 默认左边\r\n                        let minDistance = distanceToLeft;\r\n\r\n                        if (distanceToBottom < minDistance && bottomAnnotationsCount < annotationsPerSide) {\r\n                            minDistance = distanceToBottom;\r\n                            edge = 'bottom';\r\n                        }\r\n                        if (distanceToRight < minDistance && rightAnnotationsCount < annotationsPerSide) {\r\n                            edge = 'right';\r\n                        }\r\n\r\n                        // 更新对应边缘的注解计数\r\n                        if (edge === 'left') leftAnnotationsCount++;\r\n                        else if (edge === 'bottom') bottomAnnotationsCount++;\r\n                        else rightAnnotationsCount++;\r\n\r\n                        // 计算线的终点位置\r\n                        let lineEndX = countryCenter[0], lineEndY = countryCenter[1];\r\n                        let textOffsetX = countryCenter[0], textOffsetY = countryCenter[1];\r\n\r\n                        switch (edge) {\r\n                            case 'left':\r\n                                lineEndX -= lineLength;\r\n                                textOffsetX = lineEndX - boxWidth - 5;\r\n                                textOffsetY = countryCenter[1] - boxHeight / 2;\r\n                                break;\r\n                            case 'bottom':\r\n                                lineEndY += lineLength;\r\n                                textOffsetX = countryCenter[0] - boxWidth / 2;\r\n                                textOffsetY = lineEndY + 5;\r\n                                break;\r\n                            case 'right':\r\n                                lineEndX += lineLength;\r\n                                textOffsetX = lineEndX + 5;\r\n                                textOffsetY = countryCenter[1] - boxHeight / 2;\r\n                                break;\r\n                        }\r\n                        // 绘制注解连线\r\n                        this.svg.append('line')\r\n                            .attr('x1', countryCenter[0])\r\n                            .attr('y1', countryCenter[1])\r\n                            .attr('x2', lineEndX)\r\n                            .attr('y2', lineEndY)\r\n                            .attr('stroke', 'black')\r\n                            .attr('stroke-width', 1)\r\n                            .attr('class', 'annotation-line');\r\n\r\n                        // 绘制文本框背景\r\n                        this.svg.append('rect')\r\n                            .attr('x', textOffsetX)\r\n                            .attr('y', textOffsetY)\r\n                            .attr('width', boxWidth)\r\n                            .attr('height', boxHeight)\r\n                            .attr('fill', 'white')\r\n                            .attr('stroke', 'black')\r\n                            .attr('class', 'annotation-box');\r\n\r\n                        let textLines = [\r\n                            `Country: ${feature.properties.NAME}`,\r\n                            `City: ${annotation.city}`\r\n                        ];\r\n\r\n                        // 根据条件动态添加Summer和Winter的行\r\n                        if (annotation.summer_olympics && annotation.summer_olympics.length > 0) {\r\n                            textLines.push(`Summer: ${annotation.summer_olympics}`);\r\n                        }\r\n                        if (annotation.winter_olympics && annotation.winter_olympics.length > 0) {\r\n                            textLines.push(`Winter: ${annotation.winter_olympics}`);\r\n                        }\r\n\r\n                        // 添加多行注解文本\r\n                        textLines.forEach((line, i) => {\r\n                            this.svg.append('text')\r\n                                .attr('x', textOffsetX + 5)\r\n                                .attr('y', textOffsetY + 13 + i * 13)\r\n                                .attr('fill', 'black')\r\n                                .style('font-size', '10px')\r\n                                .text(line)\r\n                                .attr('class', 'annotation-text');\r\n                        });\r\n                    }); \r\n                }\r\n\r\n                \r\n            }\r\n\r\n            else if (type === this.myType['Label Aligned']) {\r\n                this.labelPositionType = type;\r\n\r\n                this.LabelPosition = () => {\r\n                    const sortedFeatures = this.geoData.features\r\n                        .filter(feature => feature.properties.annotation && feature.properties.annotation != -1)\r\n                        .sort((a, b) => {\r\n                            const centerA = this.geoPath.centroid(a);\r\n                            const centerB = this.geoPath.centroid(b);\r\n                            return centerA[0] - centerB[0];\r\n                        });\r\n\r\n                    // 计算每个注解的起始x坐标\r\n                    const totalAnnotationsWidth = sortedFeatures.length * (boxWidth + boxSpacing) - boxSpacing; // 总宽度减去最后一个间距\r\n                    const startX = (this.mapWidth - totalAnnotationsWidth) / 2; // 为了居中对齐\r\n\r\n                    sortedFeatures.forEach((feature, index) => {\r\n                        const annotation = feature.properties.annotation;\r\n                        const countryCenter = this.geoPath.centroid(feature);\r\n                        const annotationX = startX + index * (boxWidth + boxSpacing);\r\n                        const annotationY = this.mapHeight + 50; // 地图下方50px\r\n\r\n                        // 绘制注解框\r\n                        this.svg.append('rect')\r\n                            .attr('class', 'annotation-box')\r\n                            .attr('x', annotationX)\r\n                            .attr('y', annotationY)\r\n                            .attr('width', boxWidth)\r\n                            .attr('height', boxHeight)\r\n                            .attr('fill', 'none')\r\n                            .attr('stroke', 'black');\r\n\r\n                        // 准备注解文本\r\n                        let textLines = [\r\n                            `Country: ${feature.properties.NAME}`,\r\n                            `City: ${annotation.city}`\r\n                        ];\r\n\r\n                        // 根据条件动态添加Summer和Winter的行\r\n                        if (annotation.summer_olympics && annotation.summer_olympics.length > 0) {\r\n                            textLines.push(`Summer: ${annotation.summer_olympics}`);\r\n                        }\r\n                        if (annotation.winter_olympics && annotation.winter_olympics.length > 0) {\r\n                            textLines.push(`Winter: ${annotation.winter_olympics}`);\r\n                        }\r\n\r\n                        // 在注解框内添加文本\r\n                        textLines.forEach((line, lineIndex) => {\r\n                            this.svg.append('text')\r\n                                .attr('class', 'annotation-text')\r\n                                .attr('x', annotationX + 5) // 略微缩进\r\n                                .attr('y', annotationY + 15 + (lineIndex * 12)) // 调整文本的垂直位置\r\n                                .attr('fill', 'black')\r\n                                .style('font-size', '10px')\r\n                                .text(line);\r\n                        });\r\n\r\n                        // 绘制注解连线\r\n                        this.svg.append('path')\r\n                            .attr('d', `M${countryCenter[0]} ${countryCenter[1]} L${annotationX + boxWidth / 2} ${countryCenter[1]} L${annotationX + boxWidth / 2} ${annotationY}`)\r\n                            .attr('stroke', 'black')\r\n                            .attr('fill', 'none')\r\n                            .attr('class', 'annotation-line');\r\n                    });   \r\n                }\r\n                // 过滤并排序需要注解的国家特征，基于它们的中心x坐标\r\n                \r\n            }\r\n\r\n\r\n            else if (type === this.myType['Label Ordered']) {\r\n                this.labelPositionType = type;\r\n\r\n                this.LabelPosition = () => {\r\n                    const annotatedFeatures = this.geoData.features.filter(feature => feature.properties.annotation && feature.properties.annotation != -1);\r\n                    const circleCenterX = 500; // 圆心的x坐标\r\n                    const circleCenterY = this.mapHeight - 100; // 圆心的y坐标\r\n                    const radius = Math.min(this.mapWidth, this.mapHeight) / 4; // 半径\r\n                    const angleIncrement = (2 * Math.PI) / annotatedFeatures.length; // 每个注解之间的角度增量\r\n\r\n                    annotatedFeatures.forEach((feature, index) => {\r\n                        const angle = angleIncrement * index;\r\n                        const annotationX = circleCenterX + radius * Math.cos(angle);\r\n                        const annotationY = circleCenterY + radius * Math.sin(angle);\r\n                        const countryCenter = this.geoPath.centroid(feature);\r\n                        // 更改连线到注解的最近的边缘中心点\r\n                        const lineEndX = annotationX;\r\n                        const lineEndY = countryCenter[1] < annotationY ? annotationY - boxHeight / 2 : annotationY + boxHeight / 2;\r\n\r\n                        this.svg.append('path')\r\n                            .attr('d', `M${countryCenter[0]} ${countryCenter[1]} L${lineEndX} ${countryCenter[1]} L${lineEndX} ${lineEndY}`)\r\n                            .attr('stroke', 'black')\r\n                            .attr('fill', 'none')\r\n                            .attr('class', 'annotation-line');\r\n\r\n                        // 准备注解文本\r\n                        let textLines = [\r\n                            `Country: ${feature.properties.NAME}`,\r\n                            `City: ${feature.properties.annotation.city}`\r\n                        ];\r\n\r\n                        if (feature.properties.annotation.summer_olympics && feature.properties.annotation.summer_olympics.length > 0) {\r\n                            textLines.push(`Summer: ${feature.properties.annotation.summer_olympics}`);\r\n                        }\r\n                        if (feature.properties.annotation.winter_olympics && feature.properties.annotation.winter_olympics.length > 0) {\r\n                            textLines.push(`Winter: ${feature.properties.annotation.winter_olympics}`);\r\n                        }\r\n\r\n                        // 绘制注解框\r\n                        this.svg.append('rect')\r\n                            .attr('class', 'annotation-box')\r\n                            .attr('x', annotationX - boxWidth / 2) // 中心对齐调整\r\n                            .attr('y', annotationY - boxHeight / 2) // 中心对齐调整\r\n                            .attr('width', boxWidth)\r\n                            .attr('height', boxHeight)\r\n                            .attr('fill', 'none')\r\n                            .attr('stroke', 'black');\r\n\r\n                        // 在注解框内添加多行文本\r\n                        textLines.forEach((line, lineIndex) => {\r\n                            this.svg.append('text')\r\n                                .attr('class', 'annotation-text')\r\n                                .attr('x', annotationX)\r\n                                .attr('y', annotationY - boxHeight / 2 + 10 + lineIndex * 15) // 垂直位置调整\r\n                                .attr('text-anchor', 'middle')\r\n                                .attr('fill', 'black')\r\n                                .style('font-size', '10px')\r\n                                .text(line);\r\n                        });\r\n\r\n\r\n                    });\r\n                }\r\n                \r\n            }\r\n            this.drawSvg();\r\n\r\n        },\r\n\r\n        setEncodingChannel(type) {\r\n            console.log(\"Encoding Channel:\", type);\r\n            // d3.select(\".\" + this.value + \"-legend\").selectAll(\"*\").remove();\r\n            if (this.isNumerical) {\r\n                //Encoding Color (Luminance)'\r\n                if (type === this.myType['Color (Luminance)']) {\r\n                    this.encodingChannelType = type;\r\n                    const colorFunction = (scale) => {\r\n                        const transformFunction = (input) => Math.pow(input, 0.25);\r\n                        // const transformFunction = (input) => input\r\n\r\n                        const colorScale = d3.scaleSequential(d3.interpolateRgb(d3.rgb(220, 120, 130), d3.rgb(255, 255, 255)))\r\n                        .domain([transformFunction(this.mostPopulation), 0]);\r\n                        return scale == -1 ? this.defaultColor : colorScale(transformFunction(scale));\r\n                    }\r\n                    this.colorFunctionL = colorFunction;\r\n                    // 重写encodingChannel函数\r\n                    if (this.ifDoubleEncoding == false) {\r\n                        d3.select(\".\" + this.value + \"-legend\").selectAll(\"*\").remove();\r\n                        this.encodingChannel = () => {\r\n                            // 修改颜色映射的方法\r\n                            this.svg.selectAll('path')\r\n                                .attr('fill', d => colorFunction(this.getPopulation(d)));\r\n\r\n                            this.svg.selectAll('circle')\r\n                                .attr('fill', d => colorFunction(this.getPopulation(d)));\r\n\r\n                            \r\n                        } \r\n                    } else {\r\n                        d3.select(\".\" + this.value + \"-legend\").selectAll(\"*\").remove();\r\n                        this.preEncoding = type;\r\n                        this.svg.selectAll('path')\r\n                        .attr('fill', `${this.defaultColor}`);\r\n                        this.svg.selectAll('circle')\r\n                        .attr('fill', `${this.defaultColor}`);\r\n                    }\r\n                    this.drawColorLuminanceLegend();\r\n                }\r\n\r\n                //Encoding Color (Hue)'\r\n                else if (type === this.myType['Color (Hue)']) {\r\n                    this.encodingChannelType = type;\r\n                    const colorFunction = (population) => {\r\n                        if (population < 0) {\r\n                            return this.defaultColor;\r\n                        }\r\n                        else if (population >= 0 && population < 5000000) {\r\n                            return 'rgb(142, 207, 201)'; // 人口数量小于5000000\r\n                        } else if (population >= 5000000 && population < 10000000) {\r\n                            return 'rgb(255, 190, 122)'; // 人口数量在5000000-10000000之间\r\n                        } else if (population >= 10000000 && population < 50000000) {\r\n                            return 'rgb(250, 127, 111)'; // 人口数量在10000000-50000000之间\r\n                        } else if (population >= 50000000 && population < 100000000) {\r\n                            return 'rgb(130, 176, 210)'; // 人口数量在50000000-100000000之间\r\n                        } else {\r\n                            return 'rgb(190, 184, 220)'; // 人口数量大于100000000\r\n                        }\r\n                    };\r\n                    // 重写encodingChannel函数\r\n                    if (this.ifDoubleEncoding == false) {\r\n                        d3.select(\".\" + this.value + \"-legend\").selectAll(\"*\").remove();\r\n                        this.encodingChannel = () => {\r\n                            // 修改颜色映射的方法\r\n                            this.svg.selectAll('path')\r\n                                .attr('fill', d => colorFunction(this.getPopulation(d)));\r\n\r\n                            this.svg.selectAll('circle')\r\n                                .attr('fill', d => colorFunction(this.getPopulation(d)));\r\n                        };\r\n                    } else {\r\n                        d3.select(\".\" + this.value + \"-legend\").selectAll(\"*\").remove();\r\n                        this.preEncoding = type;\r\n                        this.colorFunctionL = colorFunction;\r\n                        this.svg.selectAll('path')\r\n                        .attr('fill', this.defaultColor);\r\n                        this.svg.selectAll('circle')\r\n                        .attr('fill', this.defaultColor);\r\n                    }\r\n                    this.drawColorHueLegend();\r\n                }\r\n\r\n\r\n                //Encoding 3D Length\r\n                else if (type === this.myType['3D Length']) {\r\n                    this.encodingChannelType = type;\r\n\r\n                    this.encodingChannel = () => {\r\n                        this.svg.selectAll('path').attr(\"fill\", this.defaultColor);\r\n\r\n                        // 在地图上绘制模拟的3D长方体\r\n                        const baseHeight = 3; // 长方体基础高度，所有长方体至少有这个高度\r\n                        const populationPerHeight = 800000; // 每增加这么多人口，长方体的高度增加一单位\r\n                        const cuboidWidth = 20; // 长方体的宽度\r\n                        const cuboidLength = 30; // 长方体的长度（在SVG中模拟的“深度”）\r\n                        const sideOpacity = 0.5; // 侧面的不透明度\r\n\r\n                        this.geoData.features.forEach(feature => {\r\n                            const center = this.geoPath.centroid(feature);\r\n                            const population = this.getPopulation(feature);\r\n                            if (population >= 1000000) { // 人口大于等于1000000时绘制长方体\r\n                                const height = baseHeight + (population / populationPerHeight); // 长方体的总高度\r\n\r\n                                if (this.ifDoubleEncoding == false) {\r\n                                    d3.select(\".\" + this.value + \"-legend\").selectAll(\"*\").remove();\r\n                                    // 绘制长方体的“前面”\r\n                                    this.svg.append('rect')\r\n                                        .attr('x', center[0] - cuboidWidth / 2)\r\n                                        .attr('y', center[1] - height)\r\n                                        .attr('width', cuboidWidth)\r\n                                        .attr('height', height)\r\n                                        .attr('fill', 'rgba(230, 158, 165, 0.7)'); // 修改前面的颜色\r\n\r\n                                    // 绘制长方体的“顶面”\r\n                                    this.svg.append('polygon')\r\n                                        .attr('points', `${center[0] - cuboidWidth / 2},${center[1] - height} ${center[0] + cuboidWidth / 2},${center[1] - height} ${center[0] + cuboidWidth / 2 - cuboidLength / 4},${center[1] - height - cuboidLength / 4} ${center[0] - cuboidWidth / 2 - cuboidLength / 4},${center[1] - height - cuboidLength / 4}`)\r\n                                        .attr('fill', 'rgba(230, 158, 165, 0.7)');\r\n\r\n                                    // 绘制长方体的“左侧面”\r\n                                    this.svg.append('polygon')\r\n                                        .attr('points', `${center[0] - cuboidWidth / 2},${center[1]} ${center[0] - cuboidWidth / 2},${center[1] - height} ${center[0] - cuboidWidth / 2 - cuboidLength / 4},${center[1] - height - cuboidLength / 4} ${center[0] - cuboidWidth / 2 - cuboidLength / 4},${center[1] - cuboidLength / 4}`)\r\n                                        .attr('fill', `rgba(200, 60, 60, ${sideOpacity})`); // 修改左侧面的颜色\r\n                                } else {\r\n                                    // 绘制长方体的“前面”                     \r\n                                    this.svg.append('rect')\r\n                                        .attr('x', center[0] - cuboidWidth / 2)\r\n                                        .attr('y', center[1] - height)\r\n                                        .attr('width', cuboidWidth)\r\n                                        .attr('height', height)\r\n                                        .attr('fill', this.colorFunctionL(population))\r\n                                        .attr('opacity', '0.7'); // 修改前面的颜色\r\n\r\n                                    // 绘制长方体的“顶面”\r\n                                    this.svg.append('polygon')\r\n                                        .attr('points', `${center[0] - cuboidWidth / 2},${center[1] - height} ${center[0] + cuboidWidth / 2},${center[1] - height} ${center[0] + cuboidWidth / 2 - cuboidLength / 4},${center[1] - height - cuboidLength / 4} ${center[0] - cuboidWidth / 2 - cuboidLength / 4},${center[1] - height - cuboidLength / 4}`)\r\n                                        .attr('fill', this.colorFunctionL(population))\r\n                                        .attr('opacity', '0.7');\r\n\r\n                                    // 绘制长方体的“左侧面”\r\n                                    this.svg.append('polygon')\r\n                                        .attr('points', `${center[0] - cuboidWidth / 2},${center[1]} ${center[0] - cuboidWidth / 2},${center[1] - height} ${center[0] - cuboidWidth / 2 - cuboidLength / 4},${center[1] - height - cuboidLength / 4} ${center[0] - cuboidWidth / 2 - cuboidLength / 4},${center[1] - cuboidLength / 4}`)\r\n                                        .attr('fill', this.colorFunctionL(population))\r\n                                        .attr('opacity', '0.9'); // 修改左侧面的颜色\r\n                                }\r\n                            }\r\n                        });\r\n\r\n                        //draw legend\r\n                        for (let i = 0, delta = 20, px = 50; i < 4; i++) {\r\n                            let t = 1000000*Math.pow(5, i), x = px;\r\n                            let v = t / 800000;\r\n                            let y = 330-v;\r\n                            this.svg.append('rect')\r\n                                .attr('x', px)\r\n                                .attr('y', 330-v)\r\n                                .attr('width', 20)\r\n                                .attr('height', v)\r\n                                .attr('fill', 'rgba(230, 158, 165, 0.7)');\r\n                            this.svg.append('polygon')\r\n                                .attr('points', `${x},${y} ${x-8},${y-8} ${x-8},${y+v-8} ${x},${y+v}`)\r\n                                .attr('fill', 'rgba(200, 60, 60, 0.5)');\r\n                            this.svg.append('polygon')\r\n                                .attr('points', `${x},${y} ${x-8},${y-8} ${x+12},${y-8} ${x+20},${y}`)\r\n                                .attr('fill', 'rgba(230, 158, 165, 0.7)');\r\n\r\n                            const label = t < 1000 ? Math.floor(t) :\r\n                                t < 1000000 ? Math.floor(t / 1000) + \"k\" :\r\n                                Math.floor(t / 1000000) + \"m\";\r\n                            this.svg.append('text')\r\n                                .attr('x', px-5)\r\n                                .attr('y', 315-v)\r\n                                .text(label);\r\n                            px += 2 * delta;\r\n                        }\r\n                    }\r\n                }\r\n\r\n                else if (type === this.myType['2D Length']) {\r\n                    this.encodingChannelType = type;\r\n\r\n                    this.encodingChannel = () => {\r\n                        this.svg.selectAll('path').attr(\"fill\", this.defaultColor);\r\n\r\n                        // draw bar chart\r\n                        const baseHeight = 3; // 长方体基础高度，所有长方体至少有这个高度\r\n                        const populationPerHeight = 800000; // 每增加这么多人口，长方体的高度增加一单位\r\n                        const cuboidWidth = 20; // 长方体的宽度\r\n\r\n                        this.geoData.features.forEach(feature => {\r\n                            const center = this.geoPath.centroid(feature);\r\n                            const population = this.getPopulation(feature);\r\n                            if (population >= 1000000) { // 人口大于等于1000000时绘制长方体\r\n                                const height = baseHeight + (population / populationPerHeight); // 长方体的总高度\r\n\r\n                                if (this.ifDoubleEncoding == false) {\r\n                                    d3.select(\".\" + this.value + \"-legend\").selectAll(\"*\").remove();\r\n                                    this.svg.append('rect')\r\n                                    .attr('x', center[0] - cuboidWidth / 2)\r\n                                    .attr('y', center[1] - height)\r\n                                    .attr('width', cuboidWidth)\r\n                                    .attr('height', height)\r\n                                    .attr('fill', 'rgba(230, 158, 165, 0.7)');\r\n                                } else {\r\n                                    this.svg.append('rect')\r\n                                    .attr('x', center[0] - cuboidWidth / 2)\r\n                                    .attr('y', center[1] - height)\r\n                                    .attr('width', cuboidWidth)\r\n                                    .attr('height', height)\r\n                                    .attr('fill', this.colorFunctionL(population))\r\n                                    .attr('opacity', '0.7');\r\n                                    \r\n                                }\r\n                            }\r\n                        });\r\n\r\n                        //draw legend\r\n                        for (let i = 0, delta = 20, px = 50; i < 4; i++) {\r\n                            let t = 1000000*Math.pow(5, i);\r\n                            let v = t / 800000;\r\n                            this.svg.append('rect')\r\n                                .attr('x', px)\r\n                                .attr('y', 330-v)\r\n                                .attr('width', 20)\r\n                                .attr('height', v)\r\n                                .attr('fill', 'rgba(230, 158, 165, 0.7)');\r\n                                const label = t < 1000 ? Math.floor(t) :\r\n                                t < 1000000 ? Math.floor(t / 1000) + \"k\" :\r\n                                Math.floor(t / 1000000) + \"m\";\r\n                                this.svg.append('text')\r\n                                .attr('x', px)\r\n                                .attr('y', 320-v)\r\n                                .text(label);\r\n                            px += 2 * delta;\r\n                        }\r\n                    }\r\n                }\r\n\r\n\r\n                // Encoding Size\r\n                else if (type === this.myType['Size']) {\r\n                    this.encodingChannelType = type;\r\n\r\n                    this.encodingChannel = () => {\r\n                        this.svg.selectAll('path').attr(\"fill\", this.defaultColor);\r\n\r\n                        // 在地图上绘制人口方块\r\n                        // this.drawPopulationSquares();\r\n                        const populationExtent = d3.extent(this.geoData.features, d => this.getPopulation(d));\r\n                        const sizeScale = d3.scaleSqrt()\r\n                            .domain(populationExtent)\r\n                            .range([5, 50]); // 方块大小的范围\r\n\r\n                        // 直接在现有的SVG上绘制方块，不清除之前的内容\r\n                        this.geoData.features.forEach(feature => {\r\n                            const [x, y] = this.geoPath.centroid(feature);\r\n                            const population = this.getPopulation(feature);\r\n                            if (population >= 1000000) { // 人口大于等于1000000时绘制方块\r\n                                if (this.ifDoubleEncoding == false) {\r\n                                    d3.select(\".\" + this.value + \"-legend\").selectAll(\"*\").remove();\r\n                                    this.svg.append('rect')\r\n                                    .attr('x', x - sizeScale(population) / 2)\r\n                                    .attr('y', y - sizeScale(population) / 2)\r\n                                    .attr('width', sizeScale(population))\r\n                                    .attr('height', sizeScale(population))\r\n                                    .attr('fill', 'rgba(230, 158, 165, 0.7)');\r\n                                } else {\r\n                                    this.svg.append('rect')\r\n                                    .attr('x', x - sizeScale(population) / 2)\r\n                                    .attr('y', y - sizeScale(population) / 2)\r\n                                    .attr('width', sizeScale(population))\r\n                                    .attr('height', sizeScale(population))\r\n                                    .attr('fill', this.colorFunctionL(population))\r\n                                    .attr('opacity', '0.7');\r\n                                }\r\n                                \r\n                            }\r\n                        });\r\n\r\n                        //draw size legend\r\n                        for (let i = 0, delta = 20, py = 100; i < 4; i++) {\r\n                            let t = 1000000*Math.pow(5, i)\r\n                            let v = sizeScale(t);\r\n                            this.svg.append('rect')\r\n                                .attr('x', 50)\r\n                                .attr('y', py)\r\n                                .attr('width', v)\r\n                                .attr('height', v)\r\n                                .attr('fill', 'rgba(230, 158, 165, 0.7)');\r\n\r\n                            const label = t < 1000 ? Math.floor(t) :\r\n                                t < 1000000 ? Math.floor(t / 1000) + \"k\" :\r\n                                Math.floor(t / 1000000) + \"m\";\r\n                            this.svg.append('text')\r\n                                .attr('x', 65+v)\r\n                                .attr('y', py + v)\r\n                                .text(label);\r\n\r\n                            py += v + delta;\r\n\r\n\r\n                        }\r\n                    }\r\n                }\r\n\r\n                //Encoding Quantity\r\n                else if (type === this.myType['Quantity']) {\r\n                    this.encodingChannelType = type;\r\n\r\n                    this.encodingChannel = () => {\r\n                        this.svg.selectAll('path').attr(\"fill\", this.defaultColor);\r\n\r\n                        // 在地图上叠加人口图标\r\n                        const iconWidth = 10; // 图标的宽度\r\n                        const iconHeight = 25; // 图标的高度\r\n                        const iconGap = 2; // 调整图标间的间隔\r\n                        const scaleX = 0.12;\r\n                        const scaleY = 0.12;\r\n\r\n                        // 直接在现有的SVG上绘制图标，不清除之前的内容\r\n                        this.geoData.features.forEach(feature => {\r\n                            const center = this.geoPath.centroid(feature);\r\n                            const population = this.getPopulation(feature);\r\n\r\n                            // 只有当人口大于等于1000000时才绘制图标\r\n                            if (population >= 1000000) {\r\n                                const totalIcons = Math.ceil(population / 8000000); // 总图标数\r\n\r\n                                for (let i = 0; i < totalIcons; i++) {\r\n                                    // 计算图标的位置\r\n                                    // 将图标排列成一行显示5个图标的形式\r\n                                    const x = center[0] - ((iconWidth + iconGap) * 5 / 2) + ((i % 5) * (iconWidth + iconGap));\r\n                                    const y = center[1] + (Math.floor(i / 5) * (iconHeight + iconGap));\r\n                                    // 添加图标\r\n                                    if (this.ifDoubleEncoding == false) {\r\n                                        d3.select(\".\" + this.value + \"-legend\").selectAll(\"*\").remove();\r\n                                        // this.svg.append('image')\r\n                                        // .attr('xlink:href', require('../assets/PersonIcon.svg')) // 图标的路径\r\n                                        // .attr('x', x)\r\n                                        // .attr('y', y)\r\n                                        // .attr('width', iconWidth)\r\n                                        // .attr('height', iconHeight)\r\n                                        // .attr('opcacity', 0.7);\r\n                                        var g = this.svg.append('g');\r\n                                        g.append('path')\r\n                                            .attr('d', \"M7.98419 18.4236L14.1394 18.9365L17.217 18.4236H22.3464L25.9369 19.4495L27.9886 22.5271L29.5274 26.1176V32.2728V37.9151L28.5016 42.0186L24.911 43.0445L24.3981 45.0962L22.3464 52.7902L20.8076 58.4325H9.523V55.8678L7.98419 49.1997L6.44539 44.0703L2.85485 41.5057L1.82898 34.3246V26.1176L4.90659 20.4753L7.98419 18.4236Z\")\r\n                                            .attr('d', \"M18.7558 14.8331L22.3464 9.19079L21.8334 4.57438L19.7817 2.52264L15.6782 2.0097L11.5747 2.52264L7.98419 7.13905L9.523 11.7555L12.6006 14.8331H18.7558Z\")\r\n                                            .attr('d', \"M7.98419 18.4236L14.1394 18.9365L17.217 18.4236H22.3464L25.9369 19.4495L27.9886 22.5271L29.5274 26.1176V32.2728V37.9151L28.5016 42.0186L24.911 43.0445L24.3981 45.0962L22.3464 52.7902L20.8076 58.4325H9.523V55.8678L7.98419 49.1997L6.44539 44.0703L2.85485 41.5057L1.82898 34.3246V26.1176L4.90659 20.4753L7.98419 18.4236Z\")\r\n                                            .attr('d', \"M18.7558 14.8331L22.3464 9.19079L21.8334 4.57438L19.7817 2.52264L15.6782 2.0097L11.5747 2.52264L7.98419 7.13905L9.523 11.7555L12.6006 14.8331H18.7558Z\")\r\n                                            .attr('d', \"M15.6781 17.0787C13.9892 17.0787 12.3381 16.5778 10.9338 15.6395C9.52952 14.7011 8.43501 13.3674 7.78872 11.807C7.14243 10.2465 6.97338 8.52951 7.30295 6.87302C7.63253 5.21652 8.44592 3.69496 9.64027 2.50075C10.8346 1.30655 12.3563 0.493336 14.0128 0.16396C15.6694 -0.165417 17.3864 0.00383719 18.9467 0.650316C20.507 1.2968 21.8406 2.39146 22.7788 3.79588C23.717 5.2003 24.2177 6.8514 24.2175 8.54036C24.215 10.8043 23.3145 12.9748 21.7136 14.5755C20.1127 16.1763 17.9421 17.0765 15.6781 17.0787ZM15.6781 3.07864C14.5979 3.07864 13.5419 3.39896 12.6438 3.9991C11.7456 4.59925 11.0455 5.45225 10.6322 6.45025C10.2188 7.44825 10.1106 8.54642 10.3214 9.60589C10.5321 10.6654 11.0523 11.6385 11.8161 12.4024C12.5799 13.1662 13.5531 13.6864 14.6126 13.8971C15.6721 14.1079 16.7702 13.9997 17.7682 13.5863C18.7662 13.173 19.6192 12.4729 20.2194 11.5747C20.8195 10.6766 21.1399 9.62059 21.1399 8.54036C21.1382 7.09232 20.5623 5.70406 19.5384 4.68014C18.5144 3.65622 17.1262 3.08027 15.6781 3.07864Z\")\r\n                                            .attr('d', \"M15.792 60H9.45726C9.08681 60 8.72879 59.8664 8.44894 59.6236C8.16909 59.3809 7.9862 59.0454 7.93384 58.6787L5.98469 45.0561C4.54314 45.0323 3.16578 44.4558 2.137 43.4458C1.10822 42.4357 0.506573 41.0691 0.456284 39.6283L0.0100298 27.8882C-0.0526851 26.4359 0.179207 24.986 0.691737 23.6257C1.20427 22.2653 1.98683 21.0229 2.99229 19.973C3.99775 18.9232 5.2053 18.0877 6.54222 17.5169C7.87913 16.9462 9.31774 16.6519 10.7714 16.6519H15.6781C16.0862 16.6519 16.4776 16.814 16.7662 17.1026C17.0548 17.3912 17.2169 17.7826 17.2169 18.1907C17.2169 18.5988 17.0548 18.9902 16.7662 19.2788C16.4776 19.5674 16.0862 19.7295 15.6781 19.7295H10.7734C9.73489 19.7296 8.7071 19.94 7.75202 20.348C6.79694 20.7559 5.93434 21.353 5.2162 22.1033C4.49806 22.8535 3.93924 23.7414 3.57342 24.7134C3.2076 25.6854 3.04236 26.7214 3.08764 27.759L3.53389 39.5082C3.55708 40.1721 3.83774 40.8009 4.31645 41.2614C4.79515 41.7219 5.43431 41.978 6.09856 41.9755H7.32345C7.69372 41.9757 8.05149 42.1094 8.33113 42.3521C8.61076 42.5948 8.79351 42.9302 8.84584 43.2968L10.795 56.9183H15.7961C16.2042 56.9183 16.5956 57.0804 16.8842 57.369C17.1728 57.6576 17.3349 58.049 17.3349 58.4571C17.3349 58.8652 17.1728 59.2566 16.8842 59.5452C16.5956 59.8337 16.2042 59.9959 15.7961 59.9959L15.792 60Z\")\r\n                                            .attr('d', 'M21.8989 60H15.5642C15.1561 60 14.7647 59.8379 14.4761 59.5493C14.1875 59.2607 14.0254 58.8693 14.0254 58.4612C14.0254 58.0531 14.1875 57.6617 14.4761 57.3731C14.7647 57.0845 15.1561 56.9224 15.5642 56.9224H20.5653L22.5145 43.3009C22.5668 42.9343 22.7495 42.5989 23.0292 42.3562C23.3088 42.1135 23.6666 41.9798 24.0368 41.9796H25.2597C25.9239 41.9821 26.5631 41.726 27.0418 41.2655C27.5205 40.805 27.8012 40.1762 27.8244 39.5123L28.2706 27.7713C28.3176 26.7327 28.1536 25.6954 27.7886 24.7219C27.4235 23.7485 26.865 22.8591 26.1467 22.1075C25.4283 21.3559 24.5652 20.7577 23.6092 20.349C22.6533 19.9403 21.6244 19.7295 20.5848 19.7295H15.6781C15.2699 19.7295 14.8785 19.5674 14.59 19.2788C14.3014 18.9902 14.1393 18.5988 14.1393 18.1907C14.1393 17.7826 14.3014 17.3912 14.59 17.1026C14.8785 16.814 15.2699 16.6519 15.6781 16.6519H20.5827C22.0371 16.6519 23.4764 16.9464 24.8139 17.5176C26.1514 18.0889 27.3593 18.9251 28.3649 19.9759C29.3705 21.0266 30.1529 22.2701 30.6649 23.6313C31.1769 24.9926 31.408 26.4435 31.3441 27.8964L30.8979 39.6283C30.8476 41.0691 30.2459 42.4357 29.2171 43.4458C28.1884 44.4558 26.811 45.0323 25.3694 45.0561L23.4203 58.6787C23.368 59.045 23.1854 59.3803 22.906 59.623C22.6265 59.8656 22.269 59.9995 21.8989 60Z')\r\n                                            .attr('transform', 'scale(' + scaleX + ',' + scaleY + ')')\r\n                                            .attr('fill', 'rgba(230, 158, 165, 0.7)')\r\n                                            .attr('stroke', 'none')\r\n                                            .attr('stroke-width', 3);\r\n                                        g.attr('transform', 'translate('+x+','+y+')');\r\n                                    } else {\r\n                                        var gg = this.svg.append('g');\r\n                                        gg.append('path')\r\n                                            .attr('d', 'M14.8025 62.0243H13.3025V63.5243V109.33C13.3025 112.457 10.7652 114.995 7.62974 114.995C4.52341 114.995 2.05603 112.482 2.05603 109.33V58.5276C2.05603 47.7847 10.8631 39.0498 21.6399 39.0498H57.8253C68.5917 39.0498 77.4056 47.7849 77.4056 58.5276V109.33C77.4056 112.483 74.9364 114.995 71.8267 114.995C68.6982 114.995 66.1557 112.454 66.1557 109.33V63.5243V62.0243H64.6557H60.9589H59.4589V63.5243V190.975C59.4589 195.441 55.8001 199.086 51.3147 199.086C46.8293 199.086 43.2017 195.448 43.2017 190.975V116.968V115.468H41.7017H37.7564H36.2564V116.968V190.975C36.2564 195.449 32.6278 199.086 28.1539 199.086C23.6745 199.086 20.0392 195.447 20.0392 190.975C20.0392 187.046 20.0184 155.183 19.9975 124.302C19.9871 108.862 19.9767 93.6674 19.9689 82.3327L19.9594 68.6775L19.9568 64.8683L19.9561 63.8666L19.9559 63.61L19.9558 63.5451V63.5288V63.5247C19.9558 63.5238 19.9558 63.5233 18.4558 63.5243L19.9558 63.5233L19.9548 62.0243H18.4558H14.8025ZM39.7326 31.8474C31.5119 31.8474 24.8553 25.1836 24.8535 16.9684C24.8537 8.74658 31.5101 2.08571 39.7326 2.08571C47.945 2.08571 54.6081 8.74501 54.6081 16.9684C54.6081 25.1831 47.945 31.8474 39.7326 31.8474Z')\r\n                                            .attr('transform', 'scale(' + scaleX + ',' + scaleY + ')')\r\n                                            .attr('fill', this.colorFunctionL(population))\r\n                                            .attr('stroke', 'black')\r\n                                            .attr('stroke-width', 3);\r\n                                        gg.attr('transform', 'translate(' + x + ',' + y + ')');\r\n                                    }\r\n                                }\r\n                            }\r\n                        });\r\n                        //draw quantity legend\r\n                        this.svg.append('image')\r\n                            .attr('xlink:href', require('../assets/PersonIcon.svg')) // 图标的路径\r\n                            .attr('x', 50)\r\n                            .attr('y', 100)\r\n                            .attr('width', iconWidth*2)\r\n                            .attr('height', iconHeight*2);\r\n                        this.svg.append('text')\r\n                            .attr('x', 70)\r\n                            .attr('y', 120)\r\n                            .text(':100k');\r\n                    }\r\n\r\n                    \r\n                }\r\n\r\n                else {\r\n                    // // 如果没有适用的编码方式\r\n                    // this.encodingChannelType = -1; // 或其他表示无效编码方式的值\r\n\r\n                    // // 显示一条消息\r\n                    // this.encodingChannel = () => {\r\n                    //     this.svg.selectAll('path').attr(\"fill\", this.defaultColor);\r\n\r\n                    //     // 首先，清除可能存在的旧消息\r\n                    //     d3.select(\".\" + this.value + \"-legend\").selectAll(\"*\").remove();\r\n\r\n                    //     // 向legend SVG元素中添加文本\r\n                    //     d3.select(\".\" + this.value + \"-legend\")\r\n                    //         .append('text')\r\n                    //         .attr('x', 10) // 根据需要调整文本的x位置\r\n                    //         .attr('y', 20) // 根据需要调整文本的y位置\r\n                    //         .attr('fill', 'black') // 文本颜色\r\n                    //         .style('font-size', '14px') // 文本大小\r\n                    //         .text('This encoding method is not applicable to the current data provided.');\r\n                    // };\r\n                    // d3.select(\".\" + this.value + \"-legend\").selectAll(\"*\").remove();\r\n                    this.showErrorDialog(\"Encoding Channel Not Support\", \"The selected encoding channel only support the data your uploaded!\")\r\n                }\r\n            }\r\n            else {\r\n                d3.select(\".\" + this.value + \"-legend\").selectAll(\"*\").remove();\r\n                if (type === this.myType['Glyph']) {\r\n                    this.encodingChannelType = type;\r\n                    this.encodingChannel = () => {\r\n                        this.svg.selectAll('path').attr(\"fill\", this.defaultColor);\r\n\r\n                        this.geoData.features.forEach(feature => {\r\n                            const flagBase64 = this.getPopulation(feature); // 使用getPopulation方法尝试从infoData获取国旗的base64编码\r\n\r\n                            // 检查flagBase64是否不等于-1，仅当不等于-1时，才显示国旗\r\n                            if (flagBase64 !== -1) {\r\n                                const center = this.geoPath.centroid(feature); // 计算国家地理中心点\r\n\r\n                                // 在地图的国家中心点上添加国旗图像\r\n                                if (this.ifDoubleEncoding == false) {\r\n                                    this.svg.append('image')\r\n                                    .attr('xlink:href', flagBase64) // 使用国旗的base64编码\r\n                                    .attr('x', center[0] - 10) // 你可能需要调整这个以适合国旗图像的大小和位置\r\n                                    .attr('y', center[1] - 10) // 同上\r\n                                    .attr('width', 20) // 根据需要调整国旗的尺寸\r\n                                    .attr('height', 20);\r\n                                } else {\r\n                                    this.svg.append('image')\r\n                                    .attr('xlink:href', flagBase64) // 使用国旗的base64编码\r\n                                    .attr('x', center[0] - 10) // 你可能需要调整这个以适合国旗图像的大小和位置\r\n                                    .attr('y', center[1] - 10) // 同上\r\n                                    .attr('width', 20) // 根据需要调整国旗的尺寸\r\n                                    .attr('height', 20)\r\n                                    .attr('fill', this.colorFunctionL());\r\n                                }\r\n                                \r\n                            }\r\n                        });\r\n                    };\r\n                }\r\n                else if (type === this.myType['Color (Hue)']) {\r\n                    this.encodingChannelType = type;\r\n\r\n                    // 1. 创建一个包含所有国家名称的数组\r\n                    const countries = this.geoData.features.map(d => d.properties.NAME);\r\n\r\n                    // 2. 自定义一个包含51种颜色的数组\r\n                    const customColors = [\r\n                        \"#e6194B\", \"#3cb44b\", \"#ffe119\", \"#4363d8\", \"#f58231\", \"#911eb4\", \"#46f0f0\", \"#f032e6\",\r\n                        \"#bcf60c\", \"#fabebe\", \"#008080\", \"#e6beff\", \"#9a6324\", \"#fffac8\", \"#800000\", \"#aaffc3\",\r\n                        \"#808000\", \"#ffd8b1\", \"#000075\", \"#808080\", \"#123123\", \"#000000\",\r\n                        // 添加更多颜色以确保有51种不同的颜色\r\n                        \"#59656d\", \"#c17b81\", \"#b5d99c\", \"#f5b971\", \"#8fb5aa\", \"#f28a9b\", \"#a4c3ed\", \"#8ec6c5\",\r\n                        \"#c6d7eb\", \"#ead3c1\", \"#92b4a7\", \"#f4ebc1\", \"#cbb3bf\", \"#acb7ae\", \"#e2c2de\", \"#cccccc\",\r\n                        \"#b97a57\", \"#ab69c6\", \"#966fd6\", \"#cfcfc4\", \"#b39eb5\", \"#779ecb\", \"#fdfd96\", \"#836953\",\r\n                        \"#779ecb\", \"#03c03c\", \"#966fd6\", \"#c23b22\", \"#f49ac2\", \"#fadadd\"\r\n                    ];\r\n\r\n                    // 使用d3.scaleOrdinal来映射国家到颜色\r\n                    const colorScale = (d) => {\r\n                        if (d && d.properties && d.properties.NAME)\r\n                            return d3.scaleOrdinal(countries, customColors)(d.properties.NAME);\r\n                        else\r\n                            return this.defaultColor;\r\n                    }\r\n\r\n                    // 重写encodingChannel函数\r\n                    this.encodingChannel = () => {\r\n                        // 在地图上为每个国家应用颜色\r\n                        this.svg.selectAll('path')\r\n                            .attr('fill', d => colorScale(d)) // 使用比例尺确定颜色\r\n                            .attr('stroke', '#ffffff'); // 设置边框颜色，可根据需要调整\r\n\r\n                        this.svg.selectAll('circle')\r\n                            .attr('fill', d => colorScale(d))\r\n                            .attr('stroke', '#ffffff');\r\n                    };\r\n                }\r\n                else {\r\n                    // // 如果没有适用的编码方式\r\n                    // this.encodingChannelType = -1; // 或其他表示无效编码方式的值\r\n\r\n                    // // 显示一条消息\r\n                    // this.encodingChannel = () => {\r\n                    //     this.svg.selectAll('path').attr(\"fill\", this.defaultColor);\r\n\r\n                    //     // 首先，清除可能存在的旧消息\r\n                    //     d3.select(\".\" + this.value + \"-legend\").selectAll(\"*\").remove();\r\n\r\n                    //     // 向legend SVG元素中添加文本\r\n                    //     d3.select(\".\" + this.value + \"-legend\")\r\n                    //         .append('text')\r\n                    //         .attr('x', 10) // 根据需要调整文本的x位置\r\n                    //         .attr('y', 20) // 根据需要调整文本的y位置\r\n                    //         .attr('fill', 'black') // 文本颜色\r\n                    //         .style('font-size', '14px') // 文本大小\r\n                    //         .text('This encoding method is not applicable to the current data provided.');\r\n                    // };\r\n\r\n                    this.showErrorDialog(\"Encoding Channel Not Support\", \"The selected encoding channel only support the data your uploaded!\")\r\n                }\r\n\r\n\r\n            }\r\n\r\n\r\n            this.drawSvg();\r\n        },\r\n\r\n        drawColorLuminanceLegend() {\r\n            const legendWidth = this.legendWidth;\r\n            const legendHeight = 20;\r\n            const numSegments = 8; // 将色彩标尺等分成5段\r\n\r\n            const segmentWidth = legendWidth / numSegments; // 每个段的宽度\r\n            const populationWidth = Math.pow(this.mostPopulation, 0.25) / numSegments\r\n\r\n            const legendGradient = this.legend.append('svg')\r\n                .attr('width', legendWidth)\r\n                .attr('height', legendHeight);\r\n\r\n            this.legend.append('text')\r\n                .attr('x', 0)\r\n                .attr('y', legendHeight + 15)\r\n                // .attr('text-anchor', 'middle')\r\n                .text('0')\r\n                .style('font-size', '10px');\r\n\r\n            // 绘制每个段的渐变色块和白色分隔线\r\n            for (let i = 0; i < numSegments; i++) {\r\n                const segmentStart = i * segmentWidth;\r\n                const segmentEnd = (i + 1) * segmentWidth;\r\n\r\n                const populationStart = Math.pow(i * populationWidth, 4);\r\n                const populationEnd = Math.pow((i + 1) * populationWidth, 4);\r\n\r\n                // 添加渐变色块\r\n                const gradient = legendGradient.append('defs')\r\n                    .append('linearGradient')\r\n                    .attr('id', `legendGradient${i}`)\r\n                    .attr('x1', '0%')\r\n                    .attr('y1', '0%')\r\n                    .attr('x2', '100%')\r\n                    .attr('y2', '0%');\r\n\r\n                gradient.append('stop')\r\n                    .attr('offset', '0%')\r\n                    .attr('stop-color', this.colorFunctionL(populationStart));\r\n\r\n                gradient.append('stop')\r\n                    .attr('offset', '100%')\r\n                    .attr('stop-color', this.colorFunctionL(populationEnd));\r\n\r\n                // 绘制渐变色块\r\n                legendGradient.append('rect')\r\n                    .attr('x', segmentStart)\r\n                    .attr('y', 0)\r\n                    .attr('width', segmentWidth)\r\n                    .attr('height', legendHeight)\r\n                    .style('fill', `url(#legendGradient${i})`);\r\n\r\n                // 添加白色分隔线\r\n                if (i < numSegments - 1) {\r\n                    legendGradient.append('line')\r\n                        .attr('x1', segmentEnd)\r\n                        .attr('y1', 0)\r\n                        .attr('x2', segmentEnd)\r\n                        .attr('y2', legendHeight)\r\n                        .style('stroke', '#ffffff')\r\n                        .style('stroke-width', 1);\r\n                }\r\n\r\n                // 添加数值标签\r\n                const label = populationEnd < 1000 ? Math.floor(populationEnd) :\r\n                    populationEnd < 1000000 ? Math.floor(populationEnd / 1000) + \"k\" :\r\n                        Math.floor(populationEnd / 1000000) + \"m\"\r\n                this.legend.append('text')\r\n                    .attr('x', segmentEnd)\r\n                    .attr('y', legendHeight + 15)\r\n                    .attr('text-anchor', 'middle')\r\n                    .text(label)\r\n                    .style('font-size', '10px');\r\n            }\r\n        },\r\n        drawColorHueLegend() {\r\n            const legendData = [\r\n                { color: 'rgb(142, 207, 201)', text: '< 5M', minPopulation: 0, maxPopulation: 5000000 },\r\n                { color: 'rgb(255, 190, 122)', text: '5M-10M', minPopulation: 5000000, maxPopulation: 10000000 },\r\n                { color: 'rgb(250, 127, 111)', text: '10M-50M', minPopulation: 10000000, maxPopulation: 50000000 },\r\n                { color: 'rgb(130, 176, 210)', text: '50M-100M', minPopulation: 50000000, maxPopulation: 100000000 },\r\n                { color: 'rgb(190, 184, 220)', text: '>100M', minPopulation: 100000000, maxPopulation: Infinity }\r\n            ];\r\n\r\n            const legendWidth = 20;\r\n            const legendHeight = 20;\r\n            const legendSpacing = 10;\r\n            const legendX = 10; // Starting x position for the legend\r\n            const legendY = 10; // Starting y position for the legend\r\n\r\n            // Create a group for the legend\r\n            // const legend = this.svg.append('g')\r\n            //     .attr('class', 'legend')\r\n            //     .attr('transform', `translate(${legendX},${legendY})`);\r\n\r\n            this.legend.append('g')\r\n                .attr('class', 'legend')\r\n                .attr('transform', `translate(${legendX},${legendY})`);\r\n\r\n            // Add color swatches\r\n            this.legend.selectAll('rect')\r\n                .data(legendData)\r\n                .enter().append('rect')\r\n                .attr('x', (d, i) => i * (legendHeight + legendSpacing) * 2)\r\n                .attr('y', 0)\r\n                .attr('width', legendWidth)\r\n                .attr('height', legendHeight)\r\n                .style('fill', d => d.color);\r\n\r\n            // Add text labels\r\n            this.legend.selectAll('text')\r\n                .data(legendData)\r\n                .enter().append('text')\r\n                .attr('x', (d, i) => i * (legendHeight + legendSpacing) * 2)\r\n                .attr('y', legendWidth + 5)\r\n                .attr('dy', '.35em') // Vertically center\r\n                .style('font-size', '10px')\r\n                .text(d => d.text);\r\n        },\r\n\r\n        doubleEncoding() {\r\n            this.ifDoubleEncoding = !this.ifDoubleEncoding;\r\n            this.ifDoubleEncodingText = this.ifDoubleEncoding ? 'Double Encoding: ON' : 'Double Encoding: OFF';\r\n            if (this.ifDoubleEncoding)\r\n                alert('Attention! Only supporting for one color method with one length, size or quantity method.');\r\n        },\r\n    },\r\n\r\n}\r\n</script>\r\n\r\n<style scoped>\r\n.container {\r\n    padding: 0px;\r\n}\r\n\r\n.sub-container {\r\n    border: 1px dotted;\r\n    border-color: #E1CBD8;\r\n}\r\n\r\n.sub-title {\r\n    margin-top: 6px;\r\n    padding: 3px;\r\n    font-size: 14px;\r\n    border-radius: 6px;\r\n    display: block;\r\n    width: fit-content;\r\n    background-color: #E1CBD8;\r\n}\r\n\r\n#sub-title-0 {\r\n    margin-top: 0px;\r\n}\r\n\r\n.element {\r\n    background-color: white;\r\n}\r\n\r\n.element:hover {\r\n    transform: scale(1.12);\r\n    border: 0.67px solid;\r\n    border-color: #E1CBD8;\r\n}\r\n\r\n.row-with-line {\r\n    position: relative; /* 设置相对定位，以便将竖线定位相对于该行 */\r\n}\r\n\r\n.row-with-line::before {\r\n    content: '';\r\n    width: 3px; /* 竖线的宽度 */\r\n    height: 90%; /* 竖线的高度*/\r\n    background-color: pink; /* 竖线的颜色 */\r\n    position: absolute; /* 使竖线定位在行的左侧 */\r\n    left: 0; /* 将竖线定位在行的左侧 */\r\n    top: 0; /* 将竖线定位在行的顶部 */\r\n}\r\n\r\n#myButton {\r\n    border: 2px solid transparent; /* 设置默认的边框，透明色 */\r\n    outline: none;                 /* 取消浏览器默认的焦点轮廓 */\r\n    /* border-color: pink; */\r\n}\r\n\r\n#myButton:hover {\r\n    border-color: pink;  /* 设置选中时的边框颜色为粉色 */\r\n    /*outline: none;      /* 取消浏览器默认的焦点轮廓 */\r\n}\r\n</style>","import { render } from \"./instance.vue?vue&type=template&id=691274df&scoped=true\"\nimport script from \"./instance.vue?vue&type=script&lang=js\"\nexport * from \"./instance.vue?vue&type=script&lang=js\"\n\nimport \"./instance.vue?vue&type=style&index=0&id=691274df&scoped=true&lang=css\"\n\nimport exportComponent from \"../../node_modules/vue-loader/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render],['__scopeId',\"data-v-691274df\"]])\n\nexport default __exports__","import { render } from \"./App.vue?vue&type=template&id=2ed193f0\"\nimport script from \"./App.vue?vue&type=script&lang=js\"\nexport * from \"./App.vue?vue&type=script&lang=js\"\n\nimport exportComponent from \"../node_modules/vue-loader/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render]])\n\nexport default __exports__","// Styles\r\nimport '@mdi/font/css/materialdesignicons.css'\r\nimport 'vuetify/styles'\r\n\r\n// Vuetify\r\nimport { createVuetify } from 'vuetify'\r\n\r\nexport default createVuetify(\r\n  // https://vuetifyjs.com/en/introduction/why-vuetify/#feature-guides\r\n)\r\n","/**\r\n * plugins/webfontloader.js\r\n *\r\n * webfontloader documentation: https://github.com/typekit/webfontloader\r\n */\r\n\r\nexport async function loadFonts () {\r\n  const webFontLoader = await import(/* webpackChunkName: \"webfontloader\" */'webfontloader')\r\n\r\n  webFontLoader.load({\r\n    google: {\r\n      families: ['Roboto:100,300,400,500,700,900&display=swap'],\r\n    },\r\n  })\r\n}\r\n","import { createApp } from 'vue'\r\nimport App from './App.vue'\r\nimport vuetify from './plugins/vuetify'\r\nimport { loadFonts } from './plugins/webfontloader'\r\n\r\nloadFonts()\r\n\r\ncreateApp(App)\r\n  .use(vuetify)\r\n  .mount('#app')\r\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n// expose the modules object (__webpack_modules__)\n__webpack_require__.m = __webpack_modules__;\n\n","var deferred = [];\n__webpack_require__.O = function(result, chunkIds, fn, priority) {\n\tif(chunkIds) {\n\t\tpriority = priority || 0;\n\t\tfor(var i = deferred.length; i > 0 && deferred[i - 1][2] > priority; i--) deferred[i] = deferred[i - 1];\n\t\tdeferred[i] = [chunkIds, fn, priority];\n\t\treturn;\n\t}\n\tvar notFulfilled = Infinity;\n\tfor (var i = 0; i < deferred.length; i++) {\n\t\tvar chunkIds = deferred[i][0];\n\t\tvar fn = deferred[i][1];\n\t\tvar priority = deferred[i][2];\n\t\tvar fulfilled = true;\n\t\tfor (var j = 0; j < chunkIds.length; j++) {\n\t\t\tif ((priority & 1 === 0 || notFulfilled >= priority) && Object.keys(__webpack_require__.O).every(function(key) { return __webpack_require__.O[key](chunkIds[j]); })) {\n\t\t\t\tchunkIds.splice(j--, 1);\n\t\t\t} else {\n\t\t\t\tfulfilled = false;\n\t\t\t\tif(priority < notFulfilled) notFulfilled = priority;\n\t\t\t}\n\t\t}\n\t\tif(fulfilled) {\n\t\t\tdeferred.splice(i--, 1)\n\t\t\tvar r = fn();\n\t\t\tif (r !== undefined) result = r;\n\t\t}\n\t}\n\treturn result;\n};","var getProto = Object.getPrototypeOf ? function(obj) { return Object.getPrototypeOf(obj); } : function(obj) { return obj.__proto__; };\nvar leafPrototypes;\n// create a fake namespace object\n// mode & 1: value is a module id, require it\n// mode & 2: merge all properties of value into the ns\n// mode & 4: return value when already ns object\n// mode & 16: return value when it's Promise-like\n// mode & 8|1: behave like require\n__webpack_require__.t = function(value, mode) {\n\tif(mode & 1) value = this(value);\n\tif(mode & 8) return value;\n\tif(typeof value === 'object' && value) {\n\t\tif((mode & 4) && value.__esModule) return value;\n\t\tif((mode & 16) && typeof value.then === 'function') return value;\n\t}\n\tvar ns = Object.create(null);\n\t__webpack_require__.r(ns);\n\tvar def = {};\n\tleafPrototypes = leafPrototypes || [null, getProto({}), getProto([]), getProto(getProto)];\n\tfor(var current = mode & 2 && value; typeof current == 'object' && !~leafPrototypes.indexOf(current); current = getProto(current)) {\n\t\tObject.getOwnPropertyNames(current).forEach(function(key) { def[key] = function() { return value[key]; }; });\n\t}\n\tdef['default'] = function() { return value; };\n\t__webpack_require__.d(ns, def);\n\treturn ns;\n};","// define getter functions for harmony exports\n__webpack_require__.d = function(exports, definition) {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.f = {};\n// This file contains only the entry chunk.\n// The chunk loading function for additional chunks\n__webpack_require__.e = function(chunkId) {\n\treturn Promise.all(Object.keys(__webpack_require__.f).reduce(function(promises, key) {\n\t\t__webpack_require__.f[key](chunkId, promises);\n\t\treturn promises;\n\t}, []));\n};","// This function allow to reference async chunks\n__webpack_require__.u = function(chunkId) {\n\t// return url for filenames based on template\n\treturn \"js/\" + \"webfontloader\" + \".\" + \"fb94956d\" + \".js\";\n};","// This function allow to reference async chunks\n__webpack_require__.miniCssF = function(chunkId) {\n\t// return url for filenames based on template\n\treturn undefined;\n};","__webpack_require__.g = (function() {\n\tif (typeof globalThis === 'object') return globalThis;\n\ttry {\n\t\treturn this || new Function('return this')();\n\t} catch (e) {\n\t\tif (typeof window === 'object') return window;\n\t}\n})();","__webpack_require__.o = function(obj, prop) { return Object.prototype.hasOwnProperty.call(obj, prop); }","var inProgress = {};\nvar dataWebpackPrefix = \"geo-info-graphics-v1:\";\n// loadScript function to load a script via script tag\n__webpack_require__.l = function(url, done, key, chunkId) {\n\tif(inProgress[url]) { inProgress[url].push(done); return; }\n\tvar script, needAttach;\n\tif(key !== undefined) {\n\t\tvar scripts = document.getElementsByTagName(\"script\");\n\t\tfor(var i = 0; i < scripts.length; i++) {\n\t\t\tvar s = scripts[i];\n\t\t\tif(s.getAttribute(\"src\") == url || s.getAttribute(\"data-webpack\") == dataWebpackPrefix + key) { script = s; break; }\n\t\t}\n\t}\n\tif(!script) {\n\t\tneedAttach = true;\n\t\tscript = document.createElement('script');\n\n\t\tscript.charset = 'utf-8';\n\t\tscript.timeout = 120;\n\t\tif (__webpack_require__.nc) {\n\t\t\tscript.setAttribute(\"nonce\", __webpack_require__.nc);\n\t\t}\n\t\tscript.setAttribute(\"data-webpack\", dataWebpackPrefix + key);\n\n\t\tscript.src = url;\n\t}\n\tinProgress[url] = [done];\n\tvar onScriptComplete = function(prev, event) {\n\t\t// avoid mem leaks in IE.\n\t\tscript.onerror = script.onload = null;\n\t\tclearTimeout(timeout);\n\t\tvar doneFns = inProgress[url];\n\t\tdelete inProgress[url];\n\t\tscript.parentNode && script.parentNode.removeChild(script);\n\t\tdoneFns && doneFns.forEach(function(fn) { return fn(event); });\n\t\tif(prev) return prev(event);\n\t}\n\tvar timeout = setTimeout(onScriptComplete.bind(null, undefined, { type: 'timeout', target: script }), 120000);\n\tscript.onerror = onScriptComplete.bind(null, script.onerror);\n\tscript.onload = onScriptComplete.bind(null, script.onload);\n\tneedAttach && document.head.appendChild(script);\n};","// define __esModule on exports\n__webpack_require__.r = function(exports) {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","__webpack_require__.p = \"/\";","// no baseURI\n\n// object to store loaded and loading chunks\n// undefined = chunk not loaded, null = chunk preloaded/prefetched\n// [resolve, reject, Promise] = chunk loading, 0 = chunk loaded\nvar installedChunks = {\n\t524: 0\n};\n\n__webpack_require__.f.j = function(chunkId, promises) {\n\t\t// JSONP chunk loading for javascript\n\t\tvar installedChunkData = __webpack_require__.o(installedChunks, chunkId) ? installedChunks[chunkId] : undefined;\n\t\tif(installedChunkData !== 0) { // 0 means \"already installed\".\n\n\t\t\t// a Promise means \"currently loading\".\n\t\t\tif(installedChunkData) {\n\t\t\t\tpromises.push(installedChunkData[2]);\n\t\t\t} else {\n\t\t\t\tif(true) { // all chunks have JS\n\t\t\t\t\t// setup Promise in chunk cache\n\t\t\t\t\tvar promise = new Promise(function(resolve, reject) { installedChunkData = installedChunks[chunkId] = [resolve, reject]; });\n\t\t\t\t\tpromises.push(installedChunkData[2] = promise);\n\n\t\t\t\t\t// start chunk loading\n\t\t\t\t\tvar url = __webpack_require__.p + __webpack_require__.u(chunkId);\n\t\t\t\t\t// create error before stack unwound to get useful stacktrace later\n\t\t\t\t\tvar error = new Error();\n\t\t\t\t\tvar loadingEnded = function(event) {\n\t\t\t\t\t\tif(__webpack_require__.o(installedChunks, chunkId)) {\n\t\t\t\t\t\t\tinstalledChunkData = installedChunks[chunkId];\n\t\t\t\t\t\t\tif(installedChunkData !== 0) installedChunks[chunkId] = undefined;\n\t\t\t\t\t\t\tif(installedChunkData) {\n\t\t\t\t\t\t\t\tvar errorType = event && (event.type === 'load' ? 'missing' : event.type);\n\t\t\t\t\t\t\t\tvar realSrc = event && event.target && event.target.src;\n\t\t\t\t\t\t\t\terror.message = 'Loading chunk ' + chunkId + ' failed.\\n(' + errorType + ': ' + realSrc + ')';\n\t\t\t\t\t\t\t\terror.name = 'ChunkLoadError';\n\t\t\t\t\t\t\t\terror.type = errorType;\n\t\t\t\t\t\t\t\terror.request = realSrc;\n\t\t\t\t\t\t\t\tinstalledChunkData[1](error);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t};\n\t\t\t\t\t__webpack_require__.l(url, loadingEnded, \"chunk-\" + chunkId, chunkId);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n};\n\n// no prefetching\n\n// no preloaded\n\n// no HMR\n\n// no HMR manifest\n\n__webpack_require__.O.j = function(chunkId) { return installedChunks[chunkId] === 0; };\n\n// install a JSONP callback for chunk loading\nvar webpackJsonpCallback = function(parentChunkLoadingFunction, data) {\n\tvar chunkIds = data[0];\n\tvar moreModules = data[1];\n\tvar runtime = data[2];\n\t// add \"moreModules\" to the modules object,\n\t// then flag all \"chunkIds\" as loaded and fire callback\n\tvar moduleId, chunkId, i = 0;\n\tif(chunkIds.some(function(id) { return installedChunks[id] !== 0; })) {\n\t\tfor(moduleId in moreModules) {\n\t\t\tif(__webpack_require__.o(moreModules, moduleId)) {\n\t\t\t\t__webpack_require__.m[moduleId] = moreModules[moduleId];\n\t\t\t}\n\t\t}\n\t\tif(runtime) var result = runtime(__webpack_require__);\n\t}\n\tif(parentChunkLoadingFunction) parentChunkLoadingFunction(data);\n\tfor(;i < chunkIds.length; i++) {\n\t\tchunkId = chunkIds[i];\n\t\tif(__webpack_require__.o(installedChunks, chunkId) && installedChunks[chunkId]) {\n\t\t\tinstalledChunks[chunkId][0]();\n\t\t}\n\t\tinstalledChunks[chunkId] = 0;\n\t}\n\treturn __webpack_require__.O(result);\n}\n\nvar chunkLoadingGlobal = self[\"webpackChunkgeo_info_graphics_v1\"] = self[\"webpackChunkgeo_info_graphics_v1\"] || [];\nchunkLoadingGlobal.forEach(webpackJsonpCallback.bind(null, 0));\nchunkLoadingGlobal.push = webpackJsonpCallback.bind(null, chunkLoadingGlobal.push.bind(chunkLoadingGlobal));","// startup\n// Load entry module and return exports\n// This entry module depends on other loaded chunks and execution need to be delayed\nvar __webpack_exports__ = __webpack_require__.O(undefined, [504], function() { return __webpack_require__(7679); })\n__webpack_exports__ = __webpack_require__.O(__webpack_exports__);\n"],"names":["_createBlock","_component_v_app","default","_withCtx","_createVNode","_component_v_main","_component_v_app_bar","elevation","extension","_component_v_tabs","modelValue","$setup","currentItem","_cache","$event","_component_v_tab","value","_component_v_icon","_createTextVNode","_","_createElementBlock","_Fragment","_renderList","items","item","key","_toDisplayString","more","length","_component_v_menu","activator","props","_component_v_btn","_mergeProps","class","height","width","rounded","variant","_component_v_list","_component_v_list_item","onClick","$options","addItem","_createCommentVNode","_component_v_app_bar_title","_component_v_app_bar_nav_icon","_ctx","drawer","_component_v_window","style","_component_v_window_item","_component_homeTab","concat","_component_instanceTab","geoData","infoData","isNumerical","infoDataType","propName","infoDataName","_createElementVNode","_component_v_container","_component_v_row","_hoisted_1","_component_v_divider","_hoisted_2","_component_v_file_input","$data","files","label","accept","onChange","uploadFile","uploaded","_component_v_col","Object","keys","data","prop","_component_v_select","datatype","color","createInstance","disabled","clear","name","methods","this","targetKey","readFile","file","Promise","resolve","reject","reader","FileReader","onload","e","fileContents","target","result","d3","then","find","reduce","acc","cur","isNaN","values","catch","error","console","readAsDataURL","log","loadInfoData","setup","inject","__exports__","_component_v_card","ref","id","$props","_component_v_expansion_panels","_component_v_expansion_panel","_component_v_expansion_panel_title","_component_v_expansion_panel_text","setRepresentation","myType","_component_v_img","src","require","contain","setProjection","type","ifDoubleEncodingText","doubleEncoding","setEncodingChannel","_hoisted_3","_hoisted_4","_hoisted_5","_hoisted_6","_hoisted_7","setLabelPosition","_hoisted_8","_hoisted_9","_hoisted_10","setHighlight","_normalizeClass","_hoisted_11","_component_v_dialog","errorDialog","title","errorTitle","text","errorMessage","actions","required","String","Boolean","representationType","projectionType","labelPositionType","encodingChannelType","highLightType","worldPopulation","mostPopulation","svg","legend","mapWidth","mapHeight","legendWidth","defaultColor","ifDoubleEncoding","preEncoding","encodingChannel","representation","LabelPosition","colorFunctionL","highLights","mounted","features","forEach","feature","curPopulation","getPopulation","cardEl","$refs","selectorCard","$el","legendColEl","legendCol","$nextTick","clientHeight","seContainer","document","getElementById","maxHeight","clientWidth","initMap","node","getBoundingClientRect","selectAll","attr","enter","append","geoPath","drawSvg","splitTextToLines","maxLineWidth","words","split","lines","currentLine","i","push","remove","highLight","loadJson","na","d","properties","NAME","showErrorDialog","msg","bounds","left","bottom","geoProjection","right","top","w","h","rows","Math","ceil","columns","pointRadius","points","j","x","y","point","invert","join","defs","datum","gridSize","gridLayer","classed","numVerticalGrids","numHorizontalGrids","fitSize","projection","on","addHighLight","event","filter","feMerge","enlargedView","enlargedViewSvg","clipPath","html","x1","y1","r1","r","sqrt","xa","cos","atan","acos","ya","sin","xb","yb","xc","yc","xd","yd","boxWidth","boxHeight","boxSpacing","center","centroid","annotation","textLines","city","summer_olympics","winter_olympics","currentYOffset","line","subLines","subLine","annotatedFeatures","index","totalAnnotationsWidth","startX","annotationX","annotationY","lineIndex","flag_base64","countryColors","getCountryColor","fillColor","totalAnnotations","annotationsPerSide","bottomAnnotationsCount","rightAnnotationsCount","countryCenter","lineLength","distanceToLeft","distanceToBottom","distanceToRight","edge","minDistance","leftAnnotationsCount","lineEndX","lineEndY","textOffsetX","textOffsetY","sortedFeatures","sort","a","b","centerA","centerB","circleCenterX","circleCenterY","radius","min","angleIncrement","PI","angle","colorFunction","scale","transformFunction","input","pow","colorScale","domain","drawColorLuminanceLegend","population","drawColorHueLegend","baseHeight","populationPerHeight","cuboidWidth","cuboidLength","sideOpacity","delta","px","t","v","floor","populationExtent","sizeScale","range","py","iconWidth","iconHeight","iconGap","scaleX","scaleY","totalIcons","g","gg","flagBase64","countries","map","customColors","legendHeight","numSegments","segmentWidth","populationWidth","legendGradient","segmentStart","segmentEnd","populationStart","populationEnd","gradient","legendData","minPopulation","maxPopulation","Infinity","legendSpacing","legendX","legendY","alert","components","homeTab","instanceTab","uniqueName","namesArray","newName","replace","count","includes","all","annotationData","annotationInfo","country","unshift","provide","removed","splice","indexOf","render","createVuetify","async","loadFonts","webFontLoader","load","google","families","createApp","App","use","vuetify","mount","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","undefined","exports","module","__webpack_modules__","call","m","deferred","O","chunkIds","fn","priority","notFulfilled","fulfilled","every","leafPrototypes","getProto","getPrototypeOf","obj","__proto__","mode","__esModule","ns","create","def","current","getOwnPropertyNames","definition","o","defineProperty","enumerable","get","f","chunkId","promises","u","miniCssF","globalThis","Function","window","prototype","hasOwnProperty","inProgress","dataWebpackPrefix","l","url","done","script","needAttach","scripts","getElementsByTagName","s","getAttribute","createElement","charset","timeout","nc","setAttribute","onScriptComplete","prev","onerror","clearTimeout","doneFns","parentNode","removeChild","setTimeout","bind","head","appendChild","Symbol","toStringTag","p","installedChunks","installedChunkData","promise","Error","loadingEnded","errorType","realSrc","message","request","webpackJsonpCallback","parentChunkLoadingFunction","moreModules","runtime","some","chunkLoadingGlobal","self","__webpack_exports__"],"sourceRoot":""}