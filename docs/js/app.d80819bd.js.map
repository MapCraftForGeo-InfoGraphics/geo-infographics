{"version":3,"file":"js/app.d80819bd.js","mappings":"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","sources":["webpack://geo-info-graphics-v1/./src/App.vue","webpack://geo-info-graphics-v1/./src/components/home.vue","webpack://geo-info-graphics-v1/./src/components/home.vue?2f3e","webpack://geo-info-graphics-v1/./src/components/instance.vue","webpack://geo-info-graphics-v1/./src/components/instance.vue?e797","webpack://geo-info-graphics-v1/./src/components/about.vue","webpack://geo-info-graphics-v1/./src/components/about.vue?a1db","webpack://geo-info-graphics-v1/./src/components/gallery.vue","webpack://geo-info-graphics-v1/./src/components/gallery.vue?fea4","webpack://geo-info-graphics-v1/./src/App.vue?7ccd","webpack://geo-info-graphics-v1/./src/plugins/vuetify.js","webpack://geo-info-graphics-v1/./src/plugins/webfontloader.js","webpack://geo-info-graphics-v1/./src/main.js","webpack://geo-info-graphics-v1/webpack/bootstrap","webpack://geo-info-graphics-v1/webpack/runtime/chunk loaded","webpack://geo-info-graphics-v1/webpack/runtime/create fake namespace object","webpack://geo-info-graphics-v1/webpack/runtime/define property getters","webpack://geo-info-graphics-v1/webpack/runtime/ensure chunk","webpack://geo-info-graphics-v1/webpack/runtime/get javascript chunk filename","webpack://geo-info-graphics-v1/webpack/runtime/get mini-css chunk filename","webpack://geo-info-graphics-v1/webpack/runtime/global","webpack://geo-info-graphics-v1/webpack/runtime/hasOwnProperty shorthand","webpack://geo-info-graphics-v1/webpack/runtime/load script","webpack://geo-info-graphics-v1/webpack/runtime/make namespace object","webpack://geo-info-graphics-v1/webpack/runtime/publicPath","webpack://geo-info-graphics-v1/webpack/runtime/jsonp chunk loading","webpack://geo-info-graphics-v1/webpack/startup"],"sourcesContent":["<template>\r\n  <v-app>\r\n    <v-main>\r\n      <v-app-bar :elevation=\"2\">\r\n        <v-app-bar-title><h1>Geo-Info Graphics WebUI</h1></v-app-bar-title>\r\n        <v-app-bar-nav-icon @click=\"drawer = !drawer\"></v-app-bar-nav-icon>\r\n\r\n        <template v-slot:extension>\r\n          <v-tabs v-model=\"currentItem\" fixed-tabs>\r\n            <v-tab :value=\"'home'\">\r\n              <v-icon>mdi-home</v-icon>\r\n            </v-tab>\r\n\r\n            <v-tab v-for=\"item in items\" :key=\"item\" :value=\"'tab-' + item\">\r\n              {{ item }}\r\n            </v-tab>\r\n\r\n            <v-menu v-if=\"more.length\">\r\n              <template v-slot:activator=\"{ props }\">\r\n                <v-btn class=\"align-self-center me-4\" height=\"100%\" width=\"fit-content\" rounded=\"0\" variant=\"plain\"\r\n                  v-bind=\"props\">\r\n                  <v-icon>mdi-menu-down</v-icon>\r\n                </v-btn>\r\n              </template>\r\n\r\n              <v-list class=\"bg-grey-lighten-3\">\r\n                <v-list-item v-for=\"item in more\" :key=\"item\" @click=\"addItem(item)\">\r\n                  {{ item }}\r\n                </v-list-item>\r\n              </v-list>\r\n            </v-menu>\r\n\r\n            <v-tab :value=\"'gallery'\">\r\n              <v-text>Gallery</v-text>\r\n            </v-tab>\r\n\r\n            <v-tab :value=\"'about'\">\r\n              <v-text>About</v-text>\r\n            </v-tab>\r\n          </v-tabs>\r\n        </template>\r\n      </v-app-bar>\r\n\r\n      <v-window v-model=\"currentItem\" style=\"height: 100%; width: 100%;\">\r\n        <v-window-item :value=\"'home'\" style=\"display: flex; height: 100%; width: 100%;\">\r\n          <homeTab></homeTab>\r\n        </v-window-item>\r\n\r\n        <v-window-item v-for=\"item in items.concat(more)\" :key=\"item\" :value=\"'tab-' + item\"\r\n          style=\"display: flex; height: 100%; width: 100%;\">\r\n          <instanceTab :value=\"item\" :geoData=\"geoData\" :infoData=\"infoData[item]\" :isNumerical=\"infoDataType[item] == 'quantitative'\" :propName=\"infoDataName[item]\"></instanceTab>\r\n        </v-window-item>\r\n        <v-window-item :value=\"'about'\" style=\"display: flex; height: 100%; width: 100%;\">\r\n          <aboutTab></aboutTab>\r\n        </v-window-item>\r\n        <v-window-item :value=\"'gallery'\" style=\"display: flex; height: 100%; width: 100%;\">\r\n          <galleryTab></galleryTab>\r\n        </v-window-item>\r\n      </v-window>\r\n\r\n    </v-main>\r\n  </v-app>\r\n</template>\r\n\r\n<script>\r\nimport * as d3 from 'd3';\r\nimport { ref, provide } from 'vue';\r\n\r\nimport homeTab from './components/home.vue'\r\nimport instanceTab from './components/instance.vue'\r\nimport aboutTab from './components/about.vue'\r\nimport galleryTab from './components/gallery.vue'\r\n\r\nexport default {\r\n  name: 'App',\r\n\r\n  components: {\r\n    homeTab,\r\n    instanceTab,\r\n    aboutTab,\r\n    galleryTab,\r\n  },\r\n\r\n  data: () => ({\r\n    drawer: true,\r\n  }),\r\n\r\n  setup() {\r\n    const items = ref([]);\r\n    const more = ref([]);\r\n    // more.value.push(\"about\");\r\n\r\n    const geoData = ref({});\r\n    const infoData = ref({});\r\n    const infoDataType = ref({});\r\n    const infoDataName = ref({})\r\n\r\n    const currentItem = ref('home');\r\n    const currentItemAbout = ref('about');\r\n    const currentItemGallery = ref('gallery');\r\n\r\n    const loadJson = (na) => {\r\n      return new Promise((resolve, reject) => {\r\n        d3.json(na).then(data => {\r\n          resolve(data);\r\n        }).catch(error => {\r\n          console.error('Error loading GeoJSON data:', error);\r\n          reject(error);\r\n        });\r\n      });\r\n    };\r\n\r\n    const uniqueName = (namesArray, name) => {\r\n      let newName = name.replace(/\\..+$/, '');\r\n      let count = 1;\r\n\r\n      // 检查数组中是否包含该名字，如果包含，则在名字后添加后缀\r\n      while (namesArray.includes(newName)) {\r\n        newName = `${name.replace(/\\..+$/, '')}-${count}`;\r\n        count++;\r\n      }\r\n\r\n      return newName;\r\n    }\r\n\r\n    Promise.all([\r\n            loadJson('europe.geojson'),\r\n            loadJson('olympics_data.json'),\r\n            loadJson('country-by-flag.json')\r\n        ])\r\n      .then(([data, annotationData, flagData]) => {\r\n        geoData.value = data;\r\n\r\n        if (geoData.value && geoData.value.features && annotationData) {\r\n          geoData.value.features.forEach(feature => {\r\n            const annotationInfo = annotationData.find(item => item.country === feature.properties.NAME);\r\n            const annotation = annotationInfo ? annotationInfo.annotation : -1;\r\n            feature.properties.annotation = annotation;\r\n\r\n            const flagInfo = flagData.find(item => item.country === feature.properties.NAME);\r\n            const flag= flagInfo ? flagInfo.flag_base64 : undefined;\r\n            feature.properties.flag = flag;\r\n          });\r\n        }\r\n      });\r\n\r\n    const loadInfoData = (data) => {\r\n      const value = uniqueName(items.value, data.name)\r\n      infoData.value[value] = data.data;\r\n      infoDataType.value[value] = data.datatype;\r\n      infoDataName.value[value] = data.prop;\r\n      items.value.unshift(value);\r\n\r\n      currentItem.value = 'tab-' + value;\r\n      currentItemAbout.value = 'tab-' + value;\r\n      currentItemGallery.value = 'tab-' + value;\r\n    };\r\n\r\n    provide('loadInfoData', loadInfoData);\r\n    return { items, more, geoData, infoData, infoDataType, infoDataName, currentItem, currentItemAbout, currentItemGallery, loadJson, uniqueName };\r\n  },\r\n\r\n  methods: {\r\n    addItem(item) {\r\n      const removed = this.items.splice(-1, 1)\r\n      this.items.unshift(\r\n        ...this.more.splice(this.more.indexOf(item), 1),\r\n      )\r\n      this.more.unshift(...removed)\r\n      this.$nextTick(() => { this.currentItem = 'tab-' + item })\r\n      this.$nextTick(() => { this.currentItemAbout = 'tab-' + item })\r\n      this.$nextTick(() => { this.currentItemGallery = 'tab-' + item})\r\n    },\r\n  },\r\n}\r\n</script>\r\n<style scoped>\r\nh1 {\r\n    font-size: 30px;\r\n}\r\n\r\n</style>","<template>\r\n    <v-container>\r\n        <v-row>\r\n            <h1>Home</h1>\r\n        </v-row>\r\n\r\n        <v-row style=\"margin-top: 34px;\">\r\n            <v-divider></v-divider>\r\n        </v-row>\r\n\r\n        <v-row style=\"margin-top: 30px;\">\r\n            <p>Start a new project form a JSON:</p>\r\n        </v-row>\r\n\r\n        <!-- <v-row style=\"margin-top: 15px;\">\r\n            <u @click=\"openDialog()\">Upload a JSON</u>\r\n        </v-row>\r\n\r\n        <v-row style=\"margin-top: 30px;\">\r\n            <v-divider></v-divider>\r\n        </v-row>\r\n\r\n        <v-row style=\"margin-top: 30px;\">\r\n            <p>Recent project:</p>\r\n        </v-row>\r\n\r\n        <v-row></v-row> -->\r\n        <v-row style=\"margin-top: 30px;\">\r\n            <v-file-input v-model=\"files\" label=\"Choose a JSON file\" accept=\".json\" @change=\"uploadFile\"></v-file-input>\r\n        </v-row>\r\n\r\n        <v-row v-if=\"uploaded\">\r\n            <v-col>Country: {{ Object.keys(infoData.data).length }} rows</v-col>\r\n            <v-col></v-col>\r\n        </v-row>\r\n\r\n        <v-row v-if=\"uploaded\">\r\n            <v-col>Prop: '{{ infoData.prop }}'</v-col>\r\n            <v-col>\r\n                <v-select label=\"prop data type\" v-model=\"infoData.datatype\"\r\n                          :items=\"['categorical', 'quantitative']\"></v-select>\r\n            </v-col>\r\n\r\n\r\n        </v-row>\r\n\r\n        <v-row v-if=\"uploaded\" style=\"margin-bottom: 12px;\">\r\n            <v-divider></v-divider>\r\n        </v-row>\r\n\r\n\r\n        <v-row>\r\n            <v-btn color=\"primary\" @click=\"createInstance\" :disabled=\"!uploaded\">Create</v-btn>\r\n            <v-btn @click=\"clear\" style=\"margin-left: 16px;\">CLEAR</v-btn>\r\n        </v-row>\r\n    </v-container>\r\n\r\n    <!-- <v-dialog v-model=\"dialog\" max-width=\"500px\">\r\n        <template>\r\n            <u @click=\"openDialog\" style=\"cursor: pointer;\">Upload a JSON</u>\r\n        </template>\r\n<v-card>\r\n    <v-card-title>Upload JSON Files</v-card-title>\r\n    <v-card-text>\r\n        <v-file-input v-model=\"files\" label=\"Choose a JSON file\" accept=\".json\" @change=\"uploadFile\"></v-file-input>\r\n\r\n    </v-card-text>\r\n    <v-card-actions>\r\n        <v-btn color=\"primary\" @click=\"createInstance\" :disabled=\"!uploaded\">Create</v-btn>\r\n        <v-btn @click=\"dialog = false\">Close</v-btn>\r\n    </v-card-actions>\r\n</v-card>\r\n</v-dialog> -->\r\n</template>\r\n\r\n<script>\r\nimport * as d3 from 'd3';\r\nimport {inject} from 'vue';\r\n\r\nexport default {\r\n    name: 'homeTab',\r\n\r\n    data() {\r\n        return {\r\n            files: [],\r\n            infoData: {},\r\n\r\n            uploaded: false,\r\n        };\r\n    },\r\n    methods: {\r\n        clear() {\r\n            this.files = [];\r\n            this.infoData = {};\r\n            this.targetKey = 'NaN'\r\n            this.uploaded = false;\r\n        },\r\n\r\n//        readFile(file) {\r\n//            return new Promise((resolve, reject) => {\r\n//                const reader = new FileReader();\r\n//                reader.onload = function (e) {\r\n//                    const fileContents = e.target.result;\r\n//                    d3.json(fileContents)\r\n//                        .then(data => {\r\n//                            const keys = Object.keys(data[0]);\r\n//                            const targetKey = keys.find(key => key !== 'country');\r\n//\r\n//                            const infoData = data.reduce((acc, cur) => {\r\n//                                acc[cur['country']] = cur[targetKey];\r\n//                                return acc;\r\n//                            }, {});\r\n//                            const result = {\r\n//                                \"name\": file.name,\r\n//                                \"prop\": targetKey,\r\n//                                \"datatype\": isNaN(Object.values(data[0])[1]) ? 'categorical' : 'quantitative',\r\n//                                \"data\": infoData\r\n//                            };\r\n//\r\n//                            resolve(result);\r\n//                        })\r\n//                        .catch(error => {\r\n//                            console.error(error);\r\n//                            reject(error);\r\n//                        });\r\n//                };\r\n//                reader.readAsDataURL(file);\r\n//            });\r\n//        },\r\n\r\n        readFile(file) {\r\n            return new Promise((resolve, reject) => {\r\n                const reader = new FileReader();\r\n                reader.onload = function (e) {\r\n                    const fileContents = e.target.result;\r\n                    d3.json(fileContents)\r\n                        .then(data => {\r\n                            const infoData = data.reduce((acc, cur) => {\r\n                                // 复制当前对象，但排除 'country' 键\r\n                                const {country, ...rest} = cur;\r\n                                // 使用 'country' 作为键，其余键值对作为值\r\n                                acc[cur['country']] = rest;\r\n                                return acc;\r\n                            }, {});\r\n                            const result = {\r\n                                \"name\": file.name,\r\n                                \"prop\": Object.keys(data[0])[1],\r\n                                \"datatype\": isNaN(Object.values(data[0])[1]) ? 'categorical' : 'quantitative',\r\n                                \"data\": infoData\r\n                            };\r\n\r\n                            resolve(result);\r\n                        })\r\n                        .catch(error => {\r\n                            console.error(error);\r\n                            reject(error);\r\n                        });\r\n                };\r\n                reader.readAsDataURL(file);\r\n            });\r\n        },\r\n\r\n        uploadFile() {\r\n            if (this.files.length === 0) {\r\n                console.log(\"No files to upload.\");\r\n                return;\r\n            }\r\n\r\n            const file = this.files[0]; // 获取第一个文件\r\n\r\n            this.readFile(file)\r\n                .then(result => {\r\n                    this.infoData = result;\r\n                    this.uploaded = true;\r\n                    console.log(this.infoData);\r\n                })\r\n                .catch(error => {\r\n                    this.uploaded = false;\r\n                    console.error(error);\r\n                });\r\n        },\r\n\r\n        createInstance() {\r\n            this.loadInfoData(this.infoData);\r\n        }\r\n    },\r\n\r\n    setup() {\r\n        const loadInfoData = inject('loadInfoData');\r\n\r\n        return {loadInfoData};\r\n    }\r\n}\r\n</script>\r\n\r\n<style scoped>\r\nh1 {\r\n    font-size: 56px;\r\n}\r\n</style>","import { render } from \"./home.vue?vue&type=template&id=414530c2&scoped=true\"\nimport script from \"./home.vue?vue&type=script&lang=js\"\nexport * from \"./home.vue?vue&type=script&lang=js\"\n\nimport \"./home.vue?vue&type=style&index=0&id=414530c2&scoped=true&lang=css\"\n\nimport exportComponent from \"../../node_modules/vue-loader/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render],['__scopeId',\"data-v-414530c2\"]])\n\nexport default __exports__","<template>\r\n    <div style=\"display: flex; height: 100%; width: 100%;\">\r\n        <v-card elevation=\"2\" height=\"100%\" width=\"35%\" ref=\"selectorCard\">\r\n            <v-container style=\"display: flex; overflow-y: auto;\" :id=\"value + '-seContainer'\">\r\n                <v-expansion-panels>\r\n                    <v-expansion-panel>\r\n                        <v-expansion-panel-title>\r\n                            Basic Map Representations\r\n                        </v-expansion-panel-title>\r\n\r\n                        <v-expansion-panel-text>\r\n                            <v-container class=\"container\">\r\n                                <v-row>\r\n                                    <v-col class=\"element\" @click=\"setRepresentation(myType['Plain'])\">\r\n                                        <input type=\"button\" id=\"myButtonPlain\" class=\"colorfulButton\"\r\n                                           v-model=plainTextLabel @click=\"setRepresentation(myType['Plain'])\"/>\r\n                                    </v-col>\r\n                                </v-row>\r\n                                <v-row>\r\n                                    <v-col class=\"element\" @click=\"setRepresentation(myType['Political Map'])\">\r\n                                        Political Map\r\n                                        <v-img :src=\"require('../assets/PoliticalMap.svg')\" contain/>\r\n                                    </v-col>\r\n\r\n                                    <!-- <v-col class=\"element\" @click=\"setRepresentation(myType['Topographic Map'])\">\r\n                                        Topographic Map\r\n                                        <v-img :src=\"require('../assets/TopographicMap.svg')\" contain />\r\n                                    </v-col> -->\r\n                                    <v-col class=\"element\" @click=\"setRepresentation(myType['Shape-based Map'])\">\r\n                                        Shape-based Map\r\n                                        <v-img :src=\"require('../assets/Shape-basedMap.svg')\" contain/>\r\n                                    </v-col>\r\n                                </v-row>\r\n\r\n                                <!-- <v-row>\r\n                                    <v-col class=\"element\" @click=\"setRepresentation(myType['Shape-based Map'])\">\r\n                                        Shape-based Map\r\n                                        <v-img :src=\"require('../assets/Shape-basedMap.svg')\" contain />\r\n                                    </v-col>\r\n\r\n                                    <v-col class=\"element\" @click=\"setRepresentation(myType['Street Map'])\">\r\n                                        Street Map\r\n                                        <v-img :src=\"require('../assets/StreetMap.svg')\" contain />\r\n                                    </v-col>\r\n                                </v-row> -->\r\n\r\n                                <v-row>\r\n                                    \r\n\r\n                                    <v-col class=\"element\" @click=\"setRepresentation(myType['Terrain'])\">\r\n                                        Topographic Map\r\n                                        <v-img :src=\"require('../assets/TerrainGlobal.svg')\" contain/>\r\n                                    </v-col>\r\n                                    <v-col class=\"element\" @click=\"setRepresentation(myType['Street'])\">\r\n                                        Street Map\r\n                                        <v-img :src=\"require('../assets/StreetMap.svg')\" contain/>\r\n                                    </v-col>\r\n                                </v-row>\r\n                            </v-container>\r\n                        </v-expansion-panel-text>\r\n                    </v-expansion-panel>\r\n\r\n                    <!-- <v-expansion-panel>\r\n                        <v-expansion-panel-title>\r\n                            Map Projections\r\n                        </v-expansion-panel-title>\r\n\r\n                        <v-expansion-panel-text>\r\n                            <v-container class=\"container\">\r\n                                <v-row>\r\n                                    <v-col class=\"element\" @click=\"setProjection(myType['Mercator'])\">\r\n                                        Mercator\r\n                                        <v-img :src=\"require('../assets/mercator.svg')\" contain/>\r\n                                    </v-col>\r\n\r\n                                    <v-col class=\"element\" @click=\"setProjection(myType['Equirectangular'])\">\r\n                                        Equirectangular\r\n                                        <v-img :src=\"require('../assets/equirectangular.svg')\" contain/>\r\n                                    </v-col>\r\n                                </v-row>\r\n                            </v-container>\r\n                        </v-expansion-panel-text>\r\n                    </v-expansion-panel> -->\r\n\r\n                    <v-expansion-panel>\r\n                        <v-expansion-panel-title>\r\n                            Encoding Channels\r\n                        </v-expansion-panel-title>\r\n                        <v-expansion-panel-text>\r\n                            <v-container class=\"container\">\r\n                                <v-row>\r\n                                    <v-col>\r\n                                        <input type=\"button\" id=\"myButton\" class=\"colorfulButton\"\r\n                                               v-model=ifDoubleEncodingText @click=\"doubleEncoding()\"/>\r\n                                    </v-col>\r\n                                    <v-col>\r\n                                        <input type=\"button\" id=\"myButtonRemove\" class=\"colorfulButton\"\r\n                                               v-model=removeText @click=\"setEncodingChannel(myType['Remove'])\"/>\r\n                                    </v-col>\r\n\r\n                                </v-row>\r\n\r\n                                <v-row>\r\n                                    <v-col style=\"padding: 0;\">\r\n                                        <div class=\"matched-heading\">Color</div>\r\n                                    </v-col>\r\n                                </v-row>\r\n                                <v-row>\r\n                                    <div class=\"row-with-line\"></div>\r\n                                    <v-col class=\"element\" @click=\"setEncodingChannel(myType['Color (Luminance)'])\">\r\n                                        Color (Intensity)\r\n                                        <v-img :src=\"require('../assets/Color(Luminance).svg')\" contain/>\r\n                                    </v-col>\r\n\r\n                                    <v-col class=\"element\" @click=\"setEncodingChannel(myType['Color (Hue)'])\">\r\n                                        Color (Hue)\r\n                                        <v-img :src=\"require('../assets/Color(Hue).svg')\" contain/>\r\n                                    </v-col>\r\n                                </v-row>\r\n\r\n                                <v-row>\r\n                                    <v-col style=\"padding: 0;\">\r\n                                        <div class=\"matched-heading\">Length</div>\r\n                                    </v-col>\r\n                                </v-row>\r\n                                <v-row>\r\n                                    <div class=\"row-with-line\"></div>\r\n                                    <v-col class=\"element\" @click=\"setEncodingChannel(myType['3D Length'])\">\r\n                                        3D Length\r\n                                        <v-img :src=\"require('../assets/3DLength.svg')\" contain/>\r\n                                    </v-col>\r\n\r\n                                    <v-col class=\"element\" @click=\"setEncodingChannel(myType['2D Length'])\">\r\n                                        2D Length\r\n                                        <v-img :src=\"require('../assets/BarChart.svg')\" contain/>\r\n                                    </v-col>\r\n                                </v-row>\r\n\r\n                                <v-row>\r\n                                    <v-col style=\"padding: 0;\">\r\n                                        <div class=\"matched-heading\">Scale</div>\r\n                                    </v-col>\r\n                                </v-row>\r\n                                <v-row>\r\n                                    <div class=\"row-with-line\"></div>\r\n                                    <v-col class=\"element\" @click=\"setEncodingChannel(myType['Quantity'])\">\r\n                                        Quantity\r\n                                        <v-img :src=\"require('../assets/Quantity.svg')\" contain/>\r\n                                    </v-col>\r\n                                    <v-col class=\"element\" @click=\"setEncodingChannel(myType['Size'])\">\r\n                                        Size\r\n                                        <v-img :src=\"require('../assets/Size.svg')\" contain/>\r\n                                    </v-col>\r\n                                </v-row>\r\n\r\n                                <v-row>\r\n                                    <v-col style=\"padding: 0;\">\r\n                                        <div class=\"matched-heading\">Link</div>\r\n                                    </v-col>\r\n                                </v-row>\r\n                                <v-row>\r\n                                    <div class=\"row-with-line\"></div>\r\n                                    <v-col class=\"element\" @click=\"setEncodingChannel(myType['Link (Line)'])\">\r\n                                        Tilt/Angle (Directionless)\r\n                                        <v-img :src=\"require('../assets/Link(Line).svg')\" contain/>\r\n                                    </v-col>\r\n\r\n                                    <v-col class=\"element\" @click=\"setEncodingChannel(myType['Link (Arrow)'])\">\r\n                                        Tilt/Angle (Directional)\r\n                                        <v-img :src=\"require('../assets/Link(Arrow).svg')\" contain/>\r\n                                    </v-col>\r\n                                </v-row>\r\n\r\n                                <v-row>\r\n                                    <v-col style=\"padding: 0;\">\r\n                                        <div class=\"matched-heading\">Glyph</div>\r\n                                    </v-col>\r\n                                </v-row>\r\n                                <v-row>\r\n                                    <div class=\"row-with-line\"></div>\r\n                                    <v-col class=\"element\" @click=\"setEncodingChannel(myType['Glyph'])\">\r\n                                        Icon\r\n                                        <v-img :src=\"require('../assets/Glyph.svg')\" contain/>\r\n                                    </v-col>\r\n                                    <v-col class=\"element\" @click=\"setEncodingChannel(myType['GlyphFlag'])\">\r\n                                        Flag\r\n                                        <v-img :src=\"require('../assets/Glyph.svg')\" contain/>\r\n                                    </v-col>\r\n\r\n                                    <!-- <v-col class=\"element\" @click=\"setEncodingChannel(myType['Remove'])\">\r\n                                        Remove\r\n                                        <v-img :src=\"require('../assets/Glyph.svg')\" width=\"50%\" contain />\r\n                                    </v-col> -->\r\n                                </v-row>\r\n\r\n                            </v-container>\r\n                        </v-expansion-panel-text>\r\n                    </v-expansion-panel>\r\n                    <v-expansion-panel>\r\n                        <v-expansion-panel-title>\r\n                            Label Positions\r\n                        </v-expansion-panel-title>\r\n\r\n                        <v-expansion-panel-text>\r\n                            <v-container class=\"container\">\r\n                                <v-row class=\"button-row\">\r\n                                    <input type=\"button\" id=\"myButtonRemoveLabel\" class=\"colorfulButton\"\r\n                                           v-model=removeTextLabel @click=\"setLabelPosition(myType['Label Remove'])\"/>\r\n                                </v-row>\r\n                                <v-row>\r\n                                    <v-col style=\"padding: 0;\">\r\n                                        <div class=\"matched-heading\">Situated</div>\r\n                                    </v-col>\r\n                                </v-row>\r\n                                <v-row>\r\n                                    <div class=\"row-with-line\"></div>\r\n                                    <v-col class=\"element\" @click=\"setLabelPosition(myType['Label Situated'])\">\r\n                                        Situated\r\n                                        <v-img :src=\"require('../assets/Situated.svg')\" contain/>\r\n                                    </v-col>\r\n\r\n                                    <v-col></v-col>\r\n                                </v-row>\r\n\r\n                                <v-row>\r\n                                    <v-col style=\"padding: 0;\">\r\n                                        <div class=\"matched-heading\">Matched</div>\r\n                                    </v-col>\r\n                                </v-row>\r\n                                <v-row>\r\n                                    <div class=\"row-with-line\"></div>\r\n                                    <v-col style=\"padding: 0;\">\r\n                                        <v-col class=\"element\" @click=\"setLabelPosition(myType['Label Text'])\">\r\n                                            Text\r\n                                            <v-img :src=\"require('../assets/MatchedText.svg')\" contain/>\r\n                                        </v-col>\r\n                                        <v-col class=\"element\" @click=\"setLabelPosition(myType['Label Color'])\">\r\n                                            Color\r\n                                            <v-img :src=\"require('../assets/MathchedColor.svg')\" contain/>\r\n                                        </v-col>\r\n                                    </v-col>\r\n                                    <v-col class=\"element\" @click=\"setLabelPosition(myType['Label Icon'])\">\r\n                                        Icon\r\n                                        <v-img :src=\"require('../assets/MatchedIcon.svg')\" contain/>\r\n                                    </v-col>\r\n                                </v-row>\r\n\r\n                                <v-row>\r\n                                    <v-col style=\"padding: 0;\">\r\n                                        <div class=\"matched-heading\">Linked</div>\r\n                                    </v-col>\r\n                                </v-row>\r\n                                <v-row>\r\n                                    <div class=\"row-with-line\"></div>\r\n                                    <v-col style=\"padding: 0;\">\r\n                                        <v-col class=\"element\"\r\n                                               @click=\"setLabelPosition(myType['Label Convenient'])\">\r\n                                            Convenient\r\n                                            <v-img :src=\"require('../assets/LinkedConvenient.svg')\" contain/>\r\n                                        </v-col>\r\n\r\n                                        <v-col class=\"element\" @click=\"setLabelPosition(myType['Label Aligned'])\">\r\n                                            Aligned\r\n                                            <v-img :src=\"require('../assets/LinkedAligned.svg')\" contain/>\r\n                                        </v-col>\r\n\r\n                                    </v-col>\r\n\r\n                                    <v-col class=\"element\" @click=\"setLabelPosition(myType['Label Ordered'])\">\r\n                                        Ordered\r\n                                        <v-img :src=\"require('../assets/LinkedOrdered.svg')\" contain/>\r\n                                    </v-col>\r\n                                </v-row>\r\n                            </v-container>\r\n                        </v-expansion-panel-text>\r\n                    </v-expansion-panel>\r\n                    <v-expansion-panel>\r\n                        <v-expansion-panel-title>\r\n                            Highlight Techniques\r\n                        </v-expansion-panel-title>\r\n\r\n                        <v-expansion-panel-text>\r\n                            <v-container class=\"container\">\r\n                                <v-row>\r\n                                    <input type=\"button\" id=\"myButtonRemoveHighlight\" class=\"colorfulButton\"\r\n                                           v-model=removeTextHighlight\r\n                                           @click=\"setHighlight(myType['Highlight Remove'])\"/>\r\n                                </v-row>\r\n                                <v-row>\r\n                                    <v-col class=\"element\" @click=\"setHighlight(myType['Light'])\">\r\n                                        Light\r\n                                        <v-img :src=\"require('../assets/HighlightLight.svg')\" contain/>\r\n                                    </v-col>\r\n\r\n                                    <v-col class=\"element\" @click=\"setHighlight(myType['Color'])\">\r\n                                        Color\r\n                                        <v-img :src=\"require('../assets/HighlightColor.svg')\" contain/>\r\n                                    </v-col>\r\n                                </v-row>\r\n\r\n                                <v-row>\r\n                                    <v-col class=\"element\" @click=\"setHighlight(myType['Map Pin'])\">\r\n                                        Map Pin\r\n                                        <v-img :src=\"require('../assets/HighlightMappin.svg')\" contain/>\r\n                                    </v-col>\r\n\r\n                                    <v-col class=\"element\" @click=\"setHighlight(myType['3D Transformation'])\">\r\n                                        3D Transformation\r\n                                        <v-img :src=\"require('../assets/Highlight3d.svg')\" contain/>\r\n                                    </v-col>\r\n                                </v-row>\r\n\r\n                                <v-row>\r\n                                    <v-col class=\"element\" @click=\"setHighlight(myType['Enlarged Portions'])\">\r\n                                        Enlarged Portions\r\n                                        <v-img :src=\"require('../assets/HighlightEnlarge.svg')\" contain/>\r\n                                    </v-col>\r\n                                    <v-col class=\"element\" @click=\"setHighlight(myType['Edge Stroke'])\">\r\n                                        Contour\r\n                                        <v-img :src=\"require('../assets/HighlightEdgeStroking.svg')\" contain/>\r\n                                    </v-col>\r\n                                </v-row>\r\n                            </v-container>\r\n                        </v-expansion-panel-text>\r\n                    </v-expansion-panel>\r\n                    <!-- <v-expansion-panel>\r\n                        <v-expansion-panel-title>\r\n                            Print\r\n                        </v-expansion-panel-title>\r\n                        <v-expansion-panel-text>\r\n                            <v-container class=\"container\">\r\n                                <v-row>\r\n                                    <input type=\"button\" id=\"myButtonPrint\" class=\"colorfulButton\" v-model=printText\r\n                                           @click=\"printSVG()\"/>\r\n                                </v-row>\r\n                            </v-container>\r\n                        </v-expansion-panel-text>\r\n\r\n                    </v-expansion-panel> -->\r\n                </v-expansion-panels>\r\n            </v-container>\r\n        </v-card>\r\n\r\n        <v-container style=\"width: 100%; height: 100%; margin-left: 0; margin-right: 0\" :ref=\"'d3Panel'\">\r\n            <v-row>\r\n                <v-col ref=\"legendCol\">\r\n                    <svg :class=\"value + '-legend'\" style=\"height: 40px; width: 100%;\"></svg>\r\n                </v-col>\r\n                <v-col></v-col>\r\n                <v-col></v-col>\r\n\r\n\r\n            </v-row>\r\n            <svg :class=\"value + '-svg'\" style=\"width: 100%; height: 90%;\"></svg>\r\n            <!-- <svg :class=\"value + '-legend'\" style=\"position: absolute; top: 30px; right: 20px; width: 200px; height: 40px; z-index: 2;\"></svg> -->\r\n            <svg :id=\"value + '-enlargedView'\"\r\n                 style=\"width: 200px; height: 400px; position: absolute; top: 10px; right: 10px;\"></svg>\r\n            <div>\r\n                <input type=\"button\" id=\"myButtonPrint\" class=\"colorfulButtonPrint\" v-model=printText\r\n                                           @click=\"printSVG()\"/>\r\n            </div>\r\n        </v-container>\r\n        \r\n    </div>\r\n    <div>\r\n        \r\n    </div>\r\n\r\n    <v-dialog v-model=\"errorDialog\" width=\"auto\">\r\n        <v-card max-width=\"400\" prepend-icon=\"mdi-alert-circle-outline\" :title=\"errorTitle\" :text=\"errorMessage\">\r\n            <template v-slot:actions>\r\n                <v-btn class=\"ms-auto\" text=\"Ok\" @click=\"errorDialog = false\"></v-btn>\r\n            </template>\r\n        </v-card>\r\n    </v-dialog>\r\n</template>\r\n\r\n<script>\r\nimport * as d3 from 'd3';\r\n\r\nexport default {\r\n    name: 'instanceTab',\r\n\r\n    props: {\r\n        geoData: {\r\n            type: Object,\r\n            required: true\r\n        },\r\n\r\n        infoData: {\r\n            type: Object,\r\n            required: true\r\n        },\r\n\r\n        value: {\r\n            type: String,\r\n            required: true\r\n        },\r\n\r\n        propName: {\r\n            type: String,\r\n            required: false\r\n        },\r\n\r\n        isNumerical: {\r\n            type: Boolean,\r\n            required: true\r\n        }\r\n    },\r\n\r\n    data: () => ({\r\n        representationType: 0,\r\n        projectionType: 0,\r\n        labelPositionType: -1,\r\n        encodingChannelType: -1,\r\n        highLightType: -1,\r\n\r\n        worldPopulation: 0,\r\n        mostPopulation: 0,\r\n\r\n        svg: null,\r\n        legend: null,\r\n\r\n        mapWidth: 1000,\r\n        mapHeight: 800,\r\n\r\n        legendWidth: 200,\r\n\r\n        defaultColor: '#cccccc',\r\n\r\n        errorTitle: '',\r\n        errorMessage: '',\r\n        errorDialog: false,\r\n\r\n        ifDoubleEncoding: false,\r\n        ifDoubleEncodingText: 'Dual Encoding: OFF',\r\n        ifSizeColor: false,\r\n        removeText: 'Clear Encoding',\r\n        removeTextLabel: 'Clear Label',\r\n        removeTextHighlight: 'Clear Highlight',\r\n        plainTextLabel: 'Clear Map',\r\n        preEncoding: -1,\r\n        preColortype: -1,\r\n\r\n        encodingChannel: () => {\r\n        },\r\n        representation: () => {\r\n        },\r\n        LabelPosition: () => {\r\n        },\r\n\r\n        colorFunctionL: () => {\r\n        },\r\n        sizeFunctionL: () => {\r\n        },\r\n\r\n        highLights: [],\r\n        pointer2highlight: 0,\r\n\r\n        printText: 'Print',\r\n\r\n        myType: {\r\n            \"Political Map\": 0,\r\n            \"Topographic Map\": 1,\r\n            \"Shape-based Map\": 2,\r\n            \"Street Map\": 3,\r\n            \"Plain\": 4,\r\n            \"Terrain\": 5,\r\n            \"Street\": 6,\r\n\r\n\r\n            \"Mercator\": 0,\r\n            \"Equirectangular\": 1,\r\n\r\n            \"Light\": 0,\r\n            \"Color\": 1,\r\n            \"Map Pin\": 2,\r\n            \"3D Transformation\": 3,\r\n            \"Enlarged Portions\": 4,\r\n            \"Edge stroke\": 5,\r\n            'Highlight Remove': 6,\r\n\r\n            \"Label Situated\": 0,\r\n            \"Label Text\": 1,\r\n            \"Label Icon\": 2,\r\n            \"Label Color\": 3,\r\n            \"Label Convenient\": 4,\r\n            \"Label Aligned\": 5,\r\n            \"Label Ordered\": 6,\r\n            \"Label Remove\": 7,\r\n\r\n            \"Color (Luminance)\": 0,\r\n            \"Color (Hue)\": 1,\r\n            \"3D Length\": 2,\r\n            \"Glyph\": 3,\r\n            \"Link (Line)\": 4,\r\n            \"Link (Arrow)\": 5,\r\n            \"Size\": 6,\r\n            \"Quantity\": 7,\r\n            \"2D Length\": 8,\r\n            \"Remove\": 9,\r\n            \"GlyphIcon\": 10,\r\n            \"GlyphFlag\": 11\r\n\r\n        },\r\n    }),\r\n\r\n    mounted() {\r\n        console.log(this.value, \"created, numerical:\", this.isNumerical);\r\n        console.log(this.geoData);\r\n\r\n        let worldPopulation = 0;\r\n        if (this.geoData && this.geoData.features && this.infoData) {\r\n            this.geoData.features.forEach(feature => {\r\n                const curPopulation = this.getPopulation(feature)\r\n                worldPopulation += curPopulation;\r\n                this.mostPopulation = this.mostPopulation < curPopulation ? curPopulation : this.mostPopulation;\r\n            });\r\n\r\n            console.log(this.mostPopulation);\r\n        }\r\n        this.worldPopulation = worldPopulation;\r\n\r\n        const cardEl = this.$refs.selectorCard.$el;\r\n        const legendColEl = this.$refs.legendCol.$el;\r\n\r\n        this.$nextTick(() => {\r\n            const height = cardEl.clientHeight;\r\n\r\n            const seContainer = document.getElementById(this.value + '-seContainer');\r\n            seContainer.style.maxHeight = (0.99 * height) + \"px\";\r\n\r\n            this.legendWidth = 0.87 * legendColEl.clientWidth;\r\n\r\n            this.initMap();\r\n        });\r\n    },\r\n\r\n    methods: {\r\n        initMap() {\r\n            // 获得html中的地图（svg）标签\r\n            this.svg = d3.select(\".\" + this.value + \"-svg\");\r\n            this.legend = d3.select(\".\" + this.value + \"-legend\");\r\n            this.highLights.push([]);\r\n\r\n            //根据窗口大小设置地图的大小\r\n            this.mapWidth = this.svg.node().getBoundingClientRect().width;\r\n            this.mapHeight = 0.8 * this.svg.node().getBoundingClientRect().height;\r\n\r\n            this.encodingChannel = () => {\r\n                this.svg.selectAll('path').attr(\"fill\", this.defaultColor);\r\n            };\r\n\r\n            this.representation = () => {\r\n                this.svg.selectAll('path')\r\n                    .data(this.geoData.features)\r\n                    .enter()\r\n                    .append('path')\r\n                    .attr('d', this.geoPath)\r\n                    .attr('stroke', '#ffffff');\r\n            };\r\n\r\n            // console.log(this.mapWidth, this.mapHeight);\r\n            this.setProjection(1);\r\n            this.drawSvg();\r\n            if (!this.isNumerical) {\r\n                alert('No dual encoding supporting!');\r\n            }\r\n        },\r\n\r\n        splitTextToLines(text, maxLineWidth) {\r\n            let words = text.split(' ');\r\n            let lines = [];\r\n            let currentLine = words[0];\r\n\r\n            for (let i = 1; i < words.length; i++) {\r\n                if ((currentLine + ' ' + words[i]).length < maxLineWidth) {\r\n                    currentLine += ' ' + words[i];\r\n                } else {\r\n                    lines.push(currentLine);\r\n                    currentLine = words[i];\r\n                }\r\n            }\r\n            lines.push(currentLine); // Add the last line\r\n\r\n            return lines;\r\n        },\r\n\r\n        //重新绘制svg\r\n        drawSvg() {\r\n            // 移除现有的 SVG\r\n            this.svg.selectAll('*').remove();\r\n            d3.select('#' + this.value + '-enlargedView').selectAll('*').remove();\r\n\r\n            this.representation();\r\n            this.encodingChannel();\r\n            this.LabelPosition();\r\n\r\n            this.highLights[this.pointer2highlight].forEach(highLight => {\r\n                highLight();\r\n            });\r\n        },\r\n\r\n        loadJson(na) {\r\n            return new Promise((resolve, reject) => {\r\n                d3.json(na).then(data => {\r\n                    resolve(data);\r\n                }).catch(error => {\r\n                    console.error('Error loading GeoJSON data:', error);\r\n                    reject(error);\r\n                });\r\n            });\r\n        },\r\n\r\n        getPopulation(d) {\r\n            // console.log(name, this.infoData[name]);\r\n            return d && d.properties && d.properties.NAME && this.getDataByCountry(d.properties.NAME)\r\n                ? this.getDataByCountry(d.properties.NAME) : -1\r\n        },\r\n\r\n        getDataByCountry(cty) {\r\n            return this.infoData[cty] ? Object.values(this.infoData[cty])[0] : undefined;\r\n        },\r\n\r\n        getDescriptionByCountry(cty) {\r\n            console.log(this.infoData[cty]);\r\n            return this.infoData[cty] && this.infoData[cty]['description'] ? this.infoData[cty]['description'] : undefined;\r\n        },\r\n\r\n\r\n        showErrorDialog(title, msg) {\r\n            this.errorTitle = title;\r\n            this.errorMessage = msg;\r\n            this.errorDialog = true;\r\n        },\r\n\r\n        // 设置 Map Representation\r\n        setRepresentation(type) {\r\n            console.log(\"Representation:\", type)\r\n\r\n            if (type === this.myType['Political Map']) {\r\n                this.representationType = type;\r\n                this.representation = () => {\r\n                    this.svg.selectAll('path')\r\n                        .data(this.geoData.features)\r\n                        .enter()\r\n                        .append('path')\r\n                        .attr('d', this.geoPath)\r\n                        .attr('stroke', '#ffffff');\r\n                };\r\n            } else if (type === this.myType['Topographic Map']) {\r\n                this.representationType = type;\r\n            } else if (type === this.myType['Shape-based Map']) {\r\n                this.representationType = type;\r\n\r\n                this.representation = () => {\r\n                    // this.svg.selectAll('path')\r\n                    //     .data(this.geoData.features)\r\n                    //     .enter()\r\n                    //     .append('path')\r\n                    //     .attr('d', this.geoPath)\r\n                    //     .attr('stroke', '#ffffff');\r\n\r\n                    // 为地图上的每个国家绘制点阵图\r\n                    this.geoData.features.forEach(feature => {\r\n                        // 绘制点\r\n                        // 计算每个国家边界框内网格的行数和列数\r\n                        const bounds = d3.geoBounds(feature);\r\n                        const [left, bottom] = this.geoProjection(bounds[0]);\r\n                        const [right, top] = this.geoProjection(bounds[1]);\r\n                        const w = right - left;\r\n                        const h = bottom - top;\r\n                        const rows = Math.ceil(h / 15); // 假设每20像素一个点的行距\r\n                        const columns = Math.ceil(w / 15); // 假设每20像素一个点的列距\r\n                        const pointRadius = 3; // 点的半径大小\r\n\r\n                        // 生成特定国家边界框内的点\r\n                        const points = [];\r\n                        for (let i = 0; i < rows; i++) {\r\n                            for (let j = 0; j < columns; j++) {\r\n                                const x = left + j * (w / columns);\r\n                                const y = top + i * (h / rows);\r\n                                const point = this.geoProjection.invert([x, y]);\r\n                                if (d3.geoContains(feature, point)) {\r\n                                    points.push({x: x, y: y, properties: feature.properties});\r\n                                }\r\n                            }\r\n                        }\r\n\r\n                        this.svg.append('g')\r\n                            .attr(\"fill\", \"black\")\r\n                            .attr(\"fill-opacity\", 0.6)\r\n                            .attr(\"stroke\", \"#fff\")\r\n                            .attr(\"stroke-width\", 0.5)\r\n                            .selectAll(\"circle\")\r\n                            .data(points)\r\n                            .join(\"circle\")\r\n                            .attr(\"cx\", d => d.x)\r\n                            .attr(\"cy\", d => d.y)\r\n                            .attr(\"r\", pointRadius);\r\n                    })\r\n                };\r\n            } else if (type === this.myType['Street']) {\r\n                this.representationType = type;\r\n                alert('Attention! Not supporting for ANY color method in encoding channel, label position, or highlight.');\r\n                this.representation = () => {\r\n                    this.svg.append(\"image\")\r\n                        .attr(\"xlink:href\", require(\"../assets/streetmap.png\")) // 设置图片的路径\r\n                        .attr(\"width\", 1000) // 设置图片宽度\r\n                        .attr(\"height\", 655) // 设置图片高度\r\n                        .attr(\"x\", 150) // 设置图片相对于SVG画布的x坐标\r\n                        .attr(\"y\", -10) // 设置图片相对于SVG画布的y坐标\r\n                        .attr('transform', 'scale(2.0, 1.2)');\r\n                    this.svg.append(\"image\")\r\n                        .attr(\"xlink:href\", require(\"../assets/iceland.jpg\")) // 设置图片的路径\r\n                        .attr(\"width\", 150) // 设置图片宽度\r\n                        .attr(\"height\", 65) // 设置图片高度\r\n                        .attr(\"x\", 115) // 设置图片相对于SVG画布的x坐标\r\n                        .attr(\"y\", 70) // 设置图片相对于SVG画布的y坐标\r\n                        .attr('transform', 'scale(2.5, 1.3)')\r\n                        //.attr('transform', 'scale(1.5)');\r\n                };\r\n            } else if (type === this.myType['Plain']) {\r\n                this.representationType = type;\r\n                // this.svg.select('.grid-layer').remove();\r\n                // this.svg.select('defs').selectAll('clipPath').remove(); // 假设没有其他clipPath在使用\r\n\r\n                this.representation = () => {\r\n                    const addHighLight = (svg) => {\r\n                        const highLight = () => {\r\n                            console.log(svg);\r\n                            d3.select(svg)\r\n                                .classed('highlighted', true) // 使用类来标记高亮\r\n                                .attr('fill', '#000000');\r\n                        };\r\n\r\n                        highLight(svg);\r\n                        this.highLights[this.pointer2highlight].push(highLight);\r\n                    };\r\n\r\n                    this.svg.selectAll('path')\r\n                        .on('click', function () {\r\n                            addHighLight(this)\r\n                        });\r\n                }\r\n\r\n\r\n            } else if (type === this.myType['Terrain']) {\r\n                this.representationType = type;\r\n\r\n                alert('Attention! Not supporting for ANY color method in encoding channel, label position, or highlight.');\r\n\r\n                this.representation = () => {\r\n                    this.svg.append(\"image\")\r\n                    .attr(\"xlink:href\", require(\"../assets/terrain.svg\")) // 设置图片的路径\r\n                    .attr(\"width\", 1000) // 设置图片宽度\r\n                    .attr(\"height\", 675) // 设置图片高度\r\n                    .attr(\"x\", 150) // 设置图片相对于SVG画布的x坐标\r\n                    .attr(\"y\", 0) // 设置图片相对于SVG画布的y坐标\r\n                    .attr('transform', 'scale(1.8, 1.2)');\r\n                };\r\n\r\n                \r\n            }\r\n\r\n            this.drawSvg();\r\n        },\r\n\r\n        // 设置 Map Projection\r\n        setProjection(type) {\r\n            console.log(\"Map Projection:\", type);\r\n\r\n            if (type === this.myType['Mercator']) {\r\n                this.projectionType = type;\r\n\r\n                this.geoProjection = d3.geoMercator()\r\n                    .fitSize([this.mapWidth, this.mapHeight], this.geoData);\r\n            } else if (type === this.myType['Equirectangular']) {\r\n                this.projectionType = type;\r\n\r\n                this.geoProjection = d3.geoEquirectangular()\r\n                    .fitSize([this.mapWidth, this.mapHeight], this.geoData);\r\n            }\r\n\r\n            this.geoPath = d3.geoPath().projection(this.geoProjection);\r\n            this.drawSvg();\r\n        },\r\n\r\n        setHighlight(type) {\r\n            console.log(\"Highlight Techniques:\", type);\r\n\r\n            // 重置所有路径的填充颜色到默认颜色\r\n            // this.svg.selectAll('path')\r\n            //   .attr('fill', d => this.fillColorFunction(d.properties.populationd))\r\n            //   .classed('highlighted', false); // 假设你使用了highlighted类来表示高亮\r\n\r\n            // // 移除所有之前添加的特定高亮元素\r\n            // this.svg.selectAll('.highlight-marker').remove();\r\n\r\n            // 取消之前的所有点击事件监听器\r\n            this.svg.selectAll('path').on('click', null);\r\n            // 重要：移除绑定到SVG本身的点击事件监听器\r\n            this.svg.on('click', null);\r\n            // d3.select('#' + this.value + '-enlargedView').selectAll(\"*\").remove(); \r\n            // 根据类型应用新的高亮方式\r\n            if (type === this.myType['Color']) {\r\n                this.highLightType = type;\r\n\r\n                const addHighLight = (svg) => {\r\n                    const highLight = () => {\r\n                        console.log(svg);\r\n                        d3.select(svg)\r\n                            .classed('highlighted', true) // 使用类来标记高亮\r\n                            .attr('fill', '#5959E9');\r\n                    };\r\n\r\n                    highLight(svg);\r\n                    this.highLights[this.pointer2highlight].push(highLight);\r\n                };\r\n\r\n                this.svg.selectAll('path')\r\n                    .on('click', function () {\r\n                        addHighLight(this)\r\n                    });\r\n            } else if (type === this.myType['Light']) {\r\n                this.highLightType = type;\r\n\r\n                const addHighLight = (event, svg) => {\r\n                    const [x, y] = d3.pointer(event, svg);\r\n\r\n                    const highLight = () => {\r\n                        // 添加一个SVG图标作为光圈效果\r\n                        d3.select(svg).append('image')\r\n                            .classed('highlight-marker', true) // 使用类来标记这是一个高亮标记\r\n                            .attr('xlink:href', require('../assets/lightIcon.svg'))// 设置图像的路径\r\n                            .attr('x', x - 40) // 调整图像位置，使其中心对准点击位置\r\n                            .attr('y', y - 40) // 同上，这里的15是假设图像大小为30x30像素，需要根据实际大小调整\r\n                            .attr('width', 80) // 设置图像的宽度\r\n                            .attr('height', 80); // 设置图像的高度\r\n                    };\r\n\r\n                    highLight();\r\n                    this.highLights[this.pointer2highlight].push(highLight);\r\n                };\r\n\r\n                // 绑定一个新的点击事件监听器到SVG本身\r\n                this.svg.on('click', function (event) {\r\n                    addHighLight(event, this)\r\n                });\r\n            } else if (type === this.myType['Map Pin']) {\r\n                this.highLightType = type;\r\n\r\n                const addHighLight = (event, svg) => {\r\n                    const [x, y] = d3.pointer(event, svg);\r\n\r\n                    const highLight = () => {\r\n                        // 添加一个SVG图标作为光圈效果\r\n                        d3.select(svg).append('image')\r\n                            .classed('highlight-marker', true) // 使用类来标记这是一个高亮标记\r\n                            .attr('xlink:href', require('../assets/locationIcon.svg'))// 设置图像的路径\r\n                            .attr('x', x - 20) // 调整图像位置，使其中心对准点击位置\r\n                            .attr('y', y - 48) // 同上，根据实际大小调整\r\n                            .attr('width', 40) // 设置图像的宽度\r\n                            .attr('height', 48); // 设置图像的高度\r\n                    };\r\n\r\n                    highLight();\r\n                    this.highLights[this.pointer2highlight].push(highLight);\r\n                };\r\n\r\n                // 绑定一个新的点击事件监听器到SVG本身\r\n                this.svg.on('click', function (event) {\r\n                    addHighLight(event, this);\r\n                });\r\n            } else if (type === this.myType['3D Transformation']) {\r\n                this.highLightType = type;\r\n\r\n                const addHighLight = (event, svg) => {\r\n                    // eslint-disable-next-line no-unused-vars\r\n                    const [x, y] = d3.pointer(event, svg);\r\n                    const feature = d3.select(event.target).datum(); // 获取被点击的地图区域的数据\r\n                    const originalColor = d3.select(event.target).attr(\"fill\");\r\n\r\n                    // 高亮函数\r\n                    const highLight = () => {\r\n                        // 首先移除之前的高亮效果\r\n                        //this.svg.selectAll('.highlight-3d-effect').remove();\r\n\r\n                        // 然后添加一个新的具有3D效果的path\r\n                        this.svg.append('path')\r\n                            .datum(feature) // 使用同一区域的数据\r\n                            .attr('class', 'highlight-3d-effect') // 为了方便之后可能的移除\r\n                            .attr('d', this.geoPath) // 使用geoPath来保持地理形状的一致性\r\n                            .attr('fill', originalColor) // 为了简化，这里使用纯色填充表示阴影\r\n                            .attr('filter', 'url(#drop-shadow)')\r\n                            .attr('stroke-width', 2); // 应用下面定义的SVG滤镜实现阴影效果\r\n\r\n                        // 添加或确保SVG滤镜的存在\r\n                        const defs = this.svg.append('defs');\r\n\r\n                        const filter = defs.append('filter')\r\n                            .attr('id', 'drop-shadow')\r\n                            .attr('height', '130%');\r\n\r\n                        filter.append('feGaussianBlur')\r\n                            .attr('in', 'SourceAlpha')\r\n                            .attr('stdDeviation', 3)\r\n                            .attr('result', 'blur');\r\n\r\n                        filter.append('feOffset')\r\n                            .attr('in', 'blur')\r\n                            .attr('dx', 5)\r\n                            .attr('dy', 5)\r\n                            .attr('result', 'offsetBlur');\r\n\r\n                        const feMerge = filter.append('feMerge');\r\n                        feMerge.append('feMergeNode')\r\n                            .attr('in', 'offsetBlur');\r\n                        feMerge.append('feMergeNode')\r\n                            .attr('in', 'SourceGraphic');\r\n                    };\r\n\r\n                    highLight();\r\n                    this.highLights[this.pointer2highlight].push(highLight);\r\n                };\r\n\r\n                // 绑定点击事件到所有的path上\r\n                this.svg.selectAll('path').on('click', function (event) {\r\n                    addHighLight(event, this);\r\n                });\r\n            } else if (type === this.myType['Enlarged Portions']) {\r\n                this.highLightType = type;\r\n\r\n                // 移除之前可能绑定的点击事件以避免重复\r\n                this.svg.on('click', null);\r\n\r\n                // 直接在点击事件中实现放大效果的逻辑\r\n                this.svg.on('click', (event) => {\r\n                    // 移除上一次点击留下的圆圈\r\n                    this.svg.selectAll('circle.click-circle').remove();\r\n                    this.svg.selectAll('line.click-circle').remove();\r\n\r\n                    const [x, y] = d3.pointer(event, this.svg.node());\r\n\r\n                    // 在点击位置绘制一个圆圈作为反馈\r\n                    this.svg.append('circle')\r\n                        .classed('click-circle', true) // 添加一个类以便后续可以选择并移除\r\n                        .attr('cx', x)\r\n                        .attr('cy', y)\r\n                        .attr('r', 30) // 圆的半径\r\n                        .style('fill', 'none')\r\n                        .style('stroke', '#5959E9')\r\n                        .style('stroke-width', 3);\r\n\r\n                    // 清除#enlargedView中的内容\r\n                    const enlargedView = d3.select('#' + this.value + '-enlargedView');\r\n                    enlargedView.selectAll('*').remove();\r\n\r\n                    // 在#enlargedView中创建一个新的svg元素\r\n                    const enlargedViewSvg = enlargedView.append('svg')\r\n                        .attr('width', '100%')\r\n                        .attr('height', '100%')\r\n                        .attr('viewBox', `${x - 30} ${y - 30} 60 60`);\r\n\r\n                    // 创建圆形裁剪路径\r\n                    const defs = enlargedViewSvg.append('defs');\r\n                    const clipPath = defs.append('clipPath')\r\n                        .attr('id', 'circle-clip');\r\n                    clipPath.append('circle')\r\n                        .attr('cx', x)\r\n                        .attr('cy', y)\r\n                        .attr('r', 30);\r\n\r\n                    // 复制原SVG内容到新的SVG元素中，并应用圆形裁剪路径\r\n                    enlargedViewSvg.append('g')\r\n                        .attr('clip-path', 'url(#circle-clip)')\r\n                        .html(this.svg.html());\r\n\r\n                    // 由于SVG元素被复制，我们需要重新计算transform属性以确保放大的区域正确对齐\r\n                    enlargedViewSvg.selectAll('g > svg')\r\n                        .attr('x', null)\r\n                        .attr('y', null)\r\n                        .style('transform', ` scale(2)`);\r\n\r\n                    // draw traction line\r\n                    const x1 = this.mapWidth - 94, y1 = 147, r1 = 100, r = 30; // approximate centre of enlarged circle\r\n                    const d = Math.sqrt((x1 - x) * (x1 - x) + (y1 - y) * (y1 - y));\r\n                    const xa = x + r * Math.cos(Math.atan((y1 - y) / (x1 - x)) + Math.acos((r - r1) / d));\r\n                    const ya = y + r * Math.sin(Math.atan((y1 - y) / (x1 - x)) + Math.acos((r - r1) / d));\r\n                    const xb = x1 + r1 * Math.cos(Math.atan((y1 - y) / (x1 - x)) + Math.acos((r - r1) / d));\r\n                    const yb = y1 + r1 * Math.sin(Math.atan((y1 - y) / (x1 - x)) + Math.acos((r - r1) / d));\r\n                    const xc = x + r * Math.cos(Math.atan((y1 - y) / (x1 - x)) - Math.acos((r - r1) / d));\r\n                    const yc = y + r * Math.sin(Math.atan((y1 - y) / (x1 - x)) - Math.acos((r - r1) / d));\r\n                    const xd = x1 + r1 * Math.cos(Math.atan((y1 - y) / (x1 - x)) - Math.acos((r - r1) / d));\r\n                    const yd = y1 + r1 * Math.sin(Math.atan((y1 - y) / (x1 - x)) - Math.acos((r - r1) / d));\r\n                    this.svg.append('line')\r\n                        .classed('click-circle', true)\r\n                        .attr('x1', xa)\r\n                        .attr('y1', ya)\r\n                        .attr('x2', xb)\r\n                        .attr('y2', yb)\r\n                        .attr('stroke', 'grey')\r\n                        .attr('stroke-width', 1);\r\n                    this.svg.append('line')\r\n                        .classed('click-circle', true)\r\n                        .attr('x1', xc)\r\n                        .attr('y1', yc)\r\n                        .attr('x2', xd)\r\n                        .attr('y2', yd)\r\n                        .attr('stroke', 'grey')\r\n                        .attr('stroke-width', 1);\r\n                });\r\n            } else if (type === this.myType['Edge Stroke']) {\r\n                this.highLightType = type;\r\n\r\n                const addHighLight = (event) => {\r\n                    const feature = d3.select(event.target).datum(); // 获取被点击的地图区域的数据\r\n\r\n                    // 高亮函数\r\n                    const highLight = () => {\r\n                        this.svg.append('path')\r\n                            .datum(feature) // 使用同一区域的数据\r\n                            .attr('class', 'highlight-edge-stroke') // 为了方便之后可能的移除\r\n                            .attr('d', this.geoPath) // 使用geoPath来保持地理形状的一致性\r\n                            .attr('stroke-width', 2)\r\n                            .attr('stroke', '#5959E9')\r\n                            .style('fill', 'none');\r\n                    };\r\n\r\n                    highLight();\r\n                    this.highLights[this.pointer2highlight].push(highLight);\r\n                };\r\n\r\n                // 绑定点击事件到所有的path上\r\n                this.svg.selectAll('path').on('click', function (event) {\r\n                    addHighLight(event, this);\r\n                });\r\n            } else if (type === this.myType['Highlight Remove']) {\r\n                this.highLightType = type;\r\n                this.highLights.push([]);\r\n                this.pointer2highlight++;\r\n                this.drawSvg();\r\n            }\r\n\r\n\r\n        },\r\n\r\n        setLabelPosition(type) {\r\n            console.log(\"Label Position:\", type);\r\n            // 移除之前添加的所有标签\r\n            this.svg.selectAll(\".country-label, .annotation-box, .annotation-text, .olympic-label, .country-flag, .annotation-line\").remove();\r\n            this.svg.selectAll(\".country-color\")\r\n                .style('fill', null) // 或设置为你的默认颜色\r\n                .classed(\"country-color\", false); // 移除类，以避免对后续操作的影响\r\n            // 定义注解框的宽度、高度和间距\r\n            const boxWidth = 205; // 固定宽度\r\n            const boxHeight = 60; // 固定高度\r\n            const boxSpacing = 20; // 注解框之间的间距\r\n            const marginSpace = 2;\r\n            if (type === this.myType['Label Situated']) {\r\n                this.labelPositionType = type;\r\n\r\n                \r\n\r\n                this.LabelPosition = () => {\r\n                    this.geoData.features.forEach(feature => {\r\n                        if ((this.getDescriptionByCountry(feature.properties.NAME)) != undefined) {\r\n                            const center = this.geoPath.centroid(feature);\r\n                            const annotation = this.getDescriptionByCountry(feature.properties.NAME);\r\n\r\n                            if (annotation && annotation != -1) {\r\n                                let textLines = [\r\n                                    `${feature.properties.NAME}`,\r\n                                    // `City: ${annotation.city}`\r\n                                    `${annotation}`\r\n                                ];\r\n\r\n                                // 根据条件动态添加Summer和Winter的行\r\n                                // if (annotation.summer_olympics && annotation.summer_olympics.length > 0) {\r\n                                //     textLines.push(`Summer: ${annotation.summer_olympics}`);\r\n                                // }\r\n                                // if (annotation.winter_olympics && annotation.winter_olympics.length > 0) {\r\n                                //     textLines.push(`Winter: ${annotation.winter_olympics}`);\r\n                                // }\r\n                                const maxLineWidth = 30;\r\n\r\n                                // 用于跟踪当前垂直位置的变量\r\n                                let currentYOffset = 0;\r\n\r\n                                // 应用拆分函数并添加文本\r\n                                textLines.forEach((line, index) => {\r\n                                    let subLines = this.splitTextToLines(line, maxLineWidth); // 使用拆分函数\r\n                                    subLines.forEach((subLine) => {\r\n                                        if (index)\r\n                                            this.svg.append('text')\r\n                                                .attr('class', 'olympic-label')\r\n                                                .attr('x', center[0])\r\n                                                .attr('y', center[1] + currentYOffset-20) // 使用currentYOffset确定垂直位置\r\n                                                .attr('text-anchor', 'middle')\r\n                                                .attr('fill', 'black')\r\n                                                .style('font-size', '12px')\r\n                                                .text(subLine);\r\n                                        else\r\n                                            this.svg.append('text')\r\n                                                .attr('class', 'olympic-label')\r\n                                                .attr('x', center[0])\r\n                                                .attr('y', center[1] + currentYOffset-20) // 使用currentYOffset确定垂直位置\r\n                                                .attr('text-anchor', 'middle')\r\n                                                .attr('fill', 'black')\r\n                                                .style('font-size', '12px')\r\n                                                .style(\"font-weight\", \"bold\")\r\n                                                .text(subLine);\r\n\r\n                                        // 每添加一行，更新currentYOffset以便下一行下移\r\n                                        currentYOffset += 13; // 假设每行文本的高度加间距为13px\r\n                                    });\r\n\r\n                                    // 注意：这里不再需要调整index\r\n                                });\r\n                            }\r\n                        }\r\n                        \r\n                    });\r\n                }\r\n\r\n\r\n            } else if (type === this.myType['Label Text']) {\r\n                this.labelPositionType = type;\r\n\r\n                this.LabelPosition = () => {\r\n                    // 仅为olympics_data.json中存在的国家显示国家名字\r\n                    this.geoData.features.forEach(feature => {\r\n                        if ((this.getDescriptionByCountry(feature.properties.NAME)) != undefined) {\r\n                            const center = this.geoPath.centroid(feature);\r\n                            this.svg.append('text')\r\n                                .attr('class', 'country-label')\r\n                                .attr('x', center[0])\r\n                                .attr('y', center[1])\r\n                                .attr('text-anchor', 'middle')\r\n                                .attr('fill', 'black')\r\n                                .style('font-size', '15px')\r\n                                .text(feature.properties.NAME);\r\n                        }\r\n                    });\r\n\r\n                    // 过滤掉不需要展示注解的数据\r\n                    const annotatedFeatures = this.geoData.features.filter(feature=>(this.getDescriptionByCountry(feature.properties.NAME)) != undefined);\r\n\r\n                    // 用于注解的特征进行循环，而不是所有特征\r\n                    annotatedFeatures.forEach((feature, index) => {\r\n                        const annotation = this.getDescriptionByCountry(feature.properties.NAME);\r\n\r\n\r\n                        // // 动态计算x坐标，考虑间距，以保证注解框在水平方向上均匀对齐\r\n                        // const x = col * (boxWidth + boxSpacing);\r\n\r\n                        // 计算每个注解的起始x坐标\r\n                        const totalAnnotationsWidth = annotatedFeatures.length * (boxWidth + boxSpacing) - boxSpacing; // 总宽度减去最后一个间距\r\n                        const startX = (this.mapWidth - totalAnnotationsWidth) / 2; // 为了居中对齐\r\n                        // // 调整y坐标，为每个注解框下方留出一定的间距\r\n                        // const y = this.mapHeight + row * (boxHeight + 20 + boxSpacing); // 调整了间距的计算\r\n                        const annotationX = startX + index * (boxWidth + boxSpacing); \r\n                        const annotationY = this.mapHeight + 50; // 地图下方50px\r\n\r\n\r\n                        // 绘制注解框\r\n                        // this.svg.append('rect')\r\n                        //     .attr('class', 'annotation-box')\r\n                        //     .attr('x', annotationX)\r\n                        //     .attr('y', annotationY)\r\n                        //     .attr('width', boxWidth)\r\n                        //     .attr('height', boxHeight)\r\n                        //     .attr('fill', this.defaultColor)\r\n                        //     .attr('stroke', 'none');\r\n\r\n                        // 在注解框内添加文本\r\n                        let textLines = [\r\n                            `${feature.properties.NAME}`,\r\n                            `${annotation}`\r\n                        ];\r\n\r\n                        const maxWidth = boxWidth-5-2*marginSpace; // 设置最大宽度阈值\r\n                        let ty = annotationY;\r\n\r\n                        textLines.forEach((line, lineIndex) => {\r\n                            let words = line.split(' ');\r\n                            let currentLine = words[0];\r\n\r\n                            for (let i = 1; i < words.length; i++) {\r\n                                let word = words[i];\r\n                                let testLine = currentLine + ' ' + word;\r\n                                let testWidth = this.getTextWidth(testLine, '13px'); // 获取当前行的文本宽度13\r\n\r\n                                if (testWidth > maxWidth) {\r\n                                    this.svg.append('text')\r\n                                        .attr('class', 'annotation-text')\r\n                                        .attr('x', annotationX + 5+marginSpace) // 略微缩进\r\n                                        .attr('y', ty + 15 + (lineIndex * 14)) // 根据行数调整位置\r\n                                        .attr('fill', 'black')\r\n                                        .style('font-size', '13px')\r\n                                        .text(currentLine); // 添加当前行的文本\r\n\r\n                                    currentLine = word;\r\n                                    ty += 14; // 调整Y坐标到下一行\r\n                                } else {\r\n                                    currentLine += ' ' + word;\r\n                                }\r\n                            }\r\n                        });\r\n\r\n                        this.svg.append('rect')\r\n                            .attr('class', 'annotation-box')\r\n                            .attr('x', annotationX)\r\n                            .attr('y', annotationY)\r\n                            .attr('width', boxWidth)\r\n                            .attr('height', 120)//.attr('height', boxHeight+ty-annotationY)\r\n                            .attr('fill', this.defaultColor)\r\n                            .attr('stroke', 'none');\r\n\r\n                        ty = annotationY;\r\n                        textLines.forEach((line, lineIndex) => {\r\n                            let words = line.split(' ');\r\n                            let currentLine = words[0];\r\n\r\n                            for (let i = 1; i < words.length; i++) {\r\n                                let word = words[i];\r\n                                let testLine = currentLine + ' ' + word;\r\n                                let testWidth = this.getTextWidth(testLine, '13px'); // 获取当前行的文本宽度，第二个参数为字体大小\r\n\r\n                                if (testWidth > maxWidth) {\r\n                                    this.svg.append('text')\r\n                                        .attr('class', 'annotation-text')\r\n                                        .attr('x', annotationX + 5 + marginSpace) // 略微缩进\r\n                                        .attr('y', ty + 15 + (lineIndex * 14)) // 根据行数调整位置\r\n                                        .attr('fill', 'black')\r\n                                        .style('font-size', '13px')\r\n                                        .text(currentLine); // 添加当前行的文本\r\n                                            \r\n                                    currentLine = word;\r\n                                    ty += 14; // 调整Y坐标到下一行\r\n                                } else {\r\n                                    currentLine += ' ' + word;\r\n                                }\r\n                            }\r\n                            if(lineIndex)\r\n                                this.svg.append('text')\r\n                                    .attr('class', 'annotation-text')\r\n                                    .attr('x', annotationX + 5 + marginSpace) // 略微缩进\r\n                                    .attr('y', ty + 15 + (lineIndex * 14)) // 根据行数调整位置\r\n                                    .attr('fill', 'black')\r\n                                    .style('font-size', '13px')\r\n                                    .text(currentLine);\r\n                            else\r\n                                    this.svg.append('text')\r\n                                    .attr('class', 'annotation-text')\r\n                                    .attr('x', annotationX + 5 + marginSpace) // 略微缩进\r\n                                    .attr('y', ty + 15 + (lineIndex * 14)) // 根据行数调整位置\r\n                                    .attr('fill', 'black')\r\n                                    .style('font-size', '13px')\r\n                                    .style('font-weight', 'bold')\r\n                                    .text(currentLine);\r\n                        });\r\n                    });\r\n                }\r\n\r\n            } else if (type === this.myType['Label Icon']) {\r\n                this.labelPositionType = type;\r\n\r\n                this.LabelPosition = () => {\r\n                    // 过滤掉不需要展示注解的数据\r\n                    const annotatedFeatures = this.geoData.features.filter(feature=>(this.getDescriptionByCountry(feature.properties.NAME)) != undefined);\r\n\r\n\r\n                    // 用于注解的特征进行循环\r\n                    annotatedFeatures.forEach((feature, index) => {\r\n                        const annotationFlag = feature.properties.annotation;\r\n                        const annotation = this.getDescriptionByCountry(feature.properties.NAME);\r\n                        // 计算每个注解的起始x坐标\r\n                        const totalAnnotationsWidth = annotatedFeatures.length * (boxWidth + boxSpacing) - boxSpacing; // 总宽度减去最后一个间距\r\n                        const startX = (this.mapWidth - totalAnnotationsWidth) / 2; // 为了居中对齐\r\n                        // // 调整y坐标，为每个注解框下方留出一定的间距\r\n                        // const y = this.mapHeight + row * (boxHeight + 20 + boxSpacing); // 调整了间距的计算\r\n                        const annotationX = startX + index * (boxWidth + boxSpacing);\r\n                        const annotationY = this.mapHeight + 60; // 地图下方50px\r\n                        if (annotationFlag && annotationFlag.flag_base64) {\r\n                            const center = this.geoPath.centroid(feature);\r\n                            // 在地图的国家中心点上添加国旗图像\r\n                            this.svg.append('image')\r\n                                .attr('xlink:href', annotationFlag.flag_base64)\r\n                                .attr('x', center[0] - 15) // 调整这个值以适合国旗图像的大小和位置\r\n                                .attr('y', center[1] - 10)\r\n                                .attr('width', 30) // 根据需要调整国旗的尺寸\r\n                                .attr('height', 20)\r\n                                .attr('class', 'country-flag');\r\n\r\n\r\n                            // 先绘制注解框作为背景\r\n                            this.svg.append('rect')\r\n                                .attr('class', 'annotation-box')\r\n                                .attr('x', annotationX)\r\n                                .attr('y', annotationY-boxHeight)\r\n                                .attr('width', boxWidth)\r\n                                .attr('height', boxHeight)\r\n                                .attr('fill', 'url(#flagPattern' + index + ')') // 使用图案填充\r\n                                .attr('stroke', 'none');\r\n\r\n                            let textLines = [\r\n                                `${feature.properties.NAME}`,\r\n                                `${annotation}`\r\n                            ];\r\n\r\n                            const maxWidth = boxWidth-5-2*marginSpace; // 设置最大宽度阈值\r\n                            let ty = annotationY;\r\n\r\n                            textLines.forEach((line, lineIndex) => {\r\n                                let words = line.split(' ');\r\n                                let currentLine = words[0];\r\n\r\n                                for (let i = 1; i < words.length; i++) {\r\n                                    let word = words[i];\r\n                                    let testLine = currentLine + ' ' + word;\r\n                                    let testWidth = this.getTextWidth(testLine, '13px'); // 获取当前行的文本宽度\r\n\r\n                                    if (testWidth > maxWidth) {\r\n                                        this.svg.append('text')\r\n                                            .attr('class', 'annotation-text')\r\n                                            .attr('x', annotationX + 5) // 略微缩进\r\n                                            .attr('y', ty + 15 + (lineIndex * 14)) // 根据行数调整位置\r\n                                            .attr('fill', 'black')\r\n                                            .style('font-size', '13px')\r\n                                            .text(currentLine); // 添加当前行的文本\r\n\r\n                                        currentLine = word;\r\n                                        ty += 14; // 调整Y坐标到下一行\r\n                                    } else {\r\n                                        currentLine += ' ' + word;\r\n                                    }\r\n                                }\r\n                            });\r\n                            this.svg.append('rect')\r\n                                .attr('class', 'annotation-box')\r\n                                .attr('x', annotationX)\r\n                                .attr('y', annotationY - boxHeight)\r\n                                .attr('width', boxWidth)\r\n                                .attr('height', 180)//boxHeight + ty - annotationY + boxHeight/2\r\n                                .attr('fill', this.defaultColor);\r\n                            // 创建clipPath\r\n                            this.svg.append('clipPath')\r\n                                .attr('id', 'clipPath' + index)\r\n                                .append('rect')\r\n                                .attr('x', annotationX)\r\n                                .attr('y', annotationY - boxHeight)\r\n                                .attr('width', boxWidth)\r\n                                .attr('height', boxHeight);\r\n\r\n                            // 创建图案\r\n                            this.svg.append('pattern')\r\n                                .attr('id', 'flagPattern' + index)\r\n                                .attr('patternUnits', 'objectBoundingBox')\r\n                                .attr('width', '100%')\r\n                                .attr('height', '100%')\r\n                                .append('image')\r\n                                .attr('xlink:href', annotationFlag.flag_base64)\r\n                                .attr('width', boxWidth/2)\r\n                                .attr('height', boxHeight/2)\r\n                                .attr('preserveAspectRatio', 'xMidYMid slice')\r\n                                .attr('transform', 'translate(-7, 20)');\r\n\r\n                            // 创建矩形，并应用clip-path\r\n                            this.svg.append('rect')\r\n                                .attr('class', 'annotation-box')\r\n                                .attr('x', annotationX)\r\n                                .attr('y', annotationY - boxHeight)\r\n                                .attr('width', boxWidth)\r\n                                .attr('height', boxHeight + ty - annotationY + boxHeight)\r\n                                .attr('fill', 'url(#flagPattern' + index + ')')\r\n                                .attr('stroke', 'none')\r\n                                .attr('clip-path', 'url(#clipPath' + index + ')');\r\n\r\n\r\n\r\n\r\n                            ty = annotationY;\r\n                            textLines.forEach((line, lineIndex) => {\r\n                                let words = line.split(' ');\r\n                                let currentLine = words[0];\r\n\r\n                                for (let i = 1; i < words.length; i++) {\r\n                                    let word = words[i];\r\n                                    let testLine = currentLine + ' ' + word;\r\n                                    let testWidth = this.getTextWidth(testLine, '13px'); // 获取当前行的文本宽度\r\n\r\n                                    if (testWidth > maxWidth) {\r\n                                        this.svg.append('text')\r\n                                            .attr('class', 'annotation-text')\r\n                                            .attr('x', annotationX + 5 + marginSpace) // 略微缩进\r\n                                            .attr('y', ty + 15 + (lineIndex * 14)) // 根据行数调整位置\r\n                                            .attr('fill', 'black')\r\n                                            .style('font-size', '13px')\r\n                                            .text(currentLine); // 添加当前行的文本\r\n\r\n                                        currentLine = word;\r\n                                        ty += 14; // 调整Y坐标到下一行\r\n                                    } else {\r\n                                        currentLine += ' ' + word;\r\n                                    }\r\n                                }\r\n                                if(lineIndex)\r\n                                    this.svg.append('text')\r\n                                        .attr('class', 'annotation-text')\r\n                                        .attr('x', annotationX + 5 + marginSpace) // 略微缩进\r\n                                        .attr('y', ty + 15 + (lineIndex * 14)) // 根据行数调整位置\r\n                                        .attr('fill', 'black')\r\n                                        .style('font-size', '13px')\r\n                                        .text(currentLine);\r\n                                else\r\n                                    this.svg.append('text')\r\n                                        .attr('class', 'annotation-text')\r\n                                        .attr('x', annotationX + 5 + marginSpace) // 略微缩进\r\n                                        .attr('y', ty + 15 + (lineIndex * 14)) // 根据行数调整位置\r\n                                        .attr('fill', 'black')\r\n                                        .style('font-size', '13px')\r\n                                        .style('font-weight', 'bold')\r\n                                        .text(currentLine);\r\n                            });\r\n\r\n                            \r\n                        }\r\n                    });\r\n                }\r\n\r\n            } else if (type === this.myType['Label Color']) {\r\n                this.labelPositionType = type;\r\n\r\n                this.LabelPosition = () => {\r\n                    // 颜色数组\r\n                    const countryColors = [\"#8ECFC9\", \"#FFBE7A\", \"#FA7F6F\", \"#82B0D2\", \"#BEB8DC\", \"#F6CAE5\", \"#F1D77E\", \"#2878b5\", \"#779043\"];\r\n                    const getCountryColor = (index) => countryColors[index % countryColors.length];\r\n\r\n                    // 过滤出需要注解的国家特征\r\n                    const annotatedFeatures = this.geoData.features.filter(feature=>(this.getDescriptionByCountry(feature.properties.NAME)) != undefined);\r\n\r\n                    // 为有注解的国家设置颜色\r\n                    annotatedFeatures.forEach((feature, index) => {\r\n                        // 计算每个注解的起始x坐标\r\n                        const totalAnnotationsWidth = annotatedFeatures.length * (boxWidth + boxSpacing) - boxSpacing; // 总宽度减去最后一个间距\r\n                        const startX = (this.mapWidth - totalAnnotationsWidth) / 2; // 为了居中对齐\r\n                        // // 调整y坐标，为每个注解框下方留出一定的间距\r\n                        // const y = this.mapHeight + row * (boxHeight + 20 + boxSpacing); // 调整了间距的计算\r\n                        const annotationX = startX + index * (boxWidth + boxSpacing);\r\n                        const annotationY = this.mapHeight + 50; // 地图下方50px\r\n                        const fillColor = getCountryColor(index); // 获取颜色\r\n\r\n                        // 设置国家颜色\r\n                        this.svg.selectAll('path')\r\n                            .filter(d => d === feature)\r\n                            .style('fill', fillColor)\r\n                            .classed(\"country-color\", true);\r\n\r\n                        // 创建注解框\r\n                        // this.svg.append('rect')\r\n                        //     .attr('class', 'annotation-box')\r\n                        //     .attr('x', annotationX)\r\n                        //     .attr('y', annotationY)\r\n                        //     .attr('width', boxWidth)\r\n                        //     .attr('height', boxHeight)\r\n                        //     .attr('fill', fillColor) // 确保注解框颜色与国家颜色相同\r\n                        //     .attr('stroke', 'none');\r\n\r\n                        // 添加注解文本\r\n                        const annotation = this.getDescriptionByCountry(feature.properties.NAME);\r\n                        let textLines = [\r\n                            `${feature.properties.NAME}`,\r\n                            `${annotation}`\r\n                        ];\r\n\r\n                        const maxWidth = boxWidth-5-4*marginSpace; // 设置最大宽度阈值\r\n                        let ty = annotationY;\r\n\r\n                        textLines.forEach((line, lineIndex) => {\r\n                            let words = line.split(' ');\r\n                            let currentLine = words[0];\r\n                            console.log(words);\r\n                            console.log(words.length);\r\n                            for (let i = 1; i < words.length; i++) {\r\n                                let word = words[i];\r\n                                let testLine = currentLine + ' ' + word;\r\n                                let testWidth = this.getTextWidth(testLine, '13px'); // 获取当前行的文本宽度\r\n\r\n                                if (testWidth > maxWidth) {\r\n                                    this.svg.append('text')\r\n                                        .attr('class', 'annotation-text')\r\n                                        .attr('x', annotationX + 5) // 略微缩进\r\n                                        .attr('y', ty + 15 + (lineIndex * 14)) // 根据行数调整位置\r\n                                        .attr('fill', 'black')\r\n                                        .style('font-size', '13px')\r\n                                        .text(currentLine); // 添加当前行的文本\r\n\r\n                                    currentLine = word;\r\n                                    ty += 14; // 调整Y坐标到下一行\r\n                                } else {\r\n                                    currentLine += ' ' + word;\r\n                                }\r\n                            }\r\n                        });\r\n\r\n                        this.svg.append('rect')\r\n                            .attr('class', 'annotation-box')\r\n                            .attr('x', annotationX)\r\n                            .attr('y', annotationY)\r\n                            .attr('width', boxWidth)\r\n                            .attr('height', 120) //boxHeight+ty-annotationY\r\n                            .attr('fill', fillColor)\r\n                            .attr('stroke', 'none');\r\n\r\n                        ty = annotationY;\r\n                        textLines.forEach((line, lineIndex) => {\r\n                            let words = line.split(' ');\r\n                            let currentLine = words[0];\r\n\r\n                            for (let i = 1; i < words.length; i++) {\r\n                                let word = words[i];\r\n                                let testLine = currentLine + ' ' + word;\r\n                                let testWidth = this.getTextWidth(testLine, '13px'); // 获取当前行的文本宽度\r\n\r\n                                if (testWidth > maxWidth) {\r\n                                    this.svg.append('text')\r\n                                        .attr('class', 'annotation-text')\r\n                                        .attr('x', annotationX + 5 + 2*marginSpace) // 略微缩进\r\n                                        .attr('y', ty + 15 + (lineIndex * 14)) // 根据行数调整位置\r\n                                        .attr('fill', 'black')\r\n                                        .style('font-size', '13px')\r\n                                        .text(currentLine); // 添加当前行的文本\r\n\r\n                                    currentLine = word;\r\n                                    ty += 14; // 调整Y坐标到下一行\r\n                                } else {\r\n                                    currentLine += ' ' + word;\r\n                                }\r\n                            }\r\n                            if(lineIndex)\r\n                                this.svg.append('text')\r\n                                    .attr('class', 'annotation-text')\r\n                                    .attr('x', annotationX + 5+2*marginSpace) // 略微缩进\r\n                                    .attr('y', ty + 15 + (lineIndex * 14)) // 根据行数调整位置\r\n                                    .attr('fill', 'black')\r\n                                    .style('font-size', '13px')\r\n                                    .text(currentLine);\r\n                            else\r\n                                this.svg.append('text')\r\n                                    .attr('class', 'annotation-text')\r\n                                    .attr('x', annotationX + 5 + marginSpace) // 略微缩进\r\n                                    .attr('y', ty + 15 + (lineIndex * 14)) // 根据行数调整位置\r\n                                    .attr('fill', 'black')\r\n                                    .style('font-size', '13px')\r\n                                    .style('font-weight', 'bold')\r\n                                    .text(currentLine);\r\n                        });\r\n                    });\r\n                }\r\n\r\n\r\n            } else if (type === this.myType['Label Convenient']) {\r\n                this.labelPositionType = type;\r\n                this.LabelPosition = () => {\r\n                    const annotatedFeatures = this.geoData.features.filter(feature=>(this.getDescriptionByCountry(feature.properties.NAME)) != undefined);\r\n                    // const totalAnnotations = annotatedFeatures.length;\r\n\r\n                    // 假设每边分配的注解数量大致相等\r\n                    // const annotationsPerSide = Math.ceil(totalAnnotations / 3);\r\n                    // eslint-disable-next-line\r\n                    let leftAnnotationsCount = 0, bottomAnnotationsCount = 0, rightAnnotationsCount = 0;\r\n\r\n                    annotatedFeatures.forEach((feature) => {\r\n                        const countryCenter = this.geoPath.centroid(feature);\r\n                        const annotation = this.getDescriptionByCountry(feature.properties.NAME);\r\n\r\n                        // 特定国家（如\"Austria\"）的连线长度\r\n                        let lineLength = (feature.properties.NAME === \"Greece\" || feature.properties.NAME === \"Turkey\") ? 200 : 300;\r\n                        if (feature.properties.NAME === \"Germany\") lineLength += 100;\r\n\r\n                        // 计算到三边的距离\r\n                        // const distanceToLeft = countryCenter[0];\r\n                        // const distanceToBottom = this.mapHeight - countryCenter[1];\r\n                        // const distanceToRight = this.mapWidth - countryCenter[0];\r\n\r\n                        // 确定注解应放置在哪个边缘\r\n                        let edge = 'right'; // 默认右边\r\n                        // let minDistance = distanceToLeft;\r\n\r\n                        // if (distanceToBottom < minDistance && bottomAnnotationsCount < annotationsPerSide) {\r\n                        //     minDistance = distanceToBottom;\r\n                        //     edge = 'bottom';\r\n                        // }\r\n                        // if (distanceToRight < minDistance && rightAnnotationsCount < annotationsPerSide) {\r\n                        //     edge = 'right';\r\n                        // }\r\n\r\n                        if (feature.properties.NAME=='United Kingdom' || feature.properties.NAME=='France' || feature.properties.NAME=='Sweden') {\r\n                            edge = 'left';\r\n                        } else if (feature.properties.NAME=='Germany' || feature.properties.NAME=='Greece' || feature.properties.NAME=='Turkey') {\r\n                            // minDistance = distanceToBottom;\r\n                            edge = 'bottom';\r\n                        }\r\n\r\n                        // 更新对应边缘的注解计数\r\n                        if (edge === 'left') leftAnnotationsCount++;\r\n                        else if (edge === 'bottom') bottomAnnotationsCount++;\r\n                        else rightAnnotationsCount++;\r\n\r\n                        // 计算线的终点位置\r\n                        let lineEndX = countryCenter[0], lineEndY = countryCenter[1];\r\n                        let textOffsetX = countryCenter[0], textOffsetY = countryCenter[1];\r\n\r\n                        switch (edge) {\r\n                            case 'left':\r\n                                lineEndX -= lineLength;\r\n                                textOffsetX = lineEndX - boxWidth;\r\n                                textOffsetY = countryCenter[1] - boxHeight / 2;\r\n                                break;\r\n                            case 'bottom':\r\n                                lineEndY += lineLength;\r\n                                textOffsetX = countryCenter[0] - boxWidth / 2;\r\n                                textOffsetY = lineEndY;\r\n                                break;\r\n                            case 'right':\r\n                                lineEndX += lineLength;\r\n                                textOffsetX = lineEndX;\r\n                                textOffsetY = countryCenter[1] - boxHeight / 2;\r\n                                break;\r\n                        }\r\n\r\n                        let textLines = [\r\n                            `${feature.properties.NAME}`,\r\n                            `${annotation}`\r\n                        ];\r\n\r\n                        const maxWidth = boxWidth-5-2*marginSpace; // 设置最大宽度阈值\r\n                        let ty = textOffsetY;\r\n\r\n                        textLines.forEach((line, lineIndex) => {\r\n                            let words = line.split(' ');\r\n                            let currentLine = words[0];\r\n\r\n                            for (let i = 1; i < words.length; i++) {\r\n                                let word = words[i];\r\n                                let testLine = currentLine + ' ' + word;\r\n                                let testWidth = this.getTextWidth(testLine, '13px'); // 获取当前行的文本宽度13\r\n\r\n                                if (testWidth > maxWidth) {\r\n                                    this.svg.append('text')\r\n                                        .attr('class', 'annotation-text')\r\n                                        .attr('x', textOffsetX + 5+marginSpace) // 略微缩进\r\n                                        .attr('y', ty + 15 + (lineIndex * 14)) // 根据行数调整位置\r\n                                        .attr('fill', 'black')\r\n                                        .style('font-size', '13px')\r\n                                        .text(currentLine); // 添加当前行的文本\r\n\r\n                                    currentLine = word;\r\n                                    ty += 14; // 调整Y坐标到下一行\r\n                                } else {\r\n                                    currentLine += ' ' + word;\r\n                                }\r\n                            }\r\n                            this.svg.append('text')\r\n                                .attr('class', 'annotation-text')\r\n                                .attr('x', textOffsetX + 5+2*marginSpace) // 略微缩进\r\n                                .attr('y', ty + 15 + (lineIndex * 14)) // 根据行数调整位置\r\n                                .attr('fill', 'black')\r\n                                .style('font-size', '13px')\r\n                                .text(currentLine);\r\n                        });\r\n                        // 绘制注解连线\r\n                        this.svg.append('line')\r\n                            .attr('x1', countryCenter[0])\r\n                            .attr('y1', countryCenter[1])\r\n                            .attr('x2', lineEndX)\r\n                            .attr('y2', lineEndY)\r\n                            .attr('stroke', 'gray')\r\n                            .attr('stroke-width', 1)\r\n                            .attr('class', 'annotation-line');\r\n\r\n                        // 绘制文本框背景\r\n                        this.svg.append('rect')\r\n                            .attr('x', textOffsetX)\r\n                            .attr('y', textOffsetY)\r\n                            .attr('width', boxWidth)\r\n                            .attr('height', ty - textOffsetY+boxHeight/2+4)\r\n                            .attr('fill', this.defaultColor)\r\n                            .attr('stroke', 'none')\r\n                            .attr('class', 'annotation-box');\r\n                        ty = textOffsetY;\r\n                        textLines.forEach((line, lineIndex) => {\r\n                            let words = line.split(' ');\r\n                            let currentLine = words[0];\r\n                            console.log(words);\r\n                            console.log(words.length);\r\n\r\n                            for (let i = 1; i < words.length; i++) {\r\n                                let word = words[i];\r\n                                let testLine = currentLine + ' ' + word;\r\n                                let testWidth = this.getTextWidth(testLine, '13px'); // 获取当前行的文本宽度13\r\n\r\n                                if (testWidth > maxWidth) {\r\n                                    this.svg.append('text')\r\n                                        .attr('class', 'annotation-text')\r\n                                        .attr('x', textOffsetX + 5+marginSpace) // 略微缩进\r\n                                        .attr('y', ty + 15 + (lineIndex * 14)) // 根据行数调整位置\r\n                                        .attr('fill', 'black')\r\n                                        .style('font-size', '13px')\r\n                                        .text(currentLine); // 添加当前行的文本\r\n\r\n                                    currentLine = word;\r\n                                    ty += 14; // 调整Y坐标到下一行\r\n                                } else {\r\n                                    currentLine += ' ' + word;\r\n                                }\r\n                            }\r\n                            if(lineIndex)\r\n                                this.svg.append('text')\r\n                                    .attr('class', 'annotation-text')\r\n                                    .attr('x', textOffsetX + 5+2*marginSpace) // 略微缩进\r\n                                    .attr('y', ty + 15 + (lineIndex * 14)) // 根据行数调整位置\r\n                                    .attr('fill', 'black')\r\n                                    .style('font-size', '13px')\r\n                                    .text(currentLine);\r\n                            else\r\n                                this.svg.append('text')\r\n                                        .attr('class', 'annotation-text')\r\n                                        .attr('x', textOffsetX + 5 + marginSpace) // 略微缩进\r\n                                        .attr('y', ty + 15 + (lineIndex * 14)) // 根据行数调整位置\r\n                                        .attr('fill', 'black')\r\n                                        .style('font-size', '13px')\r\n                                        .style('font-weight', 'bold')\r\n                                        .text(currentLine);\r\n                        });\r\n                    });\r\n                }\r\n\r\n\r\n            } else if (type === this.myType['Label Aligned']) {\r\n                this.labelPositionType = type;\r\n\r\n                this.LabelPosition = () => {\r\n                    const sortedFeatures = this.geoData.features\r\n                        .filter(feature=>(this.getDescriptionByCountry(feature.properties.NAME)) != undefined)\r\n                        .sort((a, b) => {\r\n                            const centerA = this.geoPath.centroid(a);\r\n                            const centerB = this.geoPath.centroid(b);\r\n                            return centerA[0] - centerB[0];\r\n                        });\r\n\r\n                    // 计算每个注解的起始x坐标\r\n                    const totalAnnotationsWidth = sortedFeatures.length * (boxWidth + boxSpacing) - boxSpacing; // 总宽度减去最后一个间距\r\n                    const startX = (this.mapWidth - totalAnnotationsWidth) / 2; // 为了居中对齐\r\n\r\n                    sortedFeatures.forEach((feature, index) => {\r\n                        const annotation = this.getDescriptionByCountry(feature.properties.NAME);\r\n                        const countryCenter = this.geoPath.centroid(feature);\r\n                        const annotationX = startX + index * (boxWidth + boxSpacing);\r\n                        const annotationY = this.mapHeight + 50; // 地图下方50px\r\n\r\n                        let textLines = [\r\n                            `${feature.properties.NAME}`,\r\n                            `${annotation}`\r\n                        ];\r\n\r\n                        const maxWidth = boxWidth-5-4*marginSpace; // 设置最大宽度阈值\r\n                        let ty = annotationY;\r\n\r\n                        textLines.forEach((line, lineIndex) => {\r\n                            let words = line.split(' ');\r\n                            let currentLine = words[0];\r\n                            console.log(words);\r\n                            console.log(words.length);\r\n                            for (let i = 1; i < words.length; i++) {\r\n                                let word = words[i];\r\n                                let testLine = currentLine + ' ' + word;\r\n                                let testWidth = this.getTextWidth(testLine, '13px'); // 获取当前行的文本宽度\r\n\r\n                                if (testWidth > maxWidth) {\r\n                                    this.svg.append('text')\r\n                                        .attr('class', 'annotation-text')\r\n                                        .attr('x', annotationX + 5) // 略微缩进\r\n                                        .attr('y', ty + 15 + (lineIndex * 14)) // 根据行数调整位置\r\n                                        .attr('fill', 'black')\r\n                                        .style('font-size', '13px')\r\n                                        .text(currentLine); // 添加当前行的文本\r\n\r\n                                    currentLine = word;\r\n                                    ty += 14; // 调整Y坐标到下一行\r\n                                } else {\r\n                                    currentLine += ' ' + word;\r\n                                }\r\n                            }\r\n                        });\r\n\r\n                        // 绘制注解框\r\n                        this.svg.append('rect')\r\n                            .attr('class', 'annotation-box')\r\n                            .attr('x', annotationX)\r\n                            .attr('y', annotationY)\r\n                            .attr('width', boxWidth)\r\n                            .attr('height', 120)\r\n                            .attr('fill', this.defaultColor)\r\n                            .attr('stroke', 'none');\r\n\r\n                        ty = annotationY;\r\n                        textLines.forEach((line, lineIndex) => {\r\n                            let words = line.split(' ');\r\n                            let currentLine = words[0];\r\n\r\n                            for (let i = 1; i < words.length; i++) {\r\n                                let word = words[i];\r\n                                let testLine = currentLine + ' ' + word;\r\n                                let testWidth = this.getTextWidth(testLine, '13px'); // 获取当前行的文本宽度\r\n\r\n                                if (testWidth > maxWidth) {\r\n                                    this.svg.append('text')\r\n                                        .attr('class', 'annotation-text')\r\n                                        .attr('x', annotationX + 5 + 2*marginSpace) // 略微缩进\r\n                                        .attr('y', ty + 15 + (lineIndex * 14)) // 根据行数调整位置\r\n                                        .attr('fill', 'black')\r\n                                        .style('font-size', '13px')\r\n                                        .text(currentLine); // 添加当前行的文本\r\n\r\n                                    currentLine = word;\r\n                                    ty += 14; // 调整Y坐标到下一行\r\n                                } else {\r\n                                    currentLine += ' ' + word;\r\n                                }\r\n                            }\r\n                            if(lineIndex)\r\n                                this.svg.append('text')\r\n                                    .attr('class', 'annotation-text')\r\n                                    .attr('x', annotationX + 5+2*marginSpace) // 略微缩进\r\n                                    .attr('y', ty + 15 + (lineIndex * 14)) // 根据行数调整位置\r\n                                    .attr('fill', 'black')\r\n                                    .style('font-size', '13px')\r\n                                    .text(currentLine);\r\n                            else\r\n                                this.svg.append('text')\r\n                                    .attr('class', 'annotation-text')\r\n                                    .attr('x', annotationX + 5+2*marginSpace) // 略微缩进\r\n                                    .attr('y', ty + 15 + (lineIndex * 14)) // 根据行数调整位置\r\n                                    .attr('fill', 'black')\r\n                                    .style('font-size', '13px')\r\n                                    .style('font-weight','bold')\r\n                                    .text(currentLine);\r\n                        });\r\n\r\n                        // 绘制注解连线\r\n                        this.svg.append('path')\r\n                            .attr('d', `M${countryCenter[0]} ${countryCenter[1]} L${annotationX + boxWidth / 2} ${countryCenter[1]} L${annotationX + boxWidth / 2} ${annotationY}`)\r\n                            .attr('stroke', 'gray')\r\n                            .attr('fill', 'none')\r\n                            .attr('class', 'annotation-line');\r\n                    });\r\n                }\r\n                // 过滤并排序需要注解的国家特征，基于它们的中心x坐标\r\n\r\n            } else if (type === this.myType['Label Ordered']) {\r\n                this.labelPositionType = type;\r\n\r\n                this.LabelPosition = () => {\r\n                    const annotatedFeatures = this.geoData.features.filter(feature=>(this.getDescriptionByCountry(feature.properties.NAME)) != undefined);\r\n                    const circleCenterX = 500-boxWidth/2; // 圆心的x坐标\r\n                    const circleCenterY = this.mapHeight - 200- boxHeight; // 圆心的y坐标\r\n                    const radius = Math.min(this.mapWidth, this.mapHeight) / 2.5; // 半径\r\n                    const angleIncrement = (2 * Math.PI) / annotatedFeatures.length; // 每个注解之间的角度增量\r\n                    let delta = 0;\r\n                    const gamma = 0;\r\n                    const annotationX = [];//\r\n                    const annotationY = [];\r\n                    for (let i = 0, angle = 0; i < annotatedFeatures.length; i++, angle += angleIncrement) {\r\n                        annotationX.push(circleCenterX + radius * Math.cos(angle));\r\n                        annotationY.push(circleCenterY + radius * Math.sin(angle));\r\n                    }\r\n\r\n                    annotatedFeatures.forEach((feature, index) => {\r\n                        console.log(feature.properties.NAME);\r\n                        console.log(index);\r\n                        delta += gamma;\r\n                        const annotation = this.getDescriptionByCountry(feature.properties.NAME);\r\n                        \r\n                        const countryCenter = this.geoPath.centroid(feature);\r\n                        let textLines = [\r\n                            `${feature.properties.NAME}`,\r\n                            `${annotation}`\r\n                        ];\r\n\r\n                        const maxWidth = boxWidth-5-4*marginSpace; // 设置最大宽度阈值\r\n                        let ty = annotationY[index];\r\n\r\n                        textLines.forEach((line, lineIndex) => {\r\n                            let words = line.split(' ');\r\n                            let currentLine = words[0];\r\n                            console.log(words);\r\n                            console.log(words.length);\r\n                            for (let i = 1; i < words.length; i++) {\r\n                                let word = words[i];\r\n                                let testLine = currentLine + ' ' + word;\r\n                                let testWidth = this.getTextWidth(testLine, '13px'); // 获取当前行的文本宽度\r\n\r\n                                if (testWidth > maxWidth) {\r\n                                    this.svg.append('text')\r\n                                        .attr('class', 'annotation-text')\r\n                                        .attr('x', annotationX[index] - boxWidth / 2 + delta + 5) // 略微缩进\r\n                                        .attr('y', ty + 15 + (lineIndex * 14) - boxHeight / 2 + delta) // 根据行数调整位置\r\n                                        .attr('fill', 'black')\r\n                                        .style('font-size', '13px')\r\n                                        .text(currentLine); // 添加当前行的文本\r\n\r\n                                    currentLine = word;\r\n                                    ty += 14; // 调整Y坐标到下一行\r\n                                } else {\r\n                                    currentLine += ' ' + word;\r\n                                }\r\n                            }\r\n                        });\r\n\r\n                        // 绘制注解框\r\n                        this.svg.append('rect')\r\n                            .attr('class', 'annotation-box')\r\n                            .attr('x', annotationX[index] - boxWidth / 2 + delta) // 中心对齐调整\r\n                            .attr('y', annotationY[index] - boxHeight / 2 + delta) // 中心对齐调整\r\n                            .attr('width', boxWidth)\r\n                            .attr('height', ty-(annotationY[index] - boxHeight / 2 + delta)+4)\r\n                            .attr('fill', this.defaultColor)\r\n                            .attr('stroke', 'none');\r\n\r\n                        ty = annotationY[index];\r\n                        textLines.forEach((line, lineIndex) => {\r\n                            let words = line.split(' ');\r\n                            let currentLine = words[0];\r\n\r\n                            for (let i = 1; i < words.length; i++) {\r\n                                let word = words[i];\r\n                                let testLine = currentLine + ' ' + word;\r\n                                let testWidth = this.getTextWidth(testLine, '13px'); // 获取当前行的文本宽度\r\n\r\n                                if (testWidth > maxWidth) {\r\n                                    this.svg.append('text')\r\n                                        .attr('class', 'annotation-text')\r\n                                        .attr('x', annotationX[index] - boxWidth / 2 + delta + 5) // 略微缩进\r\n                                        .attr('y', ty + 15 + (lineIndex * 14) - boxHeight / 2 + delta) // 根据行数调整位置\r\n                                        .attr('fill', 'black')\r\n                                        .style('font-size', '13px')\r\n                                        .text(currentLine); // 添加当前行的文本\r\n\r\n                                    currentLine = word;\r\n                                    ty += 14; // 调整Y坐标到下一行\r\n                                } else {\r\n                                    currentLine += ' ' + word;\r\n                                }\r\n                            }\r\n                            if(lineIndex)\r\n                                this.svg.append('text')\r\n                                    .attr('class', 'annotation-text')\r\n                                    .attr('x', annotationX[index] - boxWidth / 2 + delta + 5) // 略微缩进\r\n                                    .attr('y', ty + 15 + (lineIndex * 14) - boxHeight / 2 + delta) // 根据行数调整位置\r\n                                    .attr('fill', 'black')\r\n                                    .style('font-size', '13px')\r\n                                    .text(currentLine);\r\n                            else\r\n                                this.svg.append('text')\r\n                                    .attr('class', 'annotation-text')\r\n                                    .attr('x', annotationX[index] - boxWidth / 2 + delta + 5) // 略微缩进\r\n                                    .attr('y', ty + 15 + (lineIndex * 14) - boxHeight / 2 + delta) // 根据行数调整位置\r\n                                    .attr('fill', 'black')\r\n                                    .style('font-size', '13px')\r\n                                    .style('font-weight', 'bold')\r\n                                    .text(currentLine);\r\n                        });\r\n\r\n                        // 更改连线到注解的最近的边缘中心点\r\n                        const lineEndX = annotationX[index]+delta+boxWidth/2;\r\n                        const lineEndY = feature.properties.NAME=='Greece' ? annotationY[index] - boxHeight / 2 + delta + (ty-(annotationY[index] - boxHeight / 2 + delta)) / 2 + 8 : annotationY[index] - boxHeight / 2 + delta + (ty-(annotationY[index] - boxHeight / 2 + delta)) / 2;\r\n\r\n                        // this.svg.append('path')\r\n                        //     .attr('d', `M${countryCenter[0]+delta} ${countryCenter[1]+delta} L${lineEndX} ${countryCenter[1]+delta} L${lineEndX} ${lineEndY}`)\r\n                        //     .attr('stroke', 'gray')\r\n                        //     .attr('fill', 'none')\r\n                        //     .attr('class', 'annotation-line');\r\n                        this.svg.append('path')\r\n                            .attr('d', `M${countryCenter[0]+delta} ${countryCenter[1]+delta} L${countryCenter[0]+delta} ${lineEndY} L${lineEndX} ${lineEndY}`)\r\n                            .attr('stroke', 'gray')\r\n                            .attr('fill', 'none')\r\n                            .attr('class', 'annotation-line');\r\n                    });\r\n                }\r\n\r\n            } else if (type === this.myType['Label Remove']) {\r\n                this.labelPositionType = type;\r\n                this.LabelPosition = () => {\r\n                    console.log(\"All Label Removed!\");\r\n                }\r\n            }\r\n            this.drawSvg();\r\n\r\n        },\r\n\r\n        setEncodingChannel(type) {\r\n            console.log(\"Encoding Channel:\", type);\r\n            //d3.select(\".\" + this.value + \"-legend\").selectAll(\"*\").remove();\r\n            if (this.isNumerical) {\r\n                //Encoding Color (Luminance)'\r\n                if (type === this.myType['Color (Luminance)']) {\r\n                    d3.select(\".\" + this.value + \"-legend\").selectAll(\"*\").remove();\r\n                    this.preColortype = type;\r\n                    this.encodingChannelType = type;\r\n                    const colorFunction = (scale) => {\r\n                        const transformFunction = (input) => Math.pow(input, 0.25);\r\n                        // const transformFunction = (input) => input\r\n\r\n                        const colorScale = d3.scaleSequential(d3.interpolateRgb(d3.rgb(220, 120, 130), d3.rgb(255, 255, 255)))\r\n                            .domain([transformFunction(this.mostPopulation), 0]);\r\n                        return scale == -1 ? this.defaultColor : colorScale(transformFunction(scale));\r\n                    }\r\n                    this.colorFunctionL = colorFunction;\r\n                    // 重写encodingChannel函数\r\n                    if (this.ifDoubleEncoding == false) {\r\n                        this.encodingChannel = () => {\r\n                            // 修改颜色映射的方法\r\n                            this.svg.selectAll('path')\r\n                                .attr('fill', d => colorFunction(this.getPopulation(d)));\r\n\r\n                            this.svg.selectAll('circle')\r\n                                .attr('fill', d => colorFunction(this.getPopulation(d)));\r\n                            this.highLights[this.pointer2highlight].forEach(highLight => {\r\n                                highLight();\r\n                            });\r\n                        }\r\n                        this.drawColorLuminanceLegend();\r\n                    } else {\r\n                        this.preEncoding = type;\r\n                        this.ifSizeColor = true;\r\n                        this.encodingChannel = () => {\r\n                            this.svg.selectAll('path').attr(\"fill\", this.defaultColor);\r\n                            d3.select(\".\" + this.value + \"-legend\").selectAll(\"*\").remove();\r\n                        }\r\n                        this.svg.selectAll('path')\r\n                            .attr('fill', `${this.defaultColor}`);\r\n                        this.svg.selectAll('circle')\r\n                            .attr('fill', `${this.defaultColor}`);\r\n                    }\r\n                }\r\n\r\n                //Encoding Color (Hue)'\r\n                else if (type === this.myType['Color (Hue)']) {\r\n                    d3.select(\".\" + this.value + \"-legend\").selectAll(\"*\").remove();\r\n                    this.preColortype = type;\r\n                    this.encodingChannelType = type;\r\n                    const colorFunction = (population) => {\r\n                        if (population < 0) {\r\n                            return this.defaultColor;\r\n                        } else if (population >= 0 && population < 5000000) {\r\n                            return 'rgb(142, 207, 201)'; // 人口数量小于5000000\r\n                        } else if (population >= 5000000 && population < 10000000) {\r\n                            return 'rgb(255, 190, 122)'; // 人口数量在5000000-10000000之间\r\n                        } else if (population >= 10000000 && population < 50000000) {\r\n                            return 'rgb(250, 127, 111)'; // 人口数量在10000000-50000000之间\r\n                        } else if (population >= 50000000 && population < 100000000) {\r\n                            return 'rgb(130, 176, 210)'; // 人口数量在50000000-100000000之间\r\n                        } else {\r\n                            return 'rgb(190, 184, 220)'; // 人口数量大于100000000\r\n                        }\r\n                    };\r\n                    // 重写encodingChannel函数\r\n                    if (this.ifDoubleEncoding == false) {\r\n                        this.encodingChannel = () => {\r\n                            // 修改颜色映射的方法\r\n                            this.svg.selectAll('path')\r\n                                .attr('fill', d => colorFunction(this.getPopulation(d)));\r\n\r\n                            this.svg.selectAll('circle')\r\n                                .attr('fill', d => colorFunction(this.getPopulation(d)));\r\n                            this.highLights[this.pointer2highlight].forEach(highLight => {\r\n                                highLight();\r\n                            });\r\n                        };\r\n                        this.drawColorHueLegend();\r\n                    } else {\r\n                        this.preEncoding = type;\r\n                        this.ifSizeColor = true;\r\n                        this.colorFunctionL = colorFunction;\r\n                        this.encodingChannel = () => {\r\n                            this.svg.selectAll('path').attr(\"fill\", this.defaultColor);\r\n                            d3.select(\".\" + this.value + \"-legend\").selectAll(\"*\").remove();\r\n                        }\r\n                        this.svg.selectAll('path')\r\n                            .attr('fill', this.defaultColor);\r\n                        this.svg.selectAll('circle')\r\n                            .attr('fill', this.defaultColor);\r\n                    }\r\n                }\r\n                //Encoding 3D Length\r\n                else if (type === this.myType['3D Length']) {\r\n                    d3.select(\".\" + this.value + \"-legend\").selectAll(\"*\").remove();\r\n                    this.encodingChannelType = type;\r\n\r\n                    this.encodingChannel = () => {\r\n                        this.svg.selectAll('path').attr(\"fill\", this.defaultColor);\r\n\r\n                        // 在地图上绘制模拟的3D长方体\r\n                        const baseHeight = 3; // 长方体基础高度，所有长方体至少有这个高度\r\n                        const populationPerHeight = 800000; // 每增加这么多人口，长方体的高度增加一单位\r\n                        const cuboidWidth = 20; // 长方体的宽度\r\n                        const cuboidLength = 30; // 长方体的长度（在SVG中模拟的“深度”）\r\n                        const sideOpacity = 0.5; // 侧面的不透明度\r\n\r\n                        this.geoData.features.forEach(feature => {\r\n                            const center = this.geoPath.centroid(feature);\r\n                            const population = this.getPopulation(feature);\r\n                            if (population >= 1000000) { // 人口大于等于1000000时绘制长方体\r\n                                const height = baseHeight + (population / populationPerHeight); // 长方体的总高度\r\n\r\n                                if (this.ifDoubleEncoding == false) {\r\n                                    // 绘制长方体的“前面”\r\n                                    this.svg.append('rect')\r\n                                        .attr('x', center[0] - cuboidWidth / 2)\r\n                                        .attr('y', center[1] - height)\r\n                                        .attr('width', cuboidWidth)\r\n                                        .attr('height', height)\r\n                                        .attr('fill', 'rgba(230, 158, 165, 0.8)'); // 修改前面的颜色\r\n\r\n                                    // 绘制长方体的“顶面”\r\n                                    this.svg.append('polygon')\r\n                                        .attr('points', `${center[0] - cuboidWidth / 2},${center[1] - height} ${center[0] + cuboidWidth / 2},${center[1] - height} ${center[0] + cuboidWidth / 2 - cuboidLength / 4},${center[1] - height - cuboidLength / 4} ${center[0] - cuboidWidth / 2 - cuboidLength / 4},${center[1] - height - cuboidLength / 4}`)\r\n                                        .attr('fill', 'rgba(230, 158, 165, 0.6)');\r\n\r\n                                    // 绘制长方体的“左侧面”\r\n                                    this.svg.append('polygon')\r\n                                        .attr('points', `${center[0] - cuboidWidth / 2},${center[1]} ${center[0] - cuboidWidth / 2},${center[1] - height} ${center[0] - cuboidWidth / 2 - cuboidLength / 4},${center[1] - height - cuboidLength / 4} ${center[0] - cuboidWidth / 2 - cuboidLength / 4},${center[1] - cuboidLength / 4}`)\r\n                                        .attr('fill', `rgba(200, 60, 60, ${sideOpacity})`); // 修改左侧面的颜色\r\n                                } else {\r\n                                    // 绘制长方体的“前面”                     \r\n                                    this.svg.append('rect')\r\n                                        .attr('x', center[0] - cuboidWidth / 2)\r\n                                        .attr('y', center[1] - height)\r\n                                        .attr('width', cuboidWidth)\r\n                                        .attr('height', height)\r\n                                        .attr('fill', this.colorFunctionL(population))\r\n                                        .attr('opacity', '0.8'); // 修改前面的颜色\r\n\r\n                                    // 绘制长方体的“顶面”\r\n                                    this.svg.append('polygon')\r\n                                        .attr('points', `${center[0] - cuboidWidth / 2},${center[1] - height} ${center[0] + cuboidWidth / 2},${center[1] - height} ${center[0] + cuboidWidth / 2 - cuboidLength / 4},${center[1] - height - cuboidLength / 4} ${center[0] - cuboidWidth / 2 - cuboidLength / 4},${center[1] - height - cuboidLength / 4}`)\r\n                                        .attr('fill', this.colorFunctionL(population))\r\n                                        .attr('opacity', '0.6');\r\n\r\n                                    // 绘制长方体的“左侧面”\r\n                                    this.svg.append('polygon')\r\n                                        .attr('points', `${center[0] - cuboidWidth / 2},${center[1]} ${center[0] - cuboidWidth / 2},${center[1] - height} ${center[0] - cuboidWidth / 2 - cuboidLength / 4},${center[1] - height - cuboidLength / 4} ${center[0] - cuboidWidth / 2 - cuboidLength / 4},${center[1] - cuboidLength / 4}`)\r\n                                        .attr('fill', this.colorFunctionL(population))\r\n                                        .attr('opacity', '0.9'); // 修改左侧面的颜色\r\n                                }\r\n                            }\r\n                        });\r\n                        if (this.ifDoubleEncoding == false) {\r\n                            //draw legend\r\n                            for (let i = 0, delta = 20, px = 50; i < 4; i++) {\r\n                                let t = 1000000 * Math.pow(5, i), x = px;\r\n                                let v = t / 800000;\r\n                                let y = 330 - v;\r\n                                this.svg.append('rect')\r\n                                    .attr('x', px)\r\n                                    .attr('y', 330 - v)\r\n                                    .attr('width', 20)\r\n                                    .attr('height', v)\r\n                                    .attr('fill', 'rgba(230, 158, 165, 0.8)');\r\n                                this.svg.append('polygon')\r\n                                    .attr('points', `${x},${y} ${x - 8},${y - 8} ${x - 8},${y + v - 8} ${x},${y + v}`)\r\n                                    .attr('fill', 'rgba(200, 60, 60, 0.5)');\r\n                                this.svg.append('polygon')\r\n                                    .attr('points', `${x},${y} ${x - 8},${y - 8} ${x + 12},${y - 8} ${x + 20},${y}`)\r\n                                    .attr('fill', 'rgba(230, 158, 165, 0.6)');\r\n\r\n                                const label = t < 1000 ? Math.floor(t) :\r\n                                    t < 1000000 ? Math.floor(t / 1000) + \"k\" :\r\n                                        Math.floor(t / 1000000) + \"m\";\r\n                                this.svg.append('text')\r\n                                    .attr('x', px - 5)\r\n                                    .attr('y', 315 - v)\r\n                                    .text(label);\r\n                                px += 2 * delta;\r\n                            }\r\n                        } else {\r\n                            //draw legend\r\n                            for (let i = 0, delta = 20, px = 50; i < 4; i++) {\r\n                                let t = 1000000 * Math.pow(5, i), x = px;\r\n                                let v = t / 800000;\r\n                                let y = 330 - v;\r\n                                this.svg.append('rect')\r\n                                    .attr('x', px)\r\n                                    .attr('y', 330 - v)\r\n                                    .attr('width', 20)\r\n                                    .attr('height', v)\r\n                                    .attr('fill', this.colorFunctionL(t))\r\n                                    .attr('opacity', '0.8');\r\n                                this.svg.append('polygon')\r\n                                    .attr('points', `${x},${y} ${x - 8},${y - 8} ${x - 8},${y + v - 8} ${x},${y + v}`)\r\n                                    .attr('fill', this.colorFunctionL(t))\r\n                                    .attr('opacity', '0.9');\r\n                                this.svg.append('polygon')\r\n                                    .attr('points', `${x},${y} ${x - 8},${y - 8} ${x + 12},${y - 8} ${x + 20},${y}`)\r\n                                    .attr('fill', this.colorFunctionL(t))\r\n                                    .attr('opacity', '0.6');\r\n\r\n                                const label = t < 1000 ? Math.floor(t) :\r\n                                    t < 1000000 ? Math.floor(t / 1000) + \"k\" :\r\n                                        Math.floor(t / 1000000) + \"m\";\r\n                                this.svg.append('text')\r\n                                    .attr('x', px - 5)\r\n                                    .attr('y', 315 - v)\r\n                                    .text(label);\r\n                                px += 2 * delta;\r\n                            }\r\n                            // this.doubleEncoding();\r\n                        }\r\n                    }\r\n                } else if (type === this.myType['2D Length']) {\r\n                    d3.select(\".\" + this.value + \"-legend\").selectAll(\"*\").remove();\r\n                    this.encodingChannelType = type;\r\n\r\n                    this.encodingChannel = () => {\r\n                        this.svg.selectAll('path').attr(\"fill\", this.defaultColor);\r\n\r\n                        // draw bar chart\r\n                        const baseHeight = 3; // 长方体基础高度，所有长方体至少有这个高度\r\n                        const populationPerHeight = 800000; // 每增加这么多人口，长方体的高度增加一单位\r\n                        const cuboidWidth = 20; // 长方体的宽度\r\n\r\n                        this.geoData.features.forEach(feature => {\r\n                            const center = this.geoPath.centroid(feature);\r\n                            const population = this.getPopulation(feature);\r\n                            if (population >= 1000000) { // 人口大于等于1000000时绘制长方体\r\n                                const height = baseHeight + (population / populationPerHeight); // 长方体的总高度\r\n\r\n                                if (this.ifDoubleEncoding == false) {\r\n                                    this.svg.append('rect')\r\n                                        .attr('x', center[0] - cuboidWidth / 2)\r\n                                        .attr('y', center[1] - height)\r\n                                        .attr('width', cuboidWidth)\r\n                                        .attr('height', height)\r\n                                        .attr('fill', 'rgba(230, 158, 165, 0.7)');\r\n                                } else {\r\n                                    this.svg.append('rect')\r\n                                        .attr('x', center[0] - cuboidWidth / 2)\r\n                                        .attr('y', center[1] - height)\r\n                                        .attr('width', cuboidWidth)\r\n                                        .attr('height', height)\r\n                                        .attr('fill', this.colorFunctionL(population))\r\n                                        .attr('opacity', '0.7');\r\n                                }\r\n                            }\r\n                        });\r\n                        if (this.ifDoubleEncoding == false) {\r\n                            //draw legend\r\n                            for (let i = 0, delta = 20, px = 50; i < 4; i++) {\r\n                                let t = 1000000 * Math.pow(5, i);\r\n                                let v = t / 800000;\r\n                                this.svg.append('rect')\r\n                                    .attr('x', px)\r\n                                    .attr('y', 330 - v)\r\n                                    .attr('width', 20)\r\n                                    .attr('height', v)\r\n                                    .attr('fill', 'rgba(230, 158, 165, 0.7)');\r\n                                const label = t < 1000 ? Math.floor(t) :\r\n                                    t < 1000000 ? Math.floor(t / 1000) + \"k\" :\r\n                                        Math.floor(t / 1000000) + \"m\";\r\n                                this.svg.append('text')\r\n                                    .attr('x', px)\r\n                                    .attr('y', 320 - v)\r\n                                    .text(label);\r\n                                px += 2 * delta;\r\n                            }\r\n                        } else {\r\n                            for (let i = 0, delta = 20, px = 50; i < 4; i++) {\r\n                                let t = 1000000 * Math.pow(5, i);\r\n                                let v = t / 800000;\r\n                                this.svg.append('rect')\r\n                                    .attr('x', px)\r\n                                    .attr('y', 330 - v)\r\n                                    .attr('width', 20)\r\n                                    .attr('height', v)\r\n                                    .attr('fill', this.colorFunctionL(t))\r\n                                    .attr('opacity', '0.7');\r\n                                const label = t < 1000 ? Math.floor(t) :\r\n                                    t < 1000000 ? Math.floor(t / 1000) + \"k\" :\r\n                                        Math.floor(t / 1000000) + \"m\";\r\n                                this.svg.append('text')\r\n                                    .attr('x', px)\r\n                                    .attr('y', 320 - v)\r\n                                    .text(label);\r\n                                px += 2 * delta;\r\n                            }\r\n                            // this.doubleEncoding();\r\n                        }\r\n                    }\r\n                }\r\n\r\n\r\n                // Encoding Size\r\n                else if (type === this.myType['Size']) {\r\n                    d3.select(\".\" + this.value + \"-legend\").selectAll(\"*\").remove();\r\n                    this.encodingChannelType = type;\r\n\r\n                    this.encodingChannel = () => {\r\n                        this.svg.selectAll('path').attr(\"fill\", this.defaultColor);\r\n\r\n                        // 在地图上绘制人口方块\r\n                        // this.drawPopulationSquares();\r\n                        const populationExtent = d3.extent(this.geoData.features, d => this.getPopulation(d));\r\n                        const sizeScale = d3.scaleSqrt()\r\n                            .domain(populationExtent)\r\n                            .range([5, 50]); // 方块大小的范围\r\n                        let flag = false;\r\n\r\n                        // 直接在现有的SVG上绘制方块，不清除之前的内容\r\n                        this.geoData.features.forEach(feature => {\r\n                            const [x, y] = this.geoPath.centroid(feature);\r\n                            const population = this.getPopulation(feature);\r\n                            if (population >= 1000000) { // 人口大于等于1000000时绘制方块\r\n                                if (this.ifDoubleEncoding == false) {\r\n                                    this.svg.append('rect')\r\n                                        .attr('x', x - sizeScale(population) / 2)\r\n                                        .attr('y', y - sizeScale(population) / 2)\r\n                                        .attr('width', sizeScale(population))\r\n                                        .attr('height', sizeScale(population))\r\n                                        .attr('fill', 'rgba(230, 158, 165, 0.7)');\r\n                                } else {\r\n                                    if (this.ifSizeColor == true) {\r\n                                        this.svg.append('rect')\r\n                                            .attr('x', x - sizeScale(population) / 2)\r\n                                            .attr('y', y - sizeScale(population) / 2)\r\n                                            .attr('width', sizeScale(population))\r\n                                            .attr('height', sizeScale(population))\r\n                                            .attr('fill', this.colorFunctionL(population))\r\n                                            .attr('opacity', '0.7');\r\n                                        flag = true;\r\n                                    } else {\r\n                                        this.sizeFunctionL = sizeScale;\r\n                                    }\r\n                                        \r\n                                }\r\n\r\n                            }\r\n                        });\r\n                        if (this.ifDoubleEncoding == false) {\r\n                            //draw size legend\r\n                            for (let i = 0, delta = 20, py = 100; i < 4; i++) {\r\n                                let t = 1000000 * Math.pow(5, i)\r\n                                let v = sizeScale(t);\r\n                                this.svg.append('rect')\r\n                                    .attr('x', 50)\r\n                                    .attr('y', py)\r\n                                    .attr('width', v)\r\n                                    .attr('height', v)\r\n                                    .attr('fill', 'rgba(230, 158, 165, 0.7)');\r\n\r\n                                const label = t < 1000 ? Math.floor(t) :\r\n                                    t < 1000000 ? Math.floor(t / 1000) + \"k\" :\r\n                                        Math.floor(t / 1000000) + \"m\";\r\n                                this.svg.append('text')\r\n                                    .attr('x', 65 + v)\r\n                                    .attr('y', py + v)\r\n                                    .text(label);\r\n\r\n                                py += v + delta;\r\n                            }\r\n                        } else if (this.ifSizeColor == true && flag == true){\r\n                            for (let i = 0, delta = 20, py = 100; i < 4; i++) {\r\n                                let t = 1000000 * Math.pow(5, i)\r\n                                let v = sizeScale(t);\r\n                                this.svg.append('rect')\r\n                                    .attr('x', 50)\r\n                                    .attr('y', py)\r\n                                    .attr('width', v)\r\n                                    .attr('height', v)\r\n                                    .attr('fill', this.colorFunctionL(t))\r\n                                    .attr('opacity', '0.7');\r\n\r\n                                const label = t < 1000 ? Math.floor(t) :\r\n                                    t < 1000000 ? Math.floor(t / 1000) + \"k\" :\r\n                                        Math.floor(t / 1000000) + \"m\";\r\n                                this.svg.append('text')\r\n                                    .attr('x', 65 + v)\r\n                                    .attr('y', py + v)\r\n                                    .text(label);\r\n\r\n                                py += v + delta;\r\n                            }\r\n                            this.ifSizeColor = false;\r\n                            // this.doubleEncoding();\r\n                        }\r\n                    }\r\n                }\r\n\r\n                //Encoding Quantity\r\n                else if (type === this.myType['Quantity']) {\r\n                    this.encodingChannelType = type;\r\n\r\n                    this.encodingChannel = () => {\r\n                        this.svg.selectAll('path').attr(\"fill\", this.defaultColor);\r\n\r\n                        // 在地图上叠加人口图标\r\n                        const iconWidth = 10; // 图标的宽度\r\n                        // const iconHeight = 25; // 图标的高度\r\n                        const iconGap = 3; // 调整图标间的间隔\r\n                        // const scaleX = 0.4;\r\n                        // const scaleY = 0.4;\r\n\r\n                        // 直接在现有的SVG上绘制图标，不清除之前的内容\r\n                        this.geoData.features.forEach(feature => {\r\n                            const center = this.geoPath.centroid(feature);\r\n                            const population = this.getPopulation(feature);\r\n\r\n                            // 只有当人口大于等于1000000时才绘制图标\r\n                            if (population >= 1000000) {\r\n                                const totalIcons = Math.ceil(population / 8000000); // 总图标数\r\n\r\n                                for (let i = 0; i < totalIcons; i++) {\r\n                                    // 计算图标的位置\r\n                                    // 将图标排列成一行显示5个图标的形式\r\n                                    const x = center[0] - ((iconWidth + iconGap) * 5 / 2) + ((i % 5) * (iconWidth + iconGap));\r\n                                    const y = center[1] + (Math.floor(i / 5) * (iconWidth + iconGap)) - 10;\r\n                                    const x1 = x + 6.5;\r\n                                    const y1 = y - 3.5;\r\n                                    // 添加图标\r\n                                    if (this.ifDoubleEncoding == false) {\r\n                                        // this.svg.append('image')\r\n                                        // .attr('xlink:href', require('../assets/PersonIcon.svg')) // 图标的路径\r\n                                        // .attr('x', x)\r\n                                        // .attr('y', y)\r\n                                        // .attr('width', iconWidth)\r\n                                        // .attr('height', iconHeight)\r\n                                        // .attr('opcacity', 0.7);\r\n                                        // var g = this.svg.append('g');\r\n                                        // g.append('path')\r\n                                        //     .attr('d', \"M1 14.0338C1 10.5338 1 7.5338 4.5 4.0338C7.3 1.2338 12 0.867135 14 1.0338L19.5 1.03381C21.5 1.03381 26.2 1.6338 29 4.0338C31.8 6.4338 32.1667 11.7005 32 14.0338V24.0338C32 26.8338 28.3333 28.8671 26.5 29.5338L24.5 42.0338C24.5 43.2338 23.1667 44.2005 22.5 44.5338H10.5C9.7 44.5338 9.16667 42.8671 9 42.0338L7 29.5338C4.2 29.9338 2.16667 26.0338 1.5 24.0338C1.33333 21.8671 1 16.8338 1 14.0338Z\")\r\n                                        //     .attr('transform', 'scale(' + scaleX + ',' + scaleY + ')')\r\n                                        //     .attr('fill', 'rgba(230, 158, 165, 0.7)')\r\n                                        //     .attr('stroke', 'none')\r\n                                        //     .attr('stroke-width', 3);\r\n                                        this.svg.append('rect')\r\n                                            .attr('x', x1)\r\n                                            .attr('y', y1)\r\n                                            .attr('width', iconWidth)\r\n                                            .attr('height', iconWidth)\r\n                                            .attr('fill', 'rgba(230, 158, 165, 0.7)');\r\n                                        // g.attr('transform', 'translate(' + x + ',' + y + ')')\r\n                                        //     .attr('transform', 'scale(' + scaleX + ',' + scaleY + ')')\r\n                                        //     .attr('fill', 'rgba(230, 158, 165, 0.7)')\r\n                                        //     .attr('stroke', 'none')\r\n                                        //     .attr('stroke-width', 3);\r\n                                        // g.attr('transform', 'translate(' + x + ',' + y + ')');\r\n                                    } else {\r\n                                        // var gg = this.svg.append('g');\r\n                                        // gg.append('path')\r\n                                        //     .attr('d', 'M14.8025 62.0243H13.3025V63.5243V109.33C13.3025 112.457 10.7652 114.995 7.62974 114.995C4.52341 114.995 2.05603 112.482 2.05603 109.33V58.5276C2.05603 47.7847 10.8631 39.0498 21.6399 39.0498H57.8253C68.5917 39.0498 77.4056 47.7849 77.4056 58.5276V109.33C77.4056 112.483 74.9364 114.995 71.8267 114.995C68.6982 114.995 66.1557 112.454 66.1557 109.33V63.5243V62.0243H64.6557H60.9589H59.4589V63.5243V190.975C59.4589 195.441 55.8001 199.086 51.3147 199.086C46.8293 199.086 43.2017 195.448 43.2017 190.975V116.968V115.468H41.7017H37.7564H36.2564V116.968V190.975C36.2564 195.449 32.6278 199.086 28.1539 199.086C23.6745 199.086 20.0392 195.447 20.0392 190.975C20.0392 187.046 20.0184 155.183 19.9975 124.302C19.9871 108.862 19.9767 93.6674 19.9689 82.3327L19.9594 68.6775L19.9568 64.8683L19.9561 63.8666L19.9559 63.61L19.9558 63.5451V63.5288V63.5247C19.9558 63.5238 19.9558 63.5233 18.4558 63.5243L19.9558 63.5233L19.9548 62.0243H18.4558H14.8025ZM39.7326 31.8474C31.5119 31.8474 24.8553 25.1836 24.8535 16.9684C24.8537 8.74658 31.5101 2.08571 39.7326 2.08571C47.945 2.08571 54.6081 8.74501 54.6081 16.9684C54.6081 25.1831 47.945 31.8474 39.7326 31.8474Z')\r\n                                        //     .attr('transform', 'scale(' + scaleX + ',' + scaleY + ')')\r\n                                        //     .attr('fill', this.colorFunctionL(population))\r\n                                        //     .attr('stroke', 'black')\r\n                                        //     .attr('stroke-width', 3);\r\n                                        // gg.attr('transform', 'translate(' + x + ',' + y + ')');\r\n                                        // var gd = this.svg.append('g');\r\n                                        // gd.append('path')\r\n                                        //     .attr('d', \"M1 14.0338C1 10.5338 1 7.5338 4.5 4.0338C7.3 1.2338 12 0.867135 14 1.0338L19.5 1.03381C21.5 1.03381 26.2 1.6338 29 4.0338C31.8 6.4338 32.1667 11.7005 32 14.0338V24.0338C32 26.8338 28.3333 28.8671 26.5 29.5338L24.5 42.0338C24.5 43.2338 23.1667 44.2005 22.5 44.5338H10.5C9.7 44.5338 9.16667 42.8671 9 42.0338L7 29.5338C4.2 29.9338 2.16667 26.0338 1.5 24.0338C1.33333 21.8671 1 16.8338 1 14.0338Z\")\r\n                                        //     .attr('transform', 'scale(' + scaleX + ',' + scaleY + ')')\r\n                                        //     .attr('fill', this.colorFunctionL(population))\r\n                                        //     .attr('stroke', 'none')\r\n                                        //     .attr('stroke-width', 3);\r\n                                        this.svg.append('rect')\r\n                                            .attr('x', x1)\r\n                                            .attr('y', y1)\r\n                                            .attr('width', iconWidth)\r\n                                            .attr('height', iconWidth)\r\n                                            .style('fill', this.colorFunctionL(population));\r\n                                        // gd.attr('transform', 'translate(' + x + ',' + y + ')')\r\n                                        //     .attr('transform', 'scale(' + scaleX + ',' + scaleY + ')')\r\n                                        //     .attr('fill', this.colorFunctionL(population))\r\n                                        //     .attr('stroke', 'none')\r\n                                        //     .attr('stroke-width', 3);\r\n                                        // gd.attr('transform', 'translate(' + x + ',' + y + ')');\r\n                                    } \r\n                                    // else {\r\n                                    //     const s = 25;\r\n                                    //     const xs = center[0] - ((iconWidth*this.sizeFunctionL(population)/s + iconGap*this.sizeFunctionL(population)/s) * 5 / 2) + ((i % 5) * (iconWidth*this.sizeFunctionL(population)/s + iconGap*this.sizeFunctionL(population)/s));\r\n                                    //     let ys = center[1] + (Math.floor(i / 5) * (iconHeight*this.sizeFunctionL(population)/s + iconGap)) - 10;\r\n                                    //     if(feature.properties.NAME=='Russia') ys -= 100;\r\n                                    //     this.svg.append('image')\r\n                                    //         .attr('xlink:href', require('../assets/PersonIcon.svg')) // 图标的路径\r\n                                    //         .attr('x', xs)\r\n                                    //         .attr('y', ys)\r\n                                    //         .attr('width', iconWidth*this.sizeFunctionL(population)/s)\r\n                                    //         .attr('height', iconHeight*this.sizeFunctionL(population)/s)\r\n                                    //         .attr('opcacity', 0.7);\r\n                                    // }\r\n                                }\r\n                            }\r\n                        });\r\n                        //draw quantity legend\r\n                        // this.svg.append('image')\r\n                        //     .attr('xlink:href', require('../assets/PersonIcon.svg')) // 图标的路径\r\n                        //     .attr('x', 50)\r\n                        //     .attr('y', 100)\r\n                        //     .attr('width', iconWidth * 2)\r\n                        //     .attr('height', iconHeight * 2);\r\n                        this.svg.append('rect')\r\n                            .attr('x', 50)\r\n                            .attr('y', 110)\r\n                            .attr('width', iconWidth)\r\n                            .attr('height', iconWidth)\r\n                            .attr('fill', 'rgba(230, 158, 165, 0.7)');\r\n                        this.svg.append('text')\r\n                            .attr('x', 70)\r\n                            .attr('y', 120)\r\n                            .text(':100k');\r\n                        if (this.ifDoubleEncoding == true) {\r\n                            if (this.preColortype == 0) {\r\n                                //luminance legend\r\n                                this.drawColorLuminanceLegend();\r\n                            } else if (this.preColortype == 1) {\r\n                                //hue legend\r\n                                this.drawColorHueLegend();\r\n                            }\r\n                            // this.doubleEncoding();\r\n                        }\r\n                        \r\n                    }\r\n\r\n\r\n                } else if (type === this.myType['Glyph']) {\r\n                    if (this.ifDoubleEncoding == false) {\r\n                        this.showErrorDialog(\"Encoding Channel Not Support\", \"Only supporting under dual encoding situation!\");\r\n                        return;\r\n                    }\r\n                    this.encodingChannelType = type;\r\n                    if (this.ifSizeColor == false) {\r\n                        this.encodingChannel = () => {\r\n                            this.svg.selectAll('path').attr('fill', this.defaultColor);\r\n                            const iconWidth = 10;\r\n                            const iconHeight = 25;\r\n                            const scales = 10;\r\n\r\n                            this.geoData.features.forEach(feature=>{\r\n                                const center = this.geoPath.centroid(feature);\r\n                                const population = this.getPopulation(feature);\r\n                                if (population >= 1000000) {\r\n                                    this.svg.append('image')\r\n                                        .attr('xlink:href', require('../assets/PersonIcon.svg'))\r\n                                        .attr('x', center[0])\r\n                                        .attr('y', center[1]-10)\r\n                                        .attr('width', iconWidth*this.sizeFunctionL(population)/scales)\r\n                                        .attr('height', iconHeight*this.sizeFunctionL(population)/scales)\r\n                                        .attr('opacity', 0.7);\r\n                                }\r\n                            });\r\n                            for (let i = 0, py = 100, delta = 20; i < 4; i++) {\r\n                                let t = 1000000*Math.pow(5, i);\r\n                                let v = this.sizeFunctionL(t);\r\n                                let w = iconWidth*v/scales;\r\n                                let h = iconHeight*v/scales;\r\n                                this.svg.append('image')\r\n                                    .attr('xlink:href', require('../assets/PersonIcon.svg'))\r\n                                    .attr('x', 50)\r\n                                    .attr('y', py)\r\n                                    .attr('width', w)\r\n                                    .attr('height', h)\r\n                                    .attr('opacity', 0.7);\r\n                                const label = t<1000 ? Math.floor(t) : t<1000000 ? Math.floor(t/1000)+'k': Math.floor(t/1000000)+'m';\r\n                                this.svg.append('text')\r\n                                    .attr('x', 65+w)\r\n                                    .attr('y', py+h/2+5)\r\n                                    .text(label);\r\n                                \r\n                                py += h + delta;\r\n                            }\r\n                            // this.doubleEncoding();\r\n                        }\r\n                    } else {\r\n                        this.encodingChannel = () => {\r\n                            this.svg.selectAll('path').attr('fill', this.defaultColor);\r\n                            const iconWidth = 10;\r\n                            const iconHeight = 25;\r\n                            const scaleX = 0.8;\r\n                            const scaleY = 0.8;\r\n\r\n                            this.geoData.features.forEach(feature=>{\r\n                                const center = this.geoPath.centroid(feature);\r\n                                const population = this.getPopulation(feature);\r\n                                if (population >= 1000000) {\r\n                                    const x = center[0], y = center[1];\r\n                                    const x1 = x+13, y1 = y-5;\r\n                                    var gd = this.svg.append('g');\r\n                                    gd.append('path')\r\n                                        .attr('d', \"M1 14.0338C1 10.5338 1 7.5338 4.5 4.0338C7.3 1.2338 12 0.867135 14 1.0338L19.5 1.03381C21.5 1.03381 26.2 1.6338 29 4.0338C31.8 6.4338 32.1667 11.7005 32 14.0338V24.0338C32 26.8338 28.3333 28.8671 26.5 29.5338L24.5 42.0338C24.5 43.2338 23.1667 44.2005 22.5 44.5338H10.5C9.7 44.5338 9.16667 42.8671 9 42.0338L7 29.5338C4.2 29.9338 2.16667 26.0338 1.5 24.0338C1.33333 21.8671 1 16.8338 1 14.0338Z\")\r\n                                        .attr('transform', 'scale(' + scaleX + ',' + scaleY + ')')\r\n                                        .attr('fill', this.colorFunctionL(population))\r\n                                        .attr('stroke', 'none')\r\n                                        .attr('stroke-width', 3);\r\n                                    this.svg.append('circle')\r\n                                        .attr('cx', x1)\r\n                                        .attr('cy', y1)\r\n                                        .attr('r', 6)\r\n                                        .style('fill', this.colorFunctionL(population));\r\n                                    gd.attr('transform', 'translate(' + x + ',' + y + ')')\r\n                                        .attr('transform', 'scale(' + scaleX + ',' + scaleY + ')')\r\n                                        .attr('fill', this.colorFunctionL(population))\r\n                                        .attr('stroke', 'none')\r\n                                        .attr('stroke-width', 3);\r\n                                    gd.attr('transform', 'translate(' + x + ',' + y + ')');\r\n                                }\r\n                            });\r\n                            for (let i = 0, py = 100, delta = 40; i < 4; i++) {\r\n                                const x = 50;\r\n                                const x1 = x+13, y1 = py-5;\r\n                                let t = 1000000*Math.pow(5, i);\r\n                                let w = iconWidth;\r\n                                let h = iconHeight;\r\n                                var gld = this.svg.append('g');\r\n                                gld.append('path')\r\n                                    .attr('d', \"M1 14.0338C1 10.5338 1 7.5338 4.5 4.0338C7.3 1.2338 12 0.867135 14 1.0338L19.5 1.03381C21.5 1.03381 26.2 1.6338 29 4.0338C31.8 6.4338 32.1667 11.7005 32 14.0338V24.0338C32 26.8338 28.3333 28.8671 26.5 29.5338L24.5 42.0338C24.5 43.2338 23.1667 44.2005 22.5 44.5338H10.5C9.7 44.5338 9.16667 42.8671 9 42.0338L7 29.5338C4.2 29.9338 2.16667 26.0338 1.5 24.0338C1.33333 21.8671 1 16.8338 1 14.0338Z\")\r\n                                    .attr('transform', 'scale(' + scaleX + ',' + scaleY + ')')\r\n                                    .attr('fill', this.colorFunctionL(t))\r\n                                    .attr('stroke', 'none')\r\n                                    .attr('stroke-width', 3);\r\n                                this.svg.append('circle')\r\n                                    .attr('cx', x1)\r\n                                    .attr('cy', y1)\r\n                                    .attr('r', 6)\r\n                                    .style('fill', this.colorFunctionL(t));\r\n                                gld.attr('transform', 'translate(' + x + ',' + py + ')')\r\n                                    .attr('transform', 'scale(' + scaleX + ',' + scaleY + ')')\r\n                                    .attr('fill', this.colorFunctionL(t))\r\n                                    .attr('stroke', 'none')\r\n                                    .attr('stroke-width', 3);\r\n                                gld.attr('transform', 'translate(' + x + ',' + py + ')');\r\n\r\n                                const label = t<1000 ? Math.floor(t) : t<1000000 ? Math.floor(t/1000)+'k': Math.floor(t/1000000)+'m';\r\n                                this.svg.append('text')\r\n                                    .attr('x', 70+w)\r\n                                    .attr('y', py+h/2)\r\n                                    .text(label);\r\n                                \r\n                                py += h + delta;\r\n                            }\r\n                            // this.doubleEncoding();\r\n                        }\r\n                    }\r\n                    \r\n                } else if (type === this.myType['GlyphFlag']) {\r\n                    if (this.ifDoubleEncoding == true && this.ifSizeColor == true) {\r\n                        alert('Only supporting size method under dual encoding situation!');\r\n                        return;\r\n                    }\r\n                    this.encodingChannelType = type;\r\n                    this.encodingChannel = () => {\r\n                        this.svg.selectAll('path').attr('fill', this.defaultColor);\r\n                        this.geoData.features.forEach(feature=> {\r\n                            const center=this.geoPath.centroid(feature);\r\n                            const population=this.getPopulation(feature);\r\n                            const flag = feature.properties.flag;\r\n                            const width = 10, height = 10;\r\n                            if (flag !== -1) {\r\n                                if (this.ifDoubleEncoding)\r\n                                    this.svg.append('image')\r\n                                        .attr('xlink:href', flag)\r\n                                        .attr('x', center[0] - 10) // 你可能需要调整这个以适合国旗图像的大小和位置\r\n                                        .attr('y', center[1] - 10) // 同上\r\n                                        .attr('width', width*this.sizeFunctionL(population)/10) // 根据需要调整国旗的尺寸\r\n                                        .attr('height', height*this.sizeFunctionL(population)/10);\r\n                                else\r\n                                this.svg.append('image')\r\n                                        .attr('xlink:href', flag) // 使用国旗的base64编码\r\n                                        .attr('x', center[0] - 10) // 你可能需要调整这个以适合国旗图像的大小和位置\r\n                                        .attr('y', center[1] - 10) // 同上\r\n                                        .attr('width', width) // 根据需要调整国旗的尺寸\r\n                                        .attr('height', height);\r\n                            }\r\n                        });\r\n                    }\r\n                }\r\n                else if (type === this.myType['Remove']) {\r\n                    this.encodingChannelType = type;\r\n\r\n                    this.encodingChannel = () => {\r\n                        this.svg.selectAll('path').attr(\"fill\", this.defaultColor);\r\n                        d3.select(\".\" + this.value + \"-legend\").selectAll(\"*\").remove();\r\n                    }\r\n                    if (this.ifDoubleEncoding==true)\r\n                        this.doubleEncoding();\r\n                } else {\r\n                    // // 如果没有适用的编码方式\r\n                    // this.encodingChannelType = -1; // 或其他表示无效编码方式的值\r\n\r\n                    // // 显示一条消息\r\n                    // this.encodingChannel = () => {\r\n                    //     this.svg.selectAll('path').attr(\"fill\", this.defaultColor);\r\n\r\n                    //     // 首先，清除可能存在的旧消息\r\n                    //     d3.select(\".\" + this.value + \"-legend\").selectAll(\"*\").remove();\r\n\r\n                    //     // 向legend SVG元素中添加文本\r\n                    //     d3.select(\".\" + this.value + \"-legend\")\r\n                    //         .append('text')\r\n                    //         .attr('x', 10) // 根据需要调整文本的x位置\r\n                    //         .attr('y', 20) // 根据需要调整文本的y位置\r\n                    //         .attr('fill', 'black') // 文本颜色\r\n                    //         .style('font-size', '14px') // 文本大小\r\n                    //         .text('This encoding method is not applicable to the current data provided.');\r\n                    // };\r\n                    // d3.select(\".\" + this.value + \"-legend\").selectAll(\"*\").remove();\r\n                    this.showErrorDialog(\"Encoding Channel Not Support\", \"The selected encoding channel only support the data your uploaded!\");\r\n                    if (this.ifDoubleEncoding==true)\r\n                        this.doubleEncoding();\r\n                }\r\n            } else {\r\n                d3.select(\".\" + this.value + \"-legend\").selectAll(\"*\").remove();\r\n                if (type === this.myType['GlyphFlag']) {\r\n                    this.encodingChannelType = type;\r\n                    this.encodingChannel = () => {\r\n                        this.svg.selectAll('path').attr(\"fill\", this.defaultColor);\r\n\r\n                        this.geoData.features.forEach(feature => {\r\n                            // const flagBase64 = this.getPopulation(feature); // 使用getPopulation方法尝试从infoData获取国旗的base64编码\r\n                            const flagBase64 = feature.properties.flag;\r\n\r\n                            // 检查flagBase64是否不等于-1，仅当不等于-1时，才显示国旗\r\n                            if (flagBase64 !== -1) {\r\n                                const center = this.geoPath.centroid(feature); // 计算国家地理中心点\r\n\r\n                                // 在地图的国家中心点上添加国旗图像\r\n                                if (this.ifDoubleEncoding == false) {\r\n                                    this.svg.append('image')\r\n                                        .attr('xlink:href', flagBase64) // 使用国旗的base64编码\r\n                                        .attr('x', center[0] - 10) // 你可能需要调整这个以适合国旗图像的大小和位置\r\n                                        .attr('y', center[1] - 10) // 同上\r\n                                        .attr('width', 20) // 根据需要调整国旗的尺寸\r\n                                        .attr('height', 20);\r\n                                } else {\r\n                                    this.svg.append('image')\r\n                                        .attr('xlink:href', flagBase64) // 使用国旗的base64编码\r\n                                        .attr('x', center[0] - 10) // 你可能需要调整这个以适合国旗图像的大小和位置\r\n                                        .attr('y', center[1] - 10) // 同上\r\n                                        .attr('width', 20) // 根据需要调整国旗的尺寸\r\n                                        .attr('height', 20)\r\n                                        .attr('fill', this.colorFunctionL());\r\n                                }\r\n\r\n                            }\r\n                        });\r\n                    };\r\n                } else if (type === this.myType['Color (Hue)']) {\r\n                    this.encodingChannelType = type;\r\n\r\n                    // 1. 创建一个包含所有国家名称的数组\r\n                    const countries = this.geoData.features.map(d => d.properties.NAME);\r\n\r\n                    // 2. 自定义一个包含51种颜色的数组\r\n                    const customColors = [\r\n                        \"#e6194B\", \"#3cb44b\", \"#ffe119\", \"#4363d8\", \"#f58231\", \"#911eb4\", \"#46f0f0\", \"#f032e6\",\r\n                        \"#bcf60c\", \"#fabebe\", \"#008080\", \"#e6beff\", \"#9a6324\", \"#fffac8\", \"#800000\", \"#aaffc3\",\r\n                        \"#808000\", \"#ffd8b1\", \"#000075\", \"#808080\", \"#123123\", \"#000000\",\r\n                        // 添加更多颜色以确保有51种不同的颜色\r\n                        \"#59656d\", \"#c17b81\", \"#b5d99c\", \"#f5b971\", \"#8fb5aa\", \"#f28a9b\", \"#a4c3ed\", \"#8ec6c5\",\r\n                        \"#c6d7eb\", \"#ead3c1\", \"#92b4a7\", \"#f4ebc1\", \"#cbb3bf\", \"#acb7ae\", \"#e2c2de\", \"#cccccc\",\r\n                        \"#b97a57\", \"#ab69c6\", \"#966fd6\", \"#cfcfc4\", \"#b39eb5\", \"#779ecb\", \"#fdfd96\", \"#836953\",\r\n                        \"#779ecb\", \"#03c03c\", \"#966fd6\", \"#c23b22\", \"#f49ac2\", \"#fadadd\"\r\n                    ];\r\n\r\n                    // 使用d3.scaleOrdinal来映射国家到颜色\r\n                    const colorScale = (d) => {\r\n                        if (d && d.properties && d.properties.NAME)\r\n                            return d3.scaleOrdinal(countries, customColors)(d.properties.NAME);\r\n                        else\r\n                            return this.defaultColor;\r\n                    }\r\n\r\n                    // 重写encodingChannel函数\r\n                    this.encodingChannel = () => {\r\n                        // 在地图上为每个国家应用颜色\r\n                        this.svg.selectAll('path')\r\n                            .attr('fill', d => colorScale(d)) // 使用比例尺确定颜色\r\n                            .attr('stroke', '#ffffff'); // 设置边框颜色，可根据需要调整\r\n\r\n                        this.svg.selectAll('circle')\r\n                            .attr('fill', d => colorScale(d))\r\n                            .attr('stroke', '#ffffff');\r\n                        this.highLights[this.pointer2highlight].forEach(highLight => {\r\n                            highLight();\r\n                        });\r\n                    };\r\n                } else {\r\n                    // // 如果没有适用的编码方式\r\n                    // this.encodingChannelType = -1; // 或其他表示无效编码方式的值\r\n\r\n                    // // 显示一条消息\r\n                    // this.encodingChannel = () => {\r\n                    //     this.svg.selectAll('path').attr(\"fill\", this.defaultColor);\r\n\r\n                    //     // 首先，清除可能存在的旧消息\r\n                    //     d3.select(\".\" + this.value + \"-legend\").selectAll(\"*\").remove();\r\n\r\n                    //     // 向legend SVG元素中添加文本\r\n                    //     d3.select(\".\" + this.value + \"-legend\")\r\n                    //         .append('text')\r\n                    //         .attr('x', 10) // 根据需要调整文本的x位置\r\n                    //         .attr('y', 20) // 根据需要调整文本的y位置\r\n                    //         .attr('fill', 'black') // 文本颜色\r\n                    //         .style('font-size', '14px') // 文本大小\r\n                    //         .text('This encoding method is not applicable to the current data provided.');\r\n                    // };\r\n\r\n                    this.showErrorDialog(\"Encoding Channel Not Support\", \"The selected encoding channel only support the data your uploaded!\")\r\n                }\r\n\r\n\r\n            }\r\n\r\n\r\n            this.drawSvg();\r\n        },\r\n\r\n        drawColorLuminanceLegend() {\r\n            const legendWidth = this.legendWidth;\r\n            const legendHeight = 20;\r\n            const numSegments = 8; // 将色彩标尺等分成5段\r\n\r\n            const segmentWidth = legendWidth / numSegments; // 每个段的宽度\r\n            const populationWidth = Math.pow(this.mostPopulation, 0.25) / numSegments\r\n\r\n            const legendGradient = this.legend.append('svg')\r\n                .attr('width', legendWidth)\r\n                .attr('height', legendHeight);\r\n\r\n            this.legend.append('text')\r\n                .attr('x', 0)\r\n                .attr('y', legendHeight + 15)\r\n                // .attr('text-anchor', 'middle')\r\n                .text('0')\r\n                .style('font-size', '10px');\r\n\r\n            // 绘制每个段的渐变色块和白色分隔线\r\n            for (let i = 0; i < numSegments; i++) {\r\n                const segmentStart = i * segmentWidth;\r\n                const segmentEnd = (i + 1) * segmentWidth;\r\n\r\n                const populationStart = Math.pow(i * populationWidth, 4);\r\n                const populationEnd = Math.pow((i + 1) * populationWidth, 4);\r\n\r\n                // 添加渐变色块\r\n                const gradient = legendGradient.append('defs')\r\n                    .append('linearGradient')\r\n                    .attr('id', `legendGradient${i}`)\r\n                    .attr('x1', '0%')\r\n                    .attr('y1', '0%')\r\n                    .attr('x2', '100%')\r\n                    .attr('y2', '0%');\r\n\r\n                gradient.append('stop')\r\n                    .attr('offset', '0%')\r\n                    .attr('stop-color', this.colorFunctionL(populationStart));\r\n\r\n                gradient.append('stop')\r\n                    .attr('offset', '100%')\r\n                    .attr('stop-color', this.colorFunctionL(populationEnd));\r\n\r\n                // 绘制渐变色块\r\n                legendGradient.append('rect')\r\n                    .attr('x', segmentStart)\r\n                    .attr('y', 0)\r\n                    .attr('width', segmentWidth)\r\n                    .attr('height', legendHeight)\r\n                    .style('fill', `url(#legendGradient${i})`);\r\n\r\n                // 添加白色分隔线\r\n                if (i < numSegments - 1) {\r\n                    legendGradient.append('line')\r\n                        .attr('x1', segmentEnd)\r\n                        .attr('y1', 0)\r\n                        .attr('x2', segmentEnd)\r\n                        .attr('y2', legendHeight)\r\n                        .style('stroke', '#ffffff')\r\n                        .style('stroke-width', 1);\r\n                }\r\n\r\n                // 添加数值标签\r\n                const label = populationEnd < 1000 ? Math.floor(populationEnd) :\r\n                    populationEnd < 1000000 ? Math.floor(populationEnd / 1000) + \"k\" :\r\n                        Math.floor(populationEnd / 1000000) + \"m\"\r\n                this.legend.append('text')\r\n                    .attr('x', segmentEnd)\r\n                    .attr('y', legendHeight + 15)\r\n                    .attr('text-anchor', 'middle')\r\n                    .text(label)\r\n                    .style('font-size', '10px');\r\n            }\r\n        },\r\n\r\n        drawColorHueLegend() {\r\n            const legendData = [\r\n                {color: 'rgb(142, 207, 201)', text: '< 5M', minPopulation: 0, maxPopulation: 5000000},\r\n                {color: 'rgb(255, 190, 122)', text: '5M-10M', minPopulation: 5000000, maxPopulation: 10000000},\r\n                {color: 'rgb(250, 127, 111)', text: '10M-50M', minPopulation: 10000000, maxPopulation: 50000000},\r\n                {color: 'rgb(130, 176, 210)', text: '50M-100M', minPopulation: 50000000, maxPopulation: 100000000},\r\n                {color: 'rgb(190, 184, 220)', text: '>100M', minPopulation: 100000000, maxPopulation: Infinity}\r\n            ];\r\n\r\n            const legendWidth = 20;\r\n            const legendHeight = 20;\r\n            const legendSpacing = 10;\r\n            const legendX = 10; // Starting x position for the legend\r\n            const legendY = 10; // Starting y position for the legend\r\n\r\n            // Create a group for the legend\r\n            // const legend = this.svg.append('g')\r\n            //     .attr('class', 'legend')\r\n            //     .attr('transform', `translate(${legendX},${legendY})`);\r\n\r\n            this.legend.append('g')\r\n                .attr('class', 'legend')\r\n                .attr('transform', `translate(${legendX},${legendY})`);\r\n\r\n            // Add color swatches\r\n            this.legend.selectAll('rect')\r\n                .data(legendData)\r\n                .enter().append('rect')\r\n                .attr('x', (d, i) => i * (legendHeight + legendSpacing) * 2)\r\n                .attr('y', 0)\r\n                .attr('width', legendWidth)\r\n                .attr('height', legendHeight)\r\n                .style('fill', d => d.color);\r\n\r\n            // Add text labels\r\n            this.legend.selectAll('text')\r\n                .data(legendData)\r\n                .enter().append('text')\r\n                .attr('x', (d, i) => i * (legendHeight + legendSpacing) * 2)\r\n                .attr('y', legendWidth + 5)\r\n                .attr('dy', '.35em') // Vertically center\r\n                .style('font-size', '10px')\r\n                .text(d => d.text);\r\n        },\r\n\r\n        doubleEncoding() {\r\n            this.ifDoubleEncoding = !this.ifDoubleEncoding;\r\n            this.ifDoubleEncodingText = this.ifDoubleEncoding ? 'Dual Encoding: ON' : 'Dual Encoding: OFF';\r\n            if (this.ifDoubleEncoding)\r\n                alert('Attention! Only supporting for one color method with other methods or size method with quantity method. No supporting for glyph.');\r\n        },\r\n\r\n        printSVG() {\r\n            var tempsvg = this.svg;\r\n            tempsvg.selectAll('*')\r\n                .attr('transform', 'translate(0, 10)');\r\n            var legendItems = this.legend.selectAll('*');\r\n\r\n            // 将图形移植到 tempsvg 上\r\n            legendItems.each(function () {\r\n                tempsvg.node().appendChild(this);\r\n            });\r\n            // 选择包含图形的SVG元素\r\n            tempsvg.selectAll('*')\r\n                .attr('transform', 'translate(10, 10)');\r\n            var svgElement = tempsvg.node();\r\n\r\n            // 将SVG内容转换为字符串\r\n            var svgString = new XMLSerializer().serializeToString(svgElement);\r\n\r\n            // 创建Blob对象\r\n            var blob = new Blob([svgString], {type: 'image/svg+xml'});\r\n\r\n            // 创建URL\r\n            var url = window.URL.createObjectURL(blob);\r\n\r\n            // 创建一个a标签用于下载\r\n            var a = document.createElement('a');\r\n            a.href = url;\r\n            a.download = 'd3_chart.svg'; // 下载文件的名称\r\n\r\n            // 模拟点击链接以触发下载\r\n            document.body.appendChild(a);\r\n            a.click();\r\n\r\n            // 清除之前创建的URL对象\r\n            window.URL.revokeObjectURL(url);\r\n\r\n        },\r\n        getTextWidth(text, fontSize) {\r\n            let canvas = document.createElement('canvas');\r\n            let context = canvas.getContext('2d');\r\n            context.font = fontSize + ' sans-serif';\r\n            return context.measureText(text).width;\r\n        }\r\n    },\r\n\r\n}\r\n</script>\r\n\r\n<style scoped>\r\n.container {\r\n    padding: 0px;\r\n}\r\n\r\n.sub-container {\r\n    border: 1px dotted;\r\n    border-color: #E1CBD8;\r\n}\r\n\r\n.sub-title {\r\n    margin-top: 6px;\r\n    padding: 3px;\r\n    font-size: 14px;\r\n    border-radius: 6px;\r\n    display: block;\r\n    width: fit-content;\r\n    background-color: #E1CBD8;\r\n}\r\n\r\n#sub-title-0 {\r\n    margin-top: 0px;\r\n}\r\n\r\n.element {\r\n    background-color: white;\r\n}\r\n\r\n.element:hover {\r\n    transform: scale(1.12);\r\n    border: 0.67px solid;\r\n    border-color: #E1CBD8;\r\n}\r\n\r\n.row-with-line {\r\n    position: relative; /* 设置相对定位，以便将竖线定位相对于该行 */\r\n}\r\n\r\n.row-with-line::before {\r\n    content: '';\r\n    width: 3px; /* 竖线的宽度 */\r\n    height: 90%; /* 竖线的高度*/\r\n    background-color: pink; /* 竖线的颜色 */\r\n    position: absolute; /* 使竖线定位在行的左侧 */\r\n    left: 0; /* 将竖线定位在行的左侧 */\r\n    top: 0; /* 将竖线定位在行的顶部 */\r\n}\r\n\r\n#myButton {\r\n    border: 2px solid transparent; /* 设置默认的边框，透明色 */\r\n    outline: none; /* 取消浏览器默认的焦点轮廓 */\r\n    /* border-color: pink; */\r\n}\r\n\r\n#myButton:hover {\r\n    border-color: pink; /* 设置选中时的边框颜色为粉色 */\r\n    /*outline: none;      /* 取消浏览器默认的焦点轮廓 */\r\n}\r\n\r\n.matched-heading {\r\n    background-color: pink;\r\n    padding: 10px;\r\n    text-align: center;\r\n}\r\n\r\n.colorfulButton {\r\n    background-color: pink; /* 设置按钮的背景颜色为红色 */\r\n    color: #000000; /* 设置按钮文字颜色为白色 */\r\n    border-radius: 5px;\r\n}\r\n\r\n.colorfulButtonPrint {\r\n    background-color: pink; /* 设置按钮的背景颜色为红色 */\r\n    color: #000000; /* 设置按钮文字颜色为白色 */\r\n    border-radius: 5px;\r\n    margin: 10px; /* 调整间距 */\r\n    margin-right: 20px;\r\n    transform: scale(1.5); /* 放大按钮 */\r\n    padding: 4px;\r\n    float: right;\r\n}\r\n\r\n.button-row {\r\n    margin-bottom: 2px; /* 添加20像素的底部间距 */\r\n}\r\n\r\n</style>","import { render } from \"./instance.vue?vue&type=template&id=41ea3d37&scoped=true\"\nimport script from \"./instance.vue?vue&type=script&lang=js\"\nexport * from \"./instance.vue?vue&type=script&lang=js\"\n\nimport \"./instance.vue?vue&type=style&index=0&id=41ea3d37&scoped=true&lang=css\"\n\nimport exportComponent from \"../../node_modules/vue-loader/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render],['__scopeId',\"data-v-41ea3d37\"]])\n\nexport default __exports__","<template>\r\n    <v-container>\r\n        <v-row>\r\n            <h1>About</h1>\r\n        </v-row>\r\n    </v-container>\r\n</template>\r\n\r\n<script>\r\n\r\nexport default {\r\n    name: 'aboutTab',\r\n\r\n    data() {\r\n        return {\r\n        };\r\n    },\r\n    methods: {\r\n    },\r\n}\r\n</script>\r\n\r\n<style scoped>\r\nh1 {\r\n    font-size: 56px;\r\n}\r\n</style>","import { render } from \"./about.vue?vue&type=template&id=1d416a16&scoped=true\"\nimport script from \"./about.vue?vue&type=script&lang=js\"\nexport * from \"./about.vue?vue&type=script&lang=js\"\n\nimport \"./about.vue?vue&type=style&index=0&id=1d416a16&scoped=true&lang=css\"\n\nimport exportComponent from \"../../node_modules/vue-loader/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render],['__scopeId',\"data-v-1d416a16\"]])\n\nexport default __exports__","<template>\r\n    <div style=\" height: 100%; width: 100%;\">\r\n        <v-container style=\"margin: 5; height: 100%; width: 100%;\">\r\n            <v-row>\r\n                <v-col>\r\n                    <h2>Quantitative</h2>\r\n                </v-col>\r\n                <v-col>\r\n                    <h2>Categorical</h2>\r\n                </v-col>\r\n            </v-row>\r\n            \r\n            <v-row>\r\n                <v-col class=\"image-with-text\">\r\n                    <v-img :src=\"require('../assets/galleryZhaoC.png')\" contain/>\r\n                </v-col>\r\n                <v-col class=\"image-with-text\">\r\n                    <v-img :src=\"require('../assets/galleryZhaoP.png')\" contain/>\r\n                </v-col>\r\n            </v-row>\r\n            <v-row>\r\n                <v-col>\r\n                    <div  class=\"text-container\">\r\n                        <div>Basic Map: Topographic Map</div>\r\n                        <div>Encoding Channel: Quantity</div>\r\n                        <div>Label Position: Icon</div>\r\n                        <div>Highlight: Light, Map Pin, Enlarged Portions</div>\r\n                    </div>\r\n                </v-col>\r\n                <v-col>\r\n                    <div  class=\"text-container\">\r\n                        <div>Basic Map: Political Map</div>\r\n                        <div>Encoding Channel: Color Hue</div>\r\n                        <div>Label Position: Convenient</div>\r\n                        <div>Highlight: Contour, Map Pin, 3D Transformation, Enlarged Portions</div>\r\n                    </div>\r\n                </v-col>\r\n            </v-row>\r\n\r\n            <v-row>\r\n                <v-col class=\"image-with-text\">\r\n                    <v-img :src=\"require('../assets/colordouble.png')\" contain/>\r\n                </v-col>\r\n                <v-col class=\"image-with-text\">\r\n                    <v-img :src=\"require('../assets/sizedouble.png')\" contain/>\r\n                </v-col>\r\n            </v-row>\r\n            <v-row>\r\n                <v-col>\r\n                    <div  class=\"text-container\">\r\n                        <div>颜色尺寸双编码样例</div>\r\n                        <div>先点颜色编码，再点尺寸编码</div>\r\n                    </div>\r\n                </v-col>\r\n                <v-col>\r\n                    <div  class=\"text-container\">\r\n                        <div>尺寸icon双编码样例</div>\r\n                        <div>先点尺寸编码，再点glyph编码</div>\r\n                    </div>\r\n                </v-col>\r\n            </v-row>\r\n        </v-container>\r\n    </div>\r\n    \r\n</template>\r\n\r\n<script>\r\n\r\nexport default {\r\n    name: 'galleryTab',\r\n\r\n    data() {\r\n        return {\r\n        };\r\n    },\r\n    methods: {\r\n    },\r\n}\r\n</script>\r\n\r\n<style scoped>\r\nh1 {\r\n    font-size: 56px;\r\n}\r\n.image-with-text {\r\n    display: flex;\r\n    /* align-items: center; 垂直居中对齐 */\r\n}\r\n\r\n.text-container {\r\n    margin-left: 20px; /* 调整文字与图片之间的距离 */\r\n    word-wrap: break-word; /* 或者 overflow-wrap: break-word; */\r\n}\r\n\r\n</style>","import { render } from \"./gallery.vue?vue&type=template&id=dbe3f828&scoped=true\"\nimport script from \"./gallery.vue?vue&type=script&lang=js\"\nexport * from \"./gallery.vue?vue&type=script&lang=js\"\n\nimport \"./gallery.vue?vue&type=style&index=0&id=dbe3f828&scoped=true&lang=css\"\n\nimport exportComponent from \"../../node_modules/vue-loader/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render],['__scopeId',\"data-v-dbe3f828\"]])\n\nexport default __exports__","import { render } from \"./App.vue?vue&type=template&id=b44ab81e&scoped=true\"\nimport script from \"./App.vue?vue&type=script&lang=js\"\nexport * from \"./App.vue?vue&type=script&lang=js\"\n\nimport \"./App.vue?vue&type=style&index=0&id=b44ab81e&scoped=true&lang=css\"\n\nimport exportComponent from \"../node_modules/vue-loader/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render],['__scopeId',\"data-v-b44ab81e\"]])\n\nexport default __exports__","// Styles\r\nimport '@mdi/font/css/materialdesignicons.css'\r\nimport 'vuetify/styles'\r\n\r\n// Vuetify\r\nimport { createVuetify } from 'vuetify'\r\n\r\nexport default createVuetify(\r\n  // https://vuetifyjs.com/en/introduction/why-vuetify/#feature-guides\r\n)\r\n","/**\r\n * plugins/webfontloader.js\r\n *\r\n * webfontloader documentation: https://github.com/typekit/webfontloader\r\n */\r\n\r\nexport async function loadFonts () {\r\n  const webFontLoader = await import(/* webpackChunkName: \"webfontloader\" */'webfontloader')\r\n\r\n  webFontLoader.load({\r\n    google: {\r\n      families: ['Roboto:100,300,400,500,700,900&display=swap'],\r\n    },\r\n  })\r\n}\r\n","import { createApp } from 'vue'\r\nimport App from './App.vue'\r\nimport vuetify from './plugins/vuetify'\r\nimport { loadFonts } from './plugins/webfontloader'\r\n\r\nloadFonts()\r\n\r\ncreateApp(App)\r\n  .use(vuetify)\r\n  .mount('#app')\r\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n// expose the modules object (__webpack_modules__)\n__webpack_require__.m = __webpack_modules__;\n\n","var deferred = [];\n__webpack_require__.O = function(result, chunkIds, fn, priority) {\n\tif(chunkIds) {\n\t\tpriority = priority || 0;\n\t\tfor(var i = deferred.length; i > 0 && deferred[i - 1][2] > priority; i--) deferred[i] = deferred[i - 1];\n\t\tdeferred[i] = [chunkIds, fn, priority];\n\t\treturn;\n\t}\n\tvar notFulfilled = Infinity;\n\tfor (var i = 0; i < deferred.length; i++) {\n\t\tvar chunkIds = deferred[i][0];\n\t\tvar fn = deferred[i][1];\n\t\tvar priority = deferred[i][2];\n\t\tvar fulfilled = true;\n\t\tfor (var j = 0; j < chunkIds.length; j++) {\n\t\t\tif ((priority & 1 === 0 || notFulfilled >= priority) && Object.keys(__webpack_require__.O).every(function(key) { return __webpack_require__.O[key](chunkIds[j]); })) {\n\t\t\t\tchunkIds.splice(j--, 1);\n\t\t\t} else {\n\t\t\t\tfulfilled = false;\n\t\t\t\tif(priority < notFulfilled) notFulfilled = priority;\n\t\t\t}\n\t\t}\n\t\tif(fulfilled) {\n\t\t\tdeferred.splice(i--, 1)\n\t\t\tvar r = fn();\n\t\t\tif (r !== undefined) result = r;\n\t\t}\n\t}\n\treturn result;\n};","var getProto = Object.getPrototypeOf ? function(obj) { return Object.getPrototypeOf(obj); } : function(obj) { return obj.__proto__; };\nvar leafPrototypes;\n// create a fake namespace object\n// mode & 1: value is a module id, require it\n// mode & 2: merge all properties of value into the ns\n// mode & 4: return value when already ns object\n// mode & 16: return value when it's Promise-like\n// mode & 8|1: behave like require\n__webpack_require__.t = function(value, mode) {\n\tif(mode & 1) value = this(value);\n\tif(mode & 8) return value;\n\tif(typeof value === 'object' && value) {\n\t\tif((mode & 4) && value.__esModule) return value;\n\t\tif((mode & 16) && typeof value.then === 'function') return value;\n\t}\n\tvar ns = Object.create(null);\n\t__webpack_require__.r(ns);\n\tvar def = {};\n\tleafPrototypes = leafPrototypes || [null, getProto({}), getProto([]), getProto(getProto)];\n\tfor(var current = mode & 2 && value; typeof current == 'object' && !~leafPrototypes.indexOf(current); current = getProto(current)) {\n\t\tObject.getOwnPropertyNames(current).forEach(function(key) { def[key] = function() { return value[key]; }; });\n\t}\n\tdef['default'] = function() { return value; };\n\t__webpack_require__.d(ns, def);\n\treturn ns;\n};","// define getter functions for harmony exports\n__webpack_require__.d = function(exports, definition) {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.f = {};\n// This file contains only the entry chunk.\n// The chunk loading function for additional chunks\n__webpack_require__.e = function(chunkId) {\n\treturn Promise.all(Object.keys(__webpack_require__.f).reduce(function(promises, key) {\n\t\t__webpack_require__.f[key](chunkId, promises);\n\t\treturn promises;\n\t}, []));\n};","// This function allow to reference async chunks\n__webpack_require__.u = function(chunkId) {\n\t// return url for filenames based on template\n\treturn \"js/\" + \"webfontloader\" + \".\" + \"fb94956d\" + \".js\";\n};","// This function allow to reference async chunks\n__webpack_require__.miniCssF = function(chunkId) {\n\t// return url for filenames based on template\n\treturn undefined;\n};","__webpack_require__.g = (function() {\n\tif (typeof globalThis === 'object') return globalThis;\n\ttry {\n\t\treturn this || new Function('return this')();\n\t} catch (e) {\n\t\tif (typeof window === 'object') return window;\n\t}\n})();","__webpack_require__.o = function(obj, prop) { return Object.prototype.hasOwnProperty.call(obj, prop); }","var inProgress = {};\nvar dataWebpackPrefix = \"geo-info-graphics-v1:\";\n// loadScript function to load a script via script tag\n__webpack_require__.l = function(url, done, key, chunkId) {\n\tif(inProgress[url]) { inProgress[url].push(done); return; }\n\tvar script, needAttach;\n\tif(key !== undefined) {\n\t\tvar scripts = document.getElementsByTagName(\"script\");\n\t\tfor(var i = 0; i < scripts.length; i++) {\n\t\t\tvar s = scripts[i];\n\t\t\tif(s.getAttribute(\"src\") == url || s.getAttribute(\"data-webpack\") == dataWebpackPrefix + key) { script = s; break; }\n\t\t}\n\t}\n\tif(!script) {\n\t\tneedAttach = true;\n\t\tscript = document.createElement('script');\n\n\t\tscript.charset = 'utf-8';\n\t\tscript.timeout = 120;\n\t\tif (__webpack_require__.nc) {\n\t\t\tscript.setAttribute(\"nonce\", __webpack_require__.nc);\n\t\t}\n\t\tscript.setAttribute(\"data-webpack\", dataWebpackPrefix + key);\n\n\t\tscript.src = url;\n\t}\n\tinProgress[url] = [done];\n\tvar onScriptComplete = function(prev, event) {\n\t\t// avoid mem leaks in IE.\n\t\tscript.onerror = script.onload = null;\n\t\tclearTimeout(timeout);\n\t\tvar doneFns = inProgress[url];\n\t\tdelete inProgress[url];\n\t\tscript.parentNode && script.parentNode.removeChild(script);\n\t\tdoneFns && doneFns.forEach(function(fn) { return fn(event); });\n\t\tif(prev) return prev(event);\n\t}\n\tvar timeout = setTimeout(onScriptComplete.bind(null, undefined, { type: 'timeout', target: script }), 120000);\n\tscript.onerror = onScriptComplete.bind(null, script.onerror);\n\tscript.onload = onScriptComplete.bind(null, script.onload);\n\tneedAttach && document.head.appendChild(script);\n};","// define __esModule on exports\n__webpack_require__.r = function(exports) {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","__webpack_require__.p = \"\";","// no baseURI\n\n// object to store loaded and loading chunks\n// undefined = chunk not loaded, null = chunk preloaded/prefetched\n// [resolve, reject, Promise] = chunk loading, 0 = chunk loaded\nvar installedChunks = {\n\t524: 0\n};\n\n__webpack_require__.f.j = function(chunkId, promises) {\n\t\t// JSONP chunk loading for javascript\n\t\tvar installedChunkData = __webpack_require__.o(installedChunks, chunkId) ? installedChunks[chunkId] : undefined;\n\t\tif(installedChunkData !== 0) { // 0 means \"already installed\".\n\n\t\t\t// a Promise means \"currently loading\".\n\t\t\tif(installedChunkData) {\n\t\t\t\tpromises.push(installedChunkData[2]);\n\t\t\t} else {\n\t\t\t\tif(true) { // all chunks have JS\n\t\t\t\t\t// setup Promise in chunk cache\n\t\t\t\t\tvar promise = new Promise(function(resolve, reject) { installedChunkData = installedChunks[chunkId] = [resolve, reject]; });\n\t\t\t\t\tpromises.push(installedChunkData[2] = promise);\n\n\t\t\t\t\t// start chunk loading\n\t\t\t\t\tvar url = __webpack_require__.p + __webpack_require__.u(chunkId);\n\t\t\t\t\t// create error before stack unwound to get useful stacktrace later\n\t\t\t\t\tvar error = new Error();\n\t\t\t\t\tvar loadingEnded = function(event) {\n\t\t\t\t\t\tif(__webpack_require__.o(installedChunks, chunkId)) {\n\t\t\t\t\t\t\tinstalledChunkData = installedChunks[chunkId];\n\t\t\t\t\t\t\tif(installedChunkData !== 0) installedChunks[chunkId] = undefined;\n\t\t\t\t\t\t\tif(installedChunkData) {\n\t\t\t\t\t\t\t\tvar errorType = event && (event.type === 'load' ? 'missing' : event.type);\n\t\t\t\t\t\t\t\tvar realSrc = event && event.target && event.target.src;\n\t\t\t\t\t\t\t\terror.message = 'Loading chunk ' + chunkId + ' failed.\\n(' + errorType + ': ' + realSrc + ')';\n\t\t\t\t\t\t\t\terror.name = 'ChunkLoadError';\n\t\t\t\t\t\t\t\terror.type = errorType;\n\t\t\t\t\t\t\t\terror.request = realSrc;\n\t\t\t\t\t\t\t\tinstalledChunkData[1](error);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t};\n\t\t\t\t\t__webpack_require__.l(url, loadingEnded, \"chunk-\" + chunkId, chunkId);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n};\n\n// no prefetching\n\n// no preloaded\n\n// no HMR\n\n// no HMR manifest\n\n__webpack_require__.O.j = function(chunkId) { return installedChunks[chunkId] === 0; };\n\n// install a JSONP callback for chunk loading\nvar webpackJsonpCallback = function(parentChunkLoadingFunction, data) {\n\tvar chunkIds = data[0];\n\tvar moreModules = data[1];\n\tvar runtime = data[2];\n\t// add \"moreModules\" to the modules object,\n\t// then flag all \"chunkIds\" as loaded and fire callback\n\tvar moduleId, chunkId, i = 0;\n\tif(chunkIds.some(function(id) { return installedChunks[id] !== 0; })) {\n\t\tfor(moduleId in moreModules) {\n\t\t\tif(__webpack_require__.o(moreModules, moduleId)) {\n\t\t\t\t__webpack_require__.m[moduleId] = moreModules[moduleId];\n\t\t\t}\n\t\t}\n\t\tif(runtime) var result = runtime(__webpack_require__);\n\t}\n\tif(parentChunkLoadingFunction) parentChunkLoadingFunction(data);\n\tfor(;i < chunkIds.length; i++) {\n\t\tchunkId = chunkIds[i];\n\t\tif(__webpack_require__.o(installedChunks, chunkId) && installedChunks[chunkId]) {\n\t\t\tinstalledChunks[chunkId][0]();\n\t\t}\n\t\tinstalledChunks[chunkId] = 0;\n\t}\n\treturn __webpack_require__.O(result);\n}\n\nvar chunkLoadingGlobal = self[\"webpackChunkgeo_info_graphics_v1\"] = self[\"webpackChunkgeo_info_graphics_v1\"] || [];\nchunkLoadingGlobal.forEach(webpackJsonpCallback.bind(null, 0));\nchunkLoadingGlobal.push = webpackJsonpCallback.bind(null, chunkLoadingGlobal.push.bind(chunkLoadingGlobal));","// startup\n// Load entry module and return exports\n// This entry module depends on other loaded chunks and execution need to be delayed\nvar __webpack_exports__ = __webpack_require__.O(undefined, [504], function() { return __webpack_require__(1729); })\n__webpack_exports__ = __webpack_require__.O(__webpack_exports__);\n"],"names":["_createElementVNode","_createBlock","_component_v_app","default","_withCtx","_createVNode","_component_v_main","_component_v_app_bar","elevation","extension","_component_v_tabs","modelValue","$setup","currentItem","_cache","$event","_component_v_tab","value","_component_v_icon","_createTextVNode","_","_createElementBlock","_Fragment","_renderList","items","item","key","_toDisplayString","more","length","_component_v_menu","activator","props","_component_v_btn","_mergeProps","class","height","width","rounded","variant","_component_v_list","_component_v_list_item","onClick","$options","addItem","_createCommentVNode","_component_v_text","_component_v_app_bar_title","_hoisted_1","_component_v_app_bar_nav_icon","_ctx","drawer","_component_v_window","style","_component_v_window_item","_component_homeTab","concat","_component_instanceTab","geoData","infoData","isNumerical","infoDataType","propName","infoDataName","_component_aboutTab","_component_galleryTab","_component_v_container","_component_v_row","_component_v_divider","_hoisted_2","_component_v_file_input","$data","files","label","accept","onChange","uploadFile","uploaded","_component_v_col","Object","keys","data","prop","_component_v_select","datatype","color","createInstance","disabled","clear","name","methods","this","targetKey","readFile","file","Promise","resolve","reject","reader","FileReader","onload","e","fileContents","target","result","d3","then","reduce","acc","cur","country","rest","isNaN","values","catch","error","console","readAsDataURL","log","loadInfoData","setup","inject","__exports__","_component_v_card","ref","id","$props","_component_v_expansion_panels","_component_v_expansion_panel","_component_v_expansion_panel_title","_component_v_expansion_panel_text","setRepresentation","myType","type","plainTextLabel","_component_v_img","src","require","contain","ifDoubleEncodingText","doubleEncoding","removeText","setEncodingChannel","_hoisted_3","_hoisted_4","_hoisted_5","_hoisted_6","_hoisted_7","_hoisted_8","_hoisted_9","_hoisted_10","_hoisted_11","removeTextLabel","setLabelPosition","_hoisted_12","_hoisted_13","_hoisted_14","_hoisted_15","_hoisted_16","_hoisted_17","removeTextHighlight","setHighlight","_normalizeClass","_hoisted_18","printText","printSVG","_hoisted_19","_component_v_dialog","errorDialog","title","errorTitle","text","errorMessage","actions","required","String","Boolean","representationType","projectionType","labelPositionType","encodingChannelType","highLightType","worldPopulation","mostPopulation","svg","legend","mapWidth","mapHeight","legendWidth","defaultColor","ifDoubleEncoding","ifSizeColor","preEncoding","preColortype","encodingChannel","representation","LabelPosition","colorFunctionL","sizeFunctionL","highLights","pointer2highlight","mounted","features","forEach","feature","curPopulation","getPopulation","cardEl","$refs","selectorCard","$el","legendColEl","legendCol","$nextTick","clientHeight","seContainer","document","getElementById","maxHeight","clientWidth","initMap","push","node","getBoundingClientRect","selectAll","attr","enter","append","geoPath","setProjection","drawSvg","alert","splitTextToLines","maxLineWidth","words","split","lines","currentLine","i","remove","highLight","loadJson","na","d","properties","NAME","getDataByCountry","cty","undefined","getDescriptionByCountry","showErrorDialog","msg","bounds","left","bottom","geoProjection","right","top","w","h","rows","Math","ceil","columns","pointRadius","points","j","x","y","point","invert","join","addHighLight","classed","on","fitSize","projection","event","datum","originalColor","defs","filter","feMerge","enlargedView","enlargedViewSvg","clipPath","html","x1","y1","r1","r","sqrt","xa","cos","atan","acos","ya","sin","xb","yb","xc","yc","xd","yd","boxWidth","boxHeight","boxSpacing","marginSpace","center","centroid","annotation","textLines","currentYOffset","line","index","subLines","subLine","annotatedFeatures","totalAnnotationsWidth","startX","annotationX","annotationY","maxWidth","ty","lineIndex","word","testLine","testWidth","getTextWidth","annotationFlag","flag_base64","countryColors","getCountryColor","fillColor","countryCenter","lineLength","edge","leftAnnotationsCount","bottomAnnotationsCount","rightAnnotationsCount","lineEndX","lineEndY","textOffsetX","textOffsetY","sortedFeatures","sort","a","b","centerA","centerB","circleCenterX","circleCenterY","radius","min","angleIncrement","PI","delta","gamma","angle","colorFunction","scale","transformFunction","input","pow","colorScale","domain","drawColorLuminanceLegend","population","drawColorHueLegend","baseHeight","populationPerHeight","cuboidWidth","cuboidLength","sideOpacity","px","t","v","floor","populationExtent","sizeScale","range","flag","py","iconWidth","iconGap","totalIcons","iconHeight","scales","scaleX","scaleY","gd","gld","flagBase64","countries","map","customColors","legendHeight","numSegments","segmentWidth","populationWidth","legendGradient","segmentStart","segmentEnd","populationStart","populationEnd","gradient","legendData","minPopulation","maxPopulation","Infinity","legendSpacing","legendX","legendY","tempsvg","legendItems","each","appendChild","svgElement","svgString","XMLSerializer","serializeToString","blob","Blob","url","window","URL","createObjectURL","createElement","href","download","body","click","revokeObjectURL","fontSize","canvas","context","getContext","font","measureText","components","homeTab","instanceTab","aboutTab","galleryTab","currentItemAbout","currentItemGallery","uniqueName","namesArray","newName","replace","count","includes","all","annotationData","flagData","annotationInfo","find","flagInfo","unshift","provide","removed","splice","indexOf","render","createVuetify","async","loadFonts","webFontLoader","load","google","families","createApp","App","use","vuetify","mount","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","exports","module","__webpack_modules__","call","m","deferred","O","chunkIds","fn","priority","notFulfilled","fulfilled","every","leafPrototypes","getProto","getPrototypeOf","obj","__proto__","mode","__esModule","ns","create","def","current","getOwnPropertyNames","definition","o","defineProperty","enumerable","get","f","chunkId","promises","u","miniCssF","g","globalThis","Function","prototype","hasOwnProperty","inProgress","dataWebpackPrefix","l","done","script","needAttach","scripts","getElementsByTagName","s","getAttribute","charset","timeout","nc","setAttribute","onScriptComplete","prev","onerror","clearTimeout","doneFns","parentNode","removeChild","setTimeout","bind","head","Symbol","toStringTag","p","installedChunks","installedChunkData","promise","Error","loadingEnded","errorType","realSrc","message","request","webpackJsonpCallback","parentChunkLoadingFunction","moreModules","runtime","some","chunkLoadingGlobal","self","__webpack_exports__"],"sourceRoot":""}